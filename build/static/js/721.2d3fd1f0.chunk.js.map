{"version":3,"file":"static/js/721.2d3fd1f0.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","util/helper.js","farmingWorker.js"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = 1 * shopProdBonus * assemblyBonus * modifiers_input.contagionPlantProd;\r\n\r\n        const Max = function (a, b) {\r\n            return a > b ? a : b;\r\n        }\r\n        let plantMult = Math.pow(\r\n            (1 + 0.05 * (1 + shovel * 0.02)),\r\n            this.calculateLogarithm(1.25, ManuallyCreated)\r\n        )\r\n        let output = TotalCreated * plantMult * PlantTotalProductionBonus * Math.pow(1.02, prestige);\r\n\r\n\r\n        return output;\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n\r\n\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let x = 0;\r\n        let numLoops = 0;\r\n        while (remainingTime > 0) {\r\n            numLoops++;\r\n            if (numLoops % 10 === 0) {\r\n                let xsdf = 0;\r\n                console.log('hit breakpoint')\r\n            }\r\n            // console.log(`loop remaining`)\r\n            plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n            if (plant.growthTime < 10) {\r\n                plant.growthTime = 10;\r\n            }\r\n\r\n            let expTick = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n            plant.timeToLevel = Math.ceil((plant.reqExp - plant.curExp) / expTick) * plant.growthTime;\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel >= remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            if (elapsedTime <= 0) {\r\n                elapsedTime = 1;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            // plant.created = this.calcPOW(plant.ManuallyCreated);\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n\r\n                plant.created += toCreate;\r\n                plant.totalMade += toCreate;\r\n\r\n                plant.futureMult = Math.pow(\r\n                    (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n                    this.calculateLogarithm(1.25, plant.created)\r\n                );\r\n\r\n                if (rankIncrease) {\r\n                    plant.Rank++;\r\n                    plant.curExp = 0;\r\n                    plant.perHarvest = this.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n                    plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick;\r\n                    plant.curExp += gainedEXP;\r\n\r\n                    if (plant.curExp > plant.reqExp) {\r\n                        plant.Rank++;\r\n                        plant.curExp = 0;\r\n                        plant.perHarvest = this.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n                        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    }\r\n                }\r\n\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n            plant.production = newOutPut;\r\n        }\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n\r\n        plant.timeToLevel = Math.ceil((remExp) / expBonus) * plant.growthTime;\r\n\r\n\r\n\r\n        // plant.timeToLevel = (remExp / expBonus) * plant.growthTime;\r\n        return plant;\r\n    },\r\n    calcPerHarvest: function (plant) {\r\n        return this.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige)\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers).timeToLevel;\r\n            let requiredHarvests = 10 * Math.pow(2, plant.prestige);\r\n            let remainingHarvests = requiredHarvests - plant.created;\r\n            let timeTillPrestige = (remainingHarvests / (plant.perHarvest * numAutos)) * plant.growthTime;\r\n\r\n            if (timeTillPrestige < 0) {\r\n                prestiged = true\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created += ((ticks) * plant.perHarvest) * numAutos;\r\n                plant.totalMade += ((ticks) * plant.perHarvest) * numAutos;\r\n                plant.Rank++;\r\n                plant.curExp = 0;\r\n                plant.perHarvest = this.calcPerHarvest(plant);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                plant.created += ((timeTillPrestige / plant.growthTime) * plant.perHarvest) * numAutos;\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return totalTime;\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAutos;\r\n        let time = modifiers.time;//time in seconds\r\n\r\n        let totalPotatoes = 0;\r\n\r\n        //Iterate over each second\r\n        for (let i = 0; i < time; i++) {\r\n            //Calculate new values for each plant\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n                let toAdd = j === plants.length - 1 ? 0 : plants[j + 1].production * 1;\r\n                curr.totalMade += toAdd;\r\n                let res = helper.calcFutureMult(curr, { ...modifiers, time: 1, numAuto: numAutos[j], string: false });\r\n                plants[j] = res;\r\n            }\r\n            totalPotatoes += plants[0].production;\r\n        }\r\n        // console.log(`plant 2 final prod: ${plants[1].production}`)\r\n        return { totalPotatoes: totalPotatoes, potatoeProduction: plants[0].production, plants: plants };\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = (seconds % 3600) % 60;\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`\r\n        }\r\n        else {\r\n            string = string + `0s`;\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        1001: { color: 'maroon' },\r\n        1002: { color: 'orange' },\r\n        1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './util/helper.js';\r\n\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    const roundInt = function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    }\r\n\r\n    const calculateLogarithm = function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    }\r\n    const calcPOW = function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    }\r\n    const calcProdOutput = function (plant_input, modifiers_input) {\r\n\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = 1 * shopProdBonus * assemblyBonus * modifiers_input.contagionPlantProd;\r\n\r\n        const Max = function (a, b) {\r\n            return a > b ? a : b;\r\n        }\r\n        let plantMult = Math.pow(\r\n            (1 + 0.05 * (1 + shovel * 0.02)),\r\n            calculateLogarithm(1.25, ManuallyCreated)\r\n        )\r\n        let output = TotalCreated * plantMult * PlantTotalProductionBonus * Math.pow(1.02, prestige);\r\n\r\n\r\n        return output;\r\n    }\r\n    const calcFutureMult = function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let x = 0;\r\n        while (remainingTime > 0) {\r\n            plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n            if (plant.growthTime < 10) {\r\n                plant.growthTime = 10;\r\n            }\r\n            plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank)\r\n            plant.timeToLevel = (plant.reqExp - plant.curExp) / (plant.prestigeBonus * modifiers.expBonus * numAutos) * plant.growthTime;\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel >= remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n            remainingTime -= elapsedTime;\r\n\r\n            // plant.created = this.calcPOW(plant.ManuallyCreated);\r\n            plant.perHarvest = roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n            let toCreate = plant.perHarvest * (elapsedTime / plant.growthTime) * numAutos;\r\n            plant.futureMult = Math.pow(\r\n                (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n                calculateLogarithm(1.25, plant.created + toCreate)\r\n            );\r\n            plant.created += toCreate;\r\n            plant.totalMade += toCreate;\r\n\r\n            if (rankIncrease) {\r\n                plant.Rank++;\r\n                plant.curExp = 0;\r\n            }\r\n            else {\r\n                let gainedEXP = (elapsedTime / plant.growthTime) * (plant.prestigeBonus * modifiers.expBonus * numAutos);\r\n                plant.curExp += gainedEXP;\r\n            }\r\n\r\n            let newOutPut = calcProdOutput(plant, modifiers);\r\n            plant.production = newOutPut;\r\n        }\r\n        return plant;\r\n    }\r\n    const calcTimeTillLevel = function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        if (plant.ID === 5) {\r\n            let x = 0;\r\n        }\r\n\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n\r\n        plant.timeToLevel = (remExp / expBonus) * plant.growthTime;\r\n        return plant;\r\n    }\r\n    const calcPerHarvest = function (plant) {\r\n        return roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige)\r\n    }\r\n    const calcHPProd = function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAutos;\r\n        let time = modifiers.time;//time in seconds\r\n\r\n        let totalPotatoes = 0;\r\n\r\n        //Iterate over each second\r\n        for (let i = 0; i < time; i++) {\r\n            //Calculate new values for each plant\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n                let toAdd = j === plants.length - 1 ? 0 : plants[j + 1].production * 1;\r\n                curr.totalMade += toAdd;\r\n                let res = calcFutureMult(curr, { ...modifiers, time: 1, numAuto: numAutos[j] });\r\n                plants[j] = res;\r\n            }\r\n            console.log(plants[0].production)\r\n            totalPotatoes += plants[0].production;\r\n        }\r\n        // console.log(`plant 2 final prod: ${plants[1].production}`)\r\n        return { totalPotatoes: totalPotatoes, potatoeProduction: plants[0].production };\r\n    }\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n        let modifiers = data.modifiers;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = 0;\r\n        let totalPotCombo = {};\r\n        let bestProd = 0;\r\n        let bestProdCombo = {};\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n            // console.log(`calculating loop: ${i} / ${combinations.length} <------> ${data.start}  == ${data.end}`);\r\n            let combo = combinations[i];\r\n            let tempPlants = [];\r\n\r\n            let result = helper.calcHPProd(finalPlants, { ...modifiers, numAutos: combo, time: secondsHour * futureTime })\r\n\r\n\r\n            if (result.totalPotatoes > totalPot) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n            if (result.potatoeProduction > bestProd) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            // eslint-disable-next-line no-restricted-globals\r\n            self.postMessage({\r\n                update: true\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n\r\n\r\n}"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_defineProperty","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","helper","roundTwoDecimal","number","Math","round","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","calcProdOutput","plant_input","modifiers_input","TotalCreated","totalMade","ManuallyCreated","created","shovel","manualHarvestFormula","shopProdBonus","prestige","PlantTotalProductionBonus","contagionPlantProd","this","calcFutureMult","plant","string","JSON","parse","stringify","modifiers","remainingTime","time","numAutos","numAuto","numLoops","console","growthTime","floor","TimeNeeded","prestigeBonus","shopGrowingSpeed","petPlantCombo","contagionPlantGrowth","expTick","expBonus","timeToLevel","ceil","reqExp","curExp","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","futureMult","Rank","gainedEXP","newOutPut","production","calcTimeTillLevel","remExp","calcPerHarvest","calcTimeTillPrestige","prestiged","totalTime","timeTillPrestige","ticks","calcHPProd","plants_input","plants","totalPotatoes","j","curr","toAdd","_objectSpread","potatoeProduction","secondsToStringWithS","seconds","numHours","numMinutes","numSeconds","concat","secondsToString","bonusColorMap","color","self","onmessage","_ref","_ref$data","data","id","data1","finalPlants","futureTime","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","start","end","combo","result","postMessage","update","success","err"],"sourceRoot":""}