{"version":3,"file":"static/js/133.32c6e9f3.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","util/helper.js","util/farmingHelper.js","farmingWorker.js"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = this.roundInt((seconds % 3600) % 60);\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`\r\n        }\r\n        else {\r\n            string = string + `0s`;\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        1001: { color: 'maroon' },\r\n        1002: { color: 'orange' },\r\n        1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './helper.js';\r\n\r\nvar farmingHelper = {\r\n    findMultipliersWithMinPercentage: function (sum, numbers, minPercentage) {\r\n        const multipliers = [];\r\n        let count = 0;\r\n\r\n        function backtrack(index, currentSum, currentMultipliers) {\r\n            count++;\r\n\r\n            if (index === numbers.length) {\r\n                const productSum = currentMultipliers.reduce((acc, multiplier, i) => acc + multiplier * numbers[i], 0);\r\n                if (productSum >= minPercentage * sum) {\r\n                    multipliers.push([...currentMultipliers]);\r\n                }\r\n                return;\r\n            }\r\n            let max = Math.floor((sum - currentSum) / numbers[index]);\r\n            for (let multiplier = 0; multiplier <= max; multiplier++) {\r\n                currentMultipliers[index] = multiplier;\r\n                let tempSum = currentSum + multiplier * numbers[index];\r\n                if (tempSum < sum) {\r\n                    backtrack(index + 1, currentSum + multiplier * numbers[index], currentMultipliers);\r\n                }\r\n            }\r\n        }\r\n\r\n        backtrack(0, 0, []);\r\n        console.log(count);\r\n        return multipliers;\r\n    },\r\n    calcGrowthTime: function (plant, modifiers) {\r\n        let num = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        return num < 10 ? 10 : num;\r\n    },\r\n    calcPlantHarvest: function (plant, modifiers) {\r\n        return helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.contagionHarvest;\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = 1 * shopProdBonus * assemblyBonus * modifiers_input.contagionPlantProd;\r\n\r\n        const Max = function (a, b) {\r\n            return a > b ? a : b;\r\n        }\r\n        let plantMult = Math.pow(\r\n            (1 + 0.05 * (1 + shovel * 0.02)),\r\n            helper.calculateLogarithm(1.25, ManuallyCreated)\r\n        )\r\n        let output = TotalCreated * plantMult * PlantTotalProductionBonus * Math.pow(1.02, prestige);\r\n        if (plant_input.ID === 1) {\r\n            output *= modifiers_input.hpBonus;\r\n        }\r\n\r\n        return output;\r\n    },\r\n    calcFryOutput: function (potatoes) {\r\n\r\n        // BigDouble.Round((BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 15.75) * (20 - BigDouble.Min(BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0), 31) + 16) * BigDouble.Pow(1.15, BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 16.0) * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        let step1 = (helper.calculateLogarithm(10.0, potatoes) - 15.75);\r\n        let step2 = (20 - Math.min(helper.calculateLogarithm(10.0, potatoes), 31) + 16);\r\n        let step3 = Math.pow(1.15, helper.calculateLogarithm(10.0, potatoes) - 16.0);\r\n        return step1 * step2 * step3;\r\n    },\r\n    calcCarryOverEXP: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 1;\r\n        if (numAutos > 1) {\r\n            let individualEXP = expTick / numAutos;\r\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\r\n            if (numAutos > ticksNeededEXP) {\r\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\r\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                while (leftOver > futureReq) {\r\n                    leftOver -= futureReq;\r\n                    numLevels++;\r\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                }\r\n            }\r\n            else {\r\n                leftOver = 0;\r\n            }\r\n        }\r\n        else {\r\n\r\n            leftOver = 0;\r\n        }\r\n        return { leftOver, numLevels };\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n\r\n        // console.log(`calcing future mult${plant_input.ID}`)\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let x = 0;\r\n        let numLoops = 0;\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n\r\n        while (remainingTime > 0) {\r\n\r\n            plant.timeToLevel = Math.ceil((plant.reqExp - plant.curExp) / expTick) * plant.growthTime;\r\n\r\n            if (plant.ID === 1) {\r\n                let ss = 0;\r\n            }\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel >= remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n                plant.created += toCreate;\r\n                plant.totalMade += toCreate;\r\n\r\n                plant.futureMult = Math.pow(\r\n                    (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n                    helper.calculateLogarithm(1.25, plant.created)\r\n                );\r\n\r\n                if (rankIncrease) {\r\n\r\n                    let leftOver = this.calcCarryOverEXP({ plant, expTick, numAutos });\r\n                    plant.curExp = leftOver.leftOver;\r\n                    plant.Rank += leftOver.numLevels;\r\n                    // plant.perHarvest = helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                    plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick;\r\n                    // plant.curExp += gainedEXP;\r\n                    let totalExp = plant.curExp + gainedEXP;\r\n\r\n                    if (totalExp > plant.reqExp) {\r\n                        let leftOver = this.calcCarryOverEXP({ plant, expTick, numAutos });\r\n                        plant.curExp = leftOver.leftOver;\r\n                        plant.Rank += leftOver.numLevels;\r\n                        // plant.perHarvest = helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n                        plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    }\r\n                    else {\r\n                        plant.curExp = totalExp;\r\n                    }\r\n                }\r\n\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n            plant.production = newOutPut;\r\n        }\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n        let ticksTillLevel = Math.ceil((remExp) / expBonus);\r\n\r\n        plant.timeToLevel = ticksTillLevel * plant.growthTime;\r\n\r\n\r\n\r\n        // plant.timeToLevel = (remExp / expBonus) * plant.growthTime;\r\n        return plant;\r\n    },\r\n    getNextShopCosts: function (data) {\r\n\r\n        let prodCost = 1;\r\n        let prodLevel = data.FarmingShopPlantTotalProduction ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\r\n        let growthCost = 1;\r\n        let growthLevel = data.FarmingShopPlantGrowingSpeed ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\r\n        let expCost = 1;\r\n        let expLevel = data.FarmingShopPlantRankExpEarned ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\r\n\r\n\r\n        prodCost = prodLevel > 50 ? 100000000.0 * Math.pow(100 * Math.pow(1.05, prodLevel - 50), prodLevel)\r\n            :\r\n            100000000 * Math.pow(100, prodLevel);\r\n        growthCost = 10000000000 * Math.pow(500, growthLevel);\r\n        expCost = 1000000000000000 * Math.pow(250, expLevel);\r\n        return { prodCost, growthCost, expCost };\r\n    },\r\n    calcMaxPrestige: function (plant_input) {\r\n\r\n        let start = plant_input.prestige;\r\n        let runningHarvests = 0;\r\n        let flag = true;\r\n        while (flag) {\r\n            let requiredHarvests = runningHarvests + (10 * Math.pow(2, start));\r\n            if (plant_input.created >= requiredHarvests) {\r\n                start++;\r\n                runningHarvests += requiredHarvests;\r\n            }\r\n            else {\r\n                flag = false;\r\n            }\r\n        }\r\n        return start - plant_input.prestige;\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n        let runningHarvests = 0;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers).timeToLevel;\r\n            let requiredHarvests = runningHarvests + (10 * Math.pow(2, plant.prestige));\r\n            let remainingHarvests = requiredHarvests - plant.created;\r\n            let timeTillPrestige = Math.ceil((remainingHarvests / (plant.perHarvest * numAutos))) * plant.growthTime;\r\n\r\n            if (timeTillPrestige <= 0) {\r\n                prestiged = true;\r\n\r\n                if (totalTime <= 0) {\r\n                    plant.prestige++;\r\n                    prestiged = false;\r\n                    runningHarvests += requiredHarvests;\r\n                }\r\n\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created += ((ticks) * plant.perHarvest) * numAutos;\r\n                plant.totalMade += ((ticks) * plant.perHarvest) * numAutos;\r\n                plant.Rank++;\r\n                plant.curExp = 0;\r\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n                plant.created += ((ticks) * plant.perHarvest) * numAutos;\r\n                plant.totalMade += ((ticks) * plant.perHarvest) * numAutos;\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return { remainingTime: totalTime, prestige: plant.prestige, prestiged: prestiged }\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAutos;\r\n        let simulationTime = modifiers.time; //time in seconds\r\n        let startTime = modifiers.startTime ? modifiers.startTime : 0;//used for consistent tick timings\r\n        const runningTime = modifiers.runningTime ? modifiers.runningTime : 0;//Used for calculating end timings if necessary\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n        const tickStart = modifiers.tickStart ? modifiers.tickStart : 0;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = modifiers.dataPointThreshold ? modifiers.dataPointThreshold : (simulationTime / tickRate) < dataPointsMax ? 1 : helper.roundInt((simulationTime / tickRate) / dataPointsMax);\r\n        let dataPointsPotatoes = [];\r\n        let dataPointsFries = [];\r\n\r\n        let totalPotatoes = modifiers.totalPotatoes;\r\n        let currPotatoes = modifiers.curPotatoes;\r\n        let prevPlantsProd = Array(plants.length).fill(0);\r\n        for (let i = 0; i < plants.length; i++) {\r\n            prevPlantsProd[i] = plants[i].production;\r\n        }\r\n\r\n        // let runTime = 0;\r\n        let i = 0;\r\n        let finalPass = false;\r\n        //Iterate over each second\r\n        for (; i < simulationTime / tickRate || finalPass; i++) {\r\n            //Calculate new values for each plant\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n                let toAdd = j === plants.length - 1 ? 0 :\r\n                    // plants[j + 1].production * tickRate\r\n                    tickRate > 1 ?\r\n                        //Some basic calculus to find total assuming linear growth\r\n                        0.5 * (prevPlantsProd[j + 1] + plants[j + 1].production) * tickRate : plants[j + 1].production * tickRate;\r\n                curr.totalMade += toAdd;\r\n                let res = this.calcFutureMult(curr, { ...modifiers, time: tickRate, numAuto: numAutos[j], string: false });\r\n                plants[j] = res;\r\n                prevPlantsProd[j] = plants[j].production;\r\n            }\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n\r\n\r\n\r\n            totalPotatoes += plants[0].production * tickRate;\r\n            currPotatoes += plants[0].production * tickRate;\r\n\r\n            if (modifiers.autoBuyPBC) {\r\n                let updateCosts = false;\r\n                if (currPotatoes >= modifiers.nextCosts.prodCost) {\r\n                    currPotatoes -= modifiers.nextCosts.prodCost;\r\n                    modifiers.shopProdLevel++;\r\n                    modifiers.shopProdBonus = Math.pow(1.25, modifiers.shopProdLevel);\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes >= modifiers.nextCosts.growthCost) {\r\n                    currPotatoes -= modifiers.nextCosts.growthCost;\r\n                    modifiers.shopGrowingSpeed++;\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes >= modifiers.nextCosts.expCost) {\r\n                    currPotatoes -= modifiers.nextCosts.expCost;\r\n                    modifiers.shopRankLevel++;\r\n                    modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\r\n                    updateCosts = true;\r\n                }\r\n                if (updateCosts) {\r\n\r\n                    let nextCosts = this.getNextShopCosts(modifiers);\r\n                    modifiers.nextCosts = nextCosts\r\n                }\r\n            }\r\n\r\n\r\n            if (i % dataPointThreshold === 0 && curTime >= tickStart && curTime <= (simulationTime + runningTime)) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n\r\n            if (!modifiers.skipFinal) {\r\n\r\n                if (finalPass && curTime >= (simulationTime + runningTime)) {\r\n                    break;\r\n                }\r\n                if (!finalPass && curTime < (simulationTime + runningTime)) {\r\n                    finalPass = true;\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (i > 0 && !modifiers.skipFinal) {\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n            //Handling rare case when you have to add, but only once due to intervals duration, but only at the end, and didn't fit in the for loop above\r\n            if (dataPointsPotatoes.length === 0) {\r\n                if (curTime > (simulationTime + runningTime)) {\r\n                    let bigsad = 1;\r\n                }\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n            else if (dataPointsPotatoes[dataPointsPotatoes.length - 1].production !== totalPotatoes) {\r\n                if (curTime > (simulationTime + runningTime)) {\r\n                    let bigsad = 1;\r\n\r\n\r\n\r\n                    let timeIncrease = curTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let increase = (totalPotatoes - dataPointsPotatoes[dataPointsPotatoes.length - 1].production) / timeIncrease;\r\n                    let trueTimeIncrease = (simulationTime + runningTime) - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let finalPotatoes = dataPointsPotatoes[dataPointsPotatoes.length - 1].production + increase * trueTimeIncrease;\r\n\r\n                    let newObj = { time: dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, production: finalPotatoes };\r\n                    dataPointsPotatoes.push(newObj);\r\n\r\n                    dataPointsFries.push({ \"time\": dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, \"fries\": farmingHelper.calcFryOutput(dataPointsPotatoes[dataPointsPotatoes.length - 1].production + increase * trueTimeIncrease) })\r\n\r\n                    //This means the `current` potatoes aren't updated to reflect the backwards fill/fix but it shouldn't be a big deal, and not used for anything atm\r\n                    totalPotatoes = finalPotatoes;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            totalPotatoes: totalPotatoes,\r\n            potatoeProduction: plants[0].production,\r\n            plants: plants,\r\n            nextCosts: modifiers.nextCosts,\r\n            dataPointsPotatoes: dataPointsPotatoes,\r\n            dataPointsFries: dataPointsFries,\r\n            finalModifiers: modifiers,\r\n        };\r\n    },\r\n    calcStepHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let steps = modifiers.steps;\r\n        let res = -1;\r\n        let potatoeSteps = [];\r\n        let runningTime = 0;\r\n\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = (modifiers_input.time / tickRate) < dataPointsMax ? 1 : helper.roundInt((modifiers_input.time / tickRate) / dataPointsMax);\r\n\r\n        for (let i = 0; i < steps.length; i++) {\r\n            if (potatoeSteps.length > 0 && steps[i].time > 0) {\r\n                let adas = 0;// bigsad = -1;\r\n            }\r\n            res = this.calcHPProd(plants, {\r\n                ...modifiers,\r\n                numAutos: steps[i].autos,\r\n                time: steps[i].time,\r\n                dataPointThreshold: dataPointThreshold,\r\n                startTime: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time : 0,\r\n                runningTime: runningTime,\r\n                skipFinal: i < (steps.length - 1),\r\n                tickStart: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time + dataPointThreshold * tickRate : 0,\r\n            });\r\n            modifiers = res.finalModifiers;\r\n            modifiers.totalPotatoes = res.totalPotatoes;\r\n            plants = res.plants;\r\n            potatoeSteps = potatoeSteps.concat(res.dataPointsPotatoes);\r\n            steps[i].obj = { text: `P${steps.length - i} for ${steps[i].time}`, numAutos: steps[i].autos, time: steps[i].time }\r\n\r\n            runningTime += steps[i].time;\r\n\r\n        }\r\n        if (Math.abs(modifiers.time - potatoeSteps[potatoeSteps.length - 1]) > 100) {\r\n            let asdas = 0;\r\n        }\r\n        let highestTime = potatoeSteps[1].time;\r\n        let min = potatoeSteps[1].time;\r\n        let foundBreak = false;\r\n        for (let i = 0; i < potatoeSteps.length; i++) {\r\n            if (i > 0) {\r\n                if (potatoeSteps[i].time + highestTime < potatoeSteps[i - 1].time) {\r\n                    highestTime = potatoeSteps[i - 1].time + min;\r\n                    foundBreak = true;\r\n                    throw new Error(`oof`)\r\n                }\r\n            }\r\n\r\n            // if (foundBreak) {\r\n            //     potatoeSteps[i].time += highestTime;\r\n            // }\r\n        }\r\n        res.dataPointsPotatoes = potatoeSteps;\r\n        res.steps = steps;\r\n\r\n        return res;\r\n    },\r\n    calcAssemblyHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\r\n            let level = (data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel)\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcContagionBonus: function (data, index) {\r\n        let bonus = 1;\r\n\r\n        if (data.GrasshopperCollection[index].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[index].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[index].Level);\r\n            bonus *= Math.pow(1 + base * 0.01, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcExpeditionHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data.ExpeditionsCollection[16].Locked > 0) {\r\n            let temp = data.ExpeditionsCollection[16];\r\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\r\n            bonus = res;\r\n        }\r\n        return bonus;\r\n    },\r\n    calcUniqueHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        for (let i = 0; i < data.FarmingShopUniqueHealthy.length; i++) {\r\n            bonus *= (data.FarmingShopUniqueHealthy[i] + 1);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcFriesHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let totalFries = helper.calcPOW(data.FrenchFriesTotal);\r\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\r\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\r\n        let fryBonus = shopFryBonus * contagionFryBonus;\r\n        bonus *= 1 + totalFries * fryBonus;\r\n        return bonus;\r\n    },\r\n    calcPetHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let activePets = data.EquipedPetID;\r\n        let allPets = data.PetsCollection;\r\n\r\n        let neededMap = {};\r\n        for (let i = 0; i < activePets.length; i++) {\r\n            if (activePets[i] > 0) {\r\n                neededMap[activePets[i]] = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < allPets.length; i++) {\r\n            let curr = allPets[i];\r\n            if (curr.ID in neededMap) {\r\n                let rank = curr.Rank;\r\n                let bonusInner = 0;\r\n\r\n                for (let j = 0; j < curr.BonusList.length; j++) {\r\n                    let bonusInner = curr.BonusList[j];\r\n                    if (bonusInner.ID === 23) {\r\n\r\n                        //public double GetPetBonus(int Bonus)\r\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\r\n                        //(x1                                                     + x3) * (x5) * 0.5\r\n\r\n\r\n                        // (\r\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\r\n                        //     - 1.0\r\n                        //     + Math.Max(\r\n                        //         0.0, \r\n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\r\n                        // )\r\n\r\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\r\n                        let x2 = helper.calculateLogarithm(1.0125, curr.Level + 1);\r\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\r\n                        let x4 = helper.calculateLogarithm(1.075, curr.Rank + 1);\r\n                        let x5 = 1.0 + x4 * 0.005;\r\n\r\n                        let tot1 = (x1 + x3);\r\n                        let tot2 = tot1 * x5;\r\n                        let tot3 = tot2 * 0.5;\r\n\r\n                        bonus += tot3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcHPBonus: function (data) {\r\n\r\n\r\n        // let bonus = 1;\r\n        // let assemblyHP = this.calcAssemblyHP(data);\r\n        // bonus *= assemblyHP;\r\n\r\n        // let contagionHP = this.calcContagionBonus(data, 0);\r\n        // bonus *= contagionHP;\r\n\r\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\r\n        // bonus *= soulBonus;\r\n\r\n        // let expeditionBonus = this.calcExpeditionHP(data);\r\n        // bonus *= expeditionBonus;\r\n\r\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\r\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\r\n\r\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\r\n        // bonus *= uniqueHPBonus;\r\n\r\n        // let fryHPBonus = this.calcFriesHPBonus(data);\r\n        // bonus *= fryHPBonus;\r\n\r\n        // let petHPBonus = this.calcPetHPBonus(data);\r\n        // bonus *= petHPBonus;\r\n\r\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\r\n        // bonus *= residueHPBonus;\r\n\r\n        // //(1 + \r\n        // // milk: \r\n        // let step1 = Math.max(0,\r\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\r\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\r\n        //         :\r\n        //         0\r\n        // );\r\n\r\n\r\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\r\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\r\n        //     : 1)\r\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\r\n\r\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\r\n        // //brewing:  \r\n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\r\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\r\n        // // bonus *= milkHPBonus;\r\n\r\n        let legitBonus = helper.calcPOW(data.HealthyPotatoBonus);\r\n        return legitBonus;\r\n    }\r\n}\r\n\r\nexport default farmingHelper;","import helper from './util/farmingHelper.js';\r\n\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n        let modifiers = data.modifiers;\r\n        const mode = data.mode;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        const numSimulatedAutos = data.numSimulatedAutos ? data.numSimulatedAutos : 1;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = 0;\r\n        let totalPotCombo = {};\r\n        let bestProd = 0;\r\n        let bestProdCombo = {};\r\n        let bestPIC = 0;\r\n        let bestPicCombo = { potatoeProduction: 0 };\r\n        let bestPICPerc = 0;\r\n        let bestPICPercCombo = { potatoeProduction: 0 }\r\n        let dataObj = { ...modifiers, time: secondsHour * futureTime };\r\n\r\n        let top10DataPointsPotatoes = [];\r\n        let top10DataPointsFries = [];\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n\r\n            let combo = combinations[i];\r\n            dataObj.numAutos = combo;\r\n            let result;\r\n            switch (mode) {\r\n                case 'afk':\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n                case 'step':\r\n\r\n                    let steps = [];\r\n                    let runningTime = 0;\r\n\r\n                    let curStep = 0;\r\n                    let numSteps = 0;\r\n                    let minTime = 0;\r\n\r\n                    if (combo[4] === 1 && combo[5] === 15) {\r\n                        let bigsad = -1;\r\n                    }\r\n\r\n                    for (let j = 0; j < combo.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            numSteps++;\r\n                            minTime += combo[j] * data.baseTimers[j];\r\n                        }\r\n                    }\r\n                    let remaining = (secondsHour * futureTime) - minTime;\r\n\r\n                    for (let j = 0; j < data.baseTimers.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            curStep++;\r\n                        }\r\n                        let autos = Array(data.baseTimers.length).fill(0);\r\n                        autos[j] = numSimulatedAutos;\r\n                        autos.reverse();\r\n                        let runTime = combo[j] * data.baseTimers[j];\r\n                        runningTime += runTime;\r\n\r\n                        if (curStep === numSteps && combo[j] > 0) {\r\n                            runTime += remaining;\r\n                        }\r\n\r\n                        steps.push({\r\n                            time: runTime,\r\n                            autos: autos\r\n                        })\r\n                    }\r\n\r\n                    try {\r\n\r\n                        result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: steps, numSteps: numSteps });\r\n                    }\r\n                    catch (err) {\r\n                        console.log(err);\r\n                        let bigsad = -1;\r\n                        continue;\r\n                    }\r\n                    break;\r\n                default:\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n            }\r\n\r\n\r\n            let picGained = 0;\r\n            let picPercent = 0;\r\n\r\n            for (let j = 0; j < result.plants.length; j++) {\r\n                let picIncrease = helper.calcMaxPrestige(result.plants[j]);\r\n                picGained += picIncrease;\r\n                picPercent += (Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige));\r\n                result.plants[j].picIncrease = picIncrease;\r\n            }\r\n\r\n            if (result.totalPotatoes >= totalPot) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n\r\n                top10DataPointsPotatoes.unshift({ data: result.dataPointsPotatoes, result: totalPot });\r\n                if (top10DataPointsPotatoes.length > 10) {\r\n                    top10DataPointsPotatoes.pop();\r\n                }\r\n                top10DataPointsFries.unshift({ data: result.dataPointsFries, result: totalPot });\r\n                if (top10DataPointsFries.length > 10) {\r\n                    top10DataPointsFries.pop();\r\n                }\r\n            }\r\n\r\n\r\n            if (result.potatoeProduction >= bestProd) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            if (picGained > bestPIC) {\r\n                let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                bestPIC = picGained;\r\n                bestPicCombo = temp;\r\n            }\r\n            else if (picGained === bestPIC) {\r\n                if (result.potatoeProduction > bestPicCombo.potatoeProduction) {\r\n                    let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                    bestPIC = picGained;\r\n                    bestPicCombo = temp;\r\n                }\r\n            }\r\n            if (picPercent > bestPICPerc) {\r\n                let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                bestPICPerc = picPercent;\r\n                bestPICPercCombo = temp;\r\n            }\r\n            else if (picPercent === bestPICPerc) {\r\n                if (result.potatoeProduction > bestPICPercCombo.potatoeProduction) {\r\n                    let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                    bestPICPerc = picPercent;\r\n                    bestPICPercCombo = temp;\r\n                }\r\n            }\r\n\r\n\r\n            // eslint-disable-next-line no-restricted-globals\r\n            self.postMessage({\r\n                update: true\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo,\r\n            bestPicCombo: bestPicCombo,\r\n            bestPICPercCombo: bestPICPercCombo,\r\n            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            top10DataPointsFries: top10DataPointsFries\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_defineProperty","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_toConsumableArray","isArray","iter","from","o","minLen","n","toString","slice","name","test","roundTwoDecimal","number","Math","round","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","secondsToStringWithS","seconds","numHours","numMinutes","numSeconds","string","floor","this","concat","secondsToString","bonusColorMap","color","farmingHelper","findMultipliersWithMinPercentage","sum","numbers","minPercentage","multipliers","count","backtrack","index","currentSum","currentMultipliers","max","multiplier","productSum","reduce","acc","console","calcGrowthTime","plant","modifiers","TimeNeeded","prestigeBonus","shopGrowingSpeed","petPlantCombo","contagionPlantGrowth","calcPlantHarvest","helper","Rank","prestige","contagionHarvest","calcProdOutput","plant_input","modifiers_input","TotalCreated","totalMade","ManuallyCreated","created","shovel","manualHarvestFormula","shopProdBonus","PlantTotalProductionBonus","contagionPlantProd","output","ID","hpBonus","calcFryOutput","potatoes","min","calcCarryOverEXP","_ref","numAutos","expTick","leftOver","numLevels","individualEXP","ticksNeededEXP","ceil","reqExp","curExp","futureReq","calcFutureMult","JSON","parse","stringify","remainingTime","time","numAuto","expBonus","growthTime","timeToLevel","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","futureMult","gainedEXP","totalExp","newOutPut","production","calcTimeTillLevel","remExp","ticksTillLevel","getNextShopCosts","data","prodLevel","FarmingShopPlantTotalProduction","shopProdLevel","growthLevel","FarmingShopPlantGrowingSpeed","expLevel","FarmingShopPlantRankExpEarned","shopRankLevel","prodCost","growthCost","expCost","calcMaxPrestige","start","runningHarvests","flag","requiredHarvests","calcTimeTillPrestige","prestiged","totalTime","remainingHarvests","timeTillPrestige","ticks","calcHPProd","plants_input","plants","simulationTime","startTime","runningTime","dataPointsMax","maxSteps","tickStart","tickRate","dataPointThreshold","dataPointsPotatoes","dataPointsFries","totalPotatoes","currPotatoes","curPotatoes","prevPlantsProd","fill","finalPass","j","curr","toAdd","_objectSpread","curTime","autoBuyPBC","updateCosts","nextCosts","shopRankEXP","skipFinal","timeIncrease","increase","trueTimeIncrease","finalPotatoes","newObj","potatoeProduction","finalModifiers","calcStepHPProd","steps","potatoeSteps","autos","text","abs","highestTime","Error","calcAssemblyHP","bonus","AssemblerCollection","BonusList","StartingLevel","Level","gain","Gain","level","calcContagionBonus","GrasshopperCollection","Locked","BaseBonus","calcExpeditionHP","ExpeditionsCollection","temp","BonusPower","Room","calcUniqueHPBonus","FarmingShopUniqueHealthy","calcFriesHPBonus","FrenchFriesTotal","FarmingShopFriesHealthyBonus","calcPetHPBonus","activePets","EquipedPetID","allPets","PetsCollection","neededMap","bonusInner","x1","x2","calcHPBonus","HealthyPotatoBonus","self","onmessage","_ref$data","id","data1","finalPlants","mode","futureTime","numSimulatedAutos","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","bestPIC","bestPicCombo","bestPICPerc","bestPICPercCombo","dataObj","top10DataPointsPotatoes","top10DataPointsFries","end","combo","result","curStep","numSteps","minTime","baseTimers","remaining","reverse","runTime","err","picGained","picPercent","picIncrease","unshift","pop","picGain","picStats","picLevel","postMessage","update","success"],"sourceRoot":""}