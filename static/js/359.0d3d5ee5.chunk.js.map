{"version":3,"file":"static/js/359.0d3d5ee5.chunk.js","mappings":"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","sources":["util/helper.js","util/math.js","util/farmingHelper.js","farming/farmingWorker.js"],"sourcesContent":["var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n\r\n        let numDays = 0;\r\n\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numDays = Math.floor(seconds / (3600 * 24));\r\n        numHours = Math.floor((seconds % (3600 * 24)) / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = this.roundInt((seconds % (3600 * 24)) % 60);\r\n\r\n        if (numDays == Number.POSITIVE_INFINITY || numDays == Number.NEGATIVE_INFINITY) {\r\n            return `` + numDays;\r\n        }\r\n\r\n        if (numSeconds === 60) {\r\n            numSeconds = 0;\r\n            numMinutes++;\r\n        }\r\n        if (numMinutes === 60) {\r\n            numMinutes = 0;\r\n            numHours++;\r\n        }\r\n        if (numHours === 24) {\r\n            numHours = 0;\r\n            numDays++;\r\n        }\r\n\r\n        if (numDays > 0) {\r\n            string = string + `${numDays < 10 ? `0` + numDays : numDays}d:`\r\n        }\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numDays = 0;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numDays = Math.floor(seconds / (3600 * 24));\r\n        numHours = Math.floor((seconds % (3600 * 24)) / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numMinutes === 60) {\r\n            numMinutes = 0;\r\n            numHours++;\r\n        }\r\n        if (numHours === 24) {\r\n            numHours = 0;\r\n            numDays++;\r\n        }\r\n\r\n        if (numDays == Number.POSITIVE_INFINITY || numDays == Number.NEGATIVE_INFINITY) {\r\n            return `` + numDays;\r\n        }\r\n\r\n        if (numDays > 0) {\r\n            string = string + `${numDays < 10 ? `0` + numDays : numDays}d:`;\r\n            if (numHours === 0) {\r\n                string = string + `00h`\r\n            }\r\n        }\r\n        if (numHours > 0 || (numHours === 0 && numDays === 0)) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h`;\r\n        }\r\n        if (numDays === 0) {\r\n\r\n            string = string + `:`;\r\n\r\n            if (numMinutes > 0) {\r\n                string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`;\r\n            }\r\n            else {\r\n                string = string + `0s`;\r\n            }\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        // 1001: { color: 'maroon' },\r\n        // 1002: { color: 'orange' },\r\n        // 1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1010: { color: 'maroon' },\r\n        1011: { color: 'purple' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import Decimal from 'break_infinity.js';\r\nvar helper = {\r\n    createDecimal: function (number) {\r\n        let deci = number.mantissa || number.mantissa === 0 ? new Decimal(`${number.mantissa}e${number.exponent}`) : new Decimal(number);\r\n\r\n        return deci;\r\n    },\r\n    multiplyDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.times(b);\r\n    },\r\n    divideDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.dividedBy(b);\r\n    },\r\n    addDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.plus(b);\r\n    },\r\n    subtractDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.minus(b);\r\n    },\r\n    logDecimal: function (number, base) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return this.createDecimal(number.log(base));\r\n    },\r\n    pow: function (number, exp) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return number.pow(exp);\r\n    },\r\n    min: function (number1, number2) {\r\n        number1 = number1.mantissa || number1.mantissa === 0 ? number1 : this.createDecimal(number1);\r\n        number2 = number2.mantissa || number2.mantissa === 0 ? number2 : this.createDecimal(number2);\r\n\r\n        if (number1.greaterThan(number2)) {\r\n            return number2;\r\n        }\r\n        return number1;\r\n    },\r\n    max: function (number1, number2) {\r\n        number1 = number1.mantissa || number1.mantissa === 0 ? number1 : this.createDecimal(number1);\r\n        number2 = number2.mantissa || number2.mantissa === 0 ? number2 : this.createDecimal(number2);\r\n\r\n        if (number1.greaterThan(number2)) {\r\n            return number1;\r\n        }\r\n        return number2;\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './helper.js';\r\nimport mathHelper from './math.js';\r\n\r\nvar farmingHelper = {\r\n    findMultipliersWithMinPercentage: function (sum, numbers, minPercentage) {\r\n        const multipliers = [];\r\n        let count = 0;\r\n\r\n        function backtrack(index, currentSum, currentMultipliers) {\r\n            count++;\r\n\r\n            if (index === numbers.length) {\r\n                const productSum = currentMultipliers.reduce((acc, multiplier, i) => acc + multiplier * numbers[i], 0);\r\n                if (productSum >= minPercentage * sum) {\r\n                    multipliers.push([...currentMultipliers]);\r\n                }\r\n                return;\r\n            }\r\n            let max = Math.floor((sum - currentSum) / numbers[index]);\r\n            for (let multiplier = 0; multiplier <= max; multiplier++) {\r\n                currentMultipliers[index] = multiplier;\r\n                let tempSum = currentSum + multiplier * numbers[index];\r\n                if (tempSum < sum) {\r\n                    backtrack(index + 1, currentSum + multiplier * numbers[index], currentMultipliers);\r\n                }\r\n            }\r\n        }\r\n\r\n        backtrack(0, 0, []);\r\n        console.log(count);\r\n        return multipliers;\r\n    },\r\n    calcGrowthTime: function (plant, modifiers) {\r\n        let num = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        return num < 10 ? 10 : num;\r\n    },\r\n    calcPlantHarvest: function (plant, modifiers) {\r\n        return helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.contagionHarvest * modifiers.assemblyPlantharvest;\r\n    },\r\n    calcShopProdBonus: function (modifiers_input, shopLevel) {\r\n        shopLevel = shopLevel ? shopLevel : modifiers_input.FarmingShopPlantTotalProduction;\r\n        return mathHelper.pow(1.25, shopLevel);\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        //note bigsad = -1 -> need to take into account assumbly in the future\r\n        const assemblyBonus = modifiers_input.assemblyProduction;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(shopProdBonus, assemblyBonus), modifiers_input.contagionPlantProd);\r\n\r\n        let plantMult = plant_input.futureMult;\r\n\r\n        let output = mathHelper.multiplyDecimal(\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.multiplyDecimal(\r\n                    TotalCreated, plantMult),\r\n                PlantTotalProductionBonus),\r\n            mathHelper.createDecimal(Math.pow(1.02, prestige))\r\n        );\r\n\r\n        if (plant_input.ID === 1) {\r\n            output = mathHelper.multiplyDecimal(output, modifiers_input.hpBonus);\r\n        }\r\n\r\n        return output;\r\n    },\r\n    calcFryOutput: function (potatoes) {\r\n\r\n        // BigDouble.Round((BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 15.75) * (20 - BigDouble.Min(BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0), 31) + 16) * BigDouble.Pow(1.15, BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 16.0) * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        let log10 = mathHelper.logDecimal(potatoes, 10);\r\n        let step1 = mathHelper.subtractDecimal(mathHelper.logDecimal(potatoes, 10), 15.75);\r\n        let inter1 = log10;\r\n        inter1 = inter1.lessThan(31) ? inter1 : 31;\r\n        let step2 = mathHelper.subtractDecimal(mathHelper.createDecimal(36), inter1);\r\n        let step3 = mathHelper.pow(\r\n            mathHelper.createDecimal(1.15),\r\n            mathHelper.subtractDecimal(\r\n                log10, 16.0\r\n            )\r\n        );\r\n        return mathHelper.multiplyDecimal(step1, mathHelper.multiplyDecimal(step2, step3));\r\n    },\r\n    calcCarryOverEXP_OLD: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 1;\r\n        if (numAutos > 1) {\r\n            let individualEXP = expTick / numAutos;\r\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\r\n            if (numAutos > ticksNeededEXP) {\r\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\r\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                while (leftOver > futureReq) {\r\n                    leftOver -= futureReq;\r\n                    numLevels++;\r\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                }\r\n            }\r\n            else {\r\n                leftOver = 0;\r\n            }\r\n        }\r\n        else {\r\n\r\n            leftOver = 0;\r\n        }\r\n\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    calcCarryOverEXP: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 0;\r\n        let numEXP = plant.curExp + numAutos * expTick;\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n\r\n        //need to handle two cases: 1 auto, just go up as much as you can\r\n        // >1 autos\r\n\r\n        while (numEXP >= reqExp) {\r\n            numEXP -= reqExp;\r\n            numLevels++;\r\n            reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        }\r\n\r\n        leftOver = numEXP;\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    futureMultBD: function (plant, modifiers) {\r\n        return mathHelper.pow(\r\n            (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n            mathHelper.logDecimal(plant.created, 1.25)\r\n        );\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n        //bigsad = -1 need to make costs big decimal as well now\r\n        // console.log(`calcing future mult${plant_input.ID}`)\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus * modifiers.potionRank;\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n\r\n        if (numAutos === 0) {\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n            plant.production = newOutPut;\r\n            return plant;\r\n        }\r\n\r\n        while (remainingTime > 0) {\r\n\r\n            // plant.timeToLevel = Math.ceil((plant.reqExp - plant.curExp) / expTick) * plant.growthTime - plant.elapsedTime;\r\n            plant.timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel > remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n                plant.created = mathHelper.addDecimal(plant.created, toCreate);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, toCreate);\r\n\r\n                plant.futureMult = this.futureMultBD(plant, modifiers);\r\n\r\n                if (rankIncrease) {\r\n\r\n                    let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick * numHarvests, numAutos });\r\n                    // let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick , numAutos });\r\n                    plant.curExp = leftOver.leftOver;\r\n                    plant.Rank += leftOver.numLevels;\r\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                    // plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    plant.reqExp = leftOver.reqExp;\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick * numAutos;\r\n                    let totalExp = plant.curExp + gainedEXP;\r\n                    plant.curExp = totalExp;\r\n                }\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n\r\n        }\r\n\r\n        let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n        plant.production = newOutPut;\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n        let plant = plant_input;\r\n        let modifiers = modifiers_input;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        if (numAutos === 0) return Infinity;\r\n\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * modifiers.potionRank * numAutos;\r\n        let ticksTillLevel = Math.ceil((remExp) / expBonus);\r\n\r\n        return ticksTillLevel * plant.growthTime - plant.elapsedTime;\r\n    },\r\n    getNextShopCosts: function (data) {\r\n\r\n        let prodCost = 1;\r\n        let prodLevel = data.FarmingShopPlantTotalProduction || data.FarmingShopPlantTotalProduction === 0 ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\r\n        let growthCost = 1;\r\n        let growthLevel = data.FarmingShopPlantGrowingSpeed || data.FarmingShopPlantGrowingSpeed === 0 ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\r\n        let expCost = 1;\r\n        let expLevel = data.FarmingShopPlantRankExpEarned || data.FarmingShopPlantRankExpEarned === 0 ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\r\n\r\n        let temp1 = mathHelper.pow(\r\n            1.05, prodLevel - 50\r\n        );\r\n        let temp2 = mathHelper.multiplyDecimal(100, temp1);\r\n        let temp3 = mathHelper.pow(temp2, prodLevel);\r\n        let temp4 = mathHelper.multiplyDecimal(100000000, temp3);\r\n        prodCost = prodLevel > 50 ? temp4 : mathHelper.multiplyDecimal(100000000, mathHelper.pow(100, prodLevel));\r\n\r\n\r\n        growthCost = mathHelper.multiplyDecimal(\r\n            mathHelper.pow(500, growthLevel),\r\n            10000000000\r\n        );\r\n        expCost =\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.pow(250, expLevel),\r\n                1000000000000000\r\n            );\r\n\r\n        return { prodCost, growthCost, expCost };\r\n    },\r\n    calcMaxPrestige: function (plant_input) {\r\n\r\n        let start = plant_input.prestige;\r\n        let runningHarvests = 0;\r\n        let flag = true;\r\n        while (flag) {\r\n            let requiredPerPic = 10 * Math.pow(2, start);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            if (plant_input.created.greaterThanOrEqualTo(requiredHarvests)) {\r\n                start++;\r\n                runningHarvests += requiredPerPic;\r\n            }\r\n            else {\r\n                flag = false;\r\n            }\r\n        }\r\n        return start - plant_input.prestige;\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        this.resetPlantBD(plant);\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n        let runningHarvests = 0;\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus * modifiers.potionRank;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n            let requiredPerPic = 10 * Math.pow(2, plant.prestige);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            let remainingHarvests = mathHelper.subtractDecimal(requiredHarvests, plant.created);//minimum number of ticks\r\n            let timeTillPrestige =\r\n                mathHelper.multiplyDecimal(\r\n                    mathHelper.divideDecimal(\r\n                        remainingHarvests,\r\n                        (plant.perHarvest * numAutos)\r\n                    ).ceil(),\r\n                    plant.growthTime\r\n                ).ceil().toNumber()\r\n                ;\r\n\r\n            if (numAutos === 0 && remainingHarvests.greaterThan(0)) {\r\n                prestiged = true;\r\n                totalTime = Infinity;\r\n            }\r\n            else if (timeTillPrestige <= 0) {\r\n                prestiged = true;\r\n\r\n                if (totalTime <= 0) {\r\n                    plant.prestige++;\r\n                    prestiged = false;\r\n                    runningHarvests += requiredPerPic;\r\n                }\r\n\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n\r\n                let rankRes = this.calcCarryOverEXP({ plant, numAutos, expTick: expTick * ticks })\r\n                plant.Rank += rankRes.numLevels;\r\n                plant.curExp = rankRes.leftOver;\r\n                plant.reqExp = rankRes.reqExp;\r\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return { remainingTime: totalTime, prestige: plant.prestige, prestiged: prestiged }\r\n    },\r\n    resetPlantBD: function (plant) {\r\n\r\n        plant.totalMade = plant?.totalMade?.mantissa || plant?.totalMade?.mantissa === 0 ? plant.totalMade : mathHelper.createDecimal(plant.totalMade);\r\n        plant.created = plant?.created?.mantissa || plant?.created?.mantissa === 0 ? plant.created : mathHelper.createDecimal(plant.created);\r\n        plant.production = plant?.production?.mantissa || plant?.production?.mantissa === 0 ? plant.production : mathHelper.createDecimal(plant.production);\r\n        plant.futureMult = mathHelper.createDecimal(plant.futureMult);\r\n\r\n    },\r\n    resetModifiersBD: function (modifiers) {\r\n        modifiers.shopProdBonus = modifiers?.shopProdBonus?.mantissa || modifiers?.shopProdBonus?.mantissa === 0 ? modifiers.shopProdBonus : mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = modifiers?.hpBonus?.mantissa || modifiers?.hpBonus?.mantissa === 0 ? modifiers.hpBonus : mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = modifiers?.curPotatoes?.mantissa || modifiers?.curPotatoes.mantissa === 0 ? modifiers.curPotatoes : mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = modifiers?.totalPotatoes?.mantissa || modifiers?.totalPotatoes?.mantissa === 0 ? modifiers.totalPotatoes : mathHelper.createDecimal(modifiers.totalPotatoes);\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        modifiers.nextCosts.prodCost = mathHelper.createDecimal(modifiers.nextCosts.prodCost)\r\n        modifiers.nextCosts.growthCost = mathHelper.createDecimal(modifiers.nextCosts.growthCost)\r\n        modifiers.nextCosts.expCost = mathHelper.createDecimal(modifiers.nextCosts.expCost)\r\n\r\n        let numAutos = modifiers.numAutos;\r\n        let simulationTime = modifiers.time; //time in seconds\r\n        let startTime = modifiers.startTime ? modifiers.startTime : 0;//used for consistent tick timings\r\n        const runningTime = modifiers.runningTime ? modifiers.runningTime : 0;//Used for calculating end timings if necessary\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n        const tickStart = modifiers.tickStart ? modifiers.tickStart : 0;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = modifiers.dataPointThreshold ? modifiers.dataPointThreshold : (simulationTime / tickRate) < dataPointsMax ? 1 : helper.roundInt((simulationTime / tickRate) / dataPointsMax);\r\n        let dataPointsPotatoes = [];\r\n        let dataPointsFries = [];\r\n\r\n        let totalPotatoes = modifiers.totalPotatoes;\r\n        let currPotatoes = modifiers.curPotatoes;\r\n        let prevPlantsProd = Array(plants.length).fill(0);\r\n        for (let i = 0; i < plants.length; i++) {\r\n            prevPlantsProd[i] = plants[i].production;\r\n        }\r\n\r\n        // let runTime = 0;\r\n        let i = 0;\r\n        let finalPass = false;\r\n        // tickRate = 2;\r\n        let prodMult = 1;\r\n        if (tickRate > 2) {\r\n            if (tickRate >= 2592) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 1728) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 864) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 140) {\r\n                prodMult = 0.95;\r\n            }\r\n            else {\r\n                prodMult = 0.95;\r\n            }\r\n        }\r\n        //Iterate over each second\r\n        for (; i < simulationTime / tickRate || finalPass; i++) {\r\n            //Calculate new values for each plant\r\n            let HPInitial = 0;\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n\r\n                let toAdd = j === plants.length - 1 ? 0 :\r\n                    tickRate > 1 ?\r\n                        //Some basic calculus to find total assuming linear growth\r\n                        mathHelper.multiplyDecimal(mathHelper.addDecimal(prevPlantsProd[j + 1], plants[j + 1].production), 0.5 * tickRate * prodMult)\r\n                        :\r\n                        mathHelper.multiplyDecimal(plants[j + 1].production, tickRate);\r\n                curr.totalMade = mathHelper.addDecimal(curr.totalMade, toAdd);\r\n                let res = this.calcFutureMult(curr, { ...modifiers, time: tickRate, numAuto: numAutos[j], string: false });\r\n                curr = res;\r\n                if (curr.ID === 1) {\r\n                    HPInitial = prevPlantsProd[j];\r\n                }\r\n                prevPlantsProd[j] = curr.production;\r\n\r\n            }\r\n\r\n\r\n            //Reduce plant rank potion timer, or set it the bonus to 0 if necessary\r\n            if (modifiers.potionRank > 1) {\r\n                modifiers.potionRankTime -= tickRate;\r\n                if (modifiers.potionRankTime < 0) {\r\n                    modifiers.potionRank = 1;\r\n                }\r\n            }\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n\r\n            let HPToAdd = tickRate > 1 ?\r\n                mathHelper.multiplyDecimal(mathHelper.addDecimal(HPInitial, plants[0].production), 0.5 * tickRate * prodMult)\r\n                :\r\n                plants[0].production;\r\n\r\n            totalPotatoes = mathHelper.addDecimal(totalPotatoes, HPToAdd);\r\n            currPotatoes = mathHelper.addDecimal(currPotatoes, HPToAdd);\r\n\r\n            if (modifiers.autoBuyPBC) {\r\n                let updateCosts = false;\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.prodCost) === true) {\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.prodCost);\r\n                    modifiers.shopProdLevel++;\r\n                    modifiers.shopProdBonus = this.calcShopProdBonus(modifiers, modifiers.shopProdLevel);\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.growthCost) === true) {\r\n                    // currPotatoes -= modifiers.nextCosts.growthCost;\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.growthCost);\r\n                    modifiers.shopGrowingSpeed++;\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.expCost) === true) {\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.expCost);\r\n                    modifiers.shopRankLevel++;\r\n                    modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\r\n                    updateCosts = true;\r\n                }\r\n                if (updateCosts) {\r\n                    let nextCosts = this.getNextShopCosts(modifiers);\r\n                    modifiers.nextCosts = nextCosts\r\n                }\r\n            }\r\n\r\n\r\n            if (i % dataPointThreshold === 0 && curTime >= tickStart && curTime <= (simulationTime + runningTime)) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n\r\n            if (!modifiers.skipFinal) {\r\n\r\n                if (finalPass && curTime >= (simulationTime + runningTime)) {\r\n                    break;\r\n                }\r\n                if (!finalPass && curTime < (simulationTime + runningTime)) {\r\n                    finalPass = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (i > 0 && !modifiers.skipFinal) {\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n            //Handling rare case when you have to add, but only once due to intervals duration, but only at the end, and didn't fit in the for loop above\r\n            if (dataPointsPotatoes.length === 0) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n            else if (dataPointsPotatoes[dataPointsPotatoes.length - 1].production !== totalPotatoes) {\r\n                if (curTime > (simulationTime + runningTime)) {\r\n\r\n                    let timeIncrease = curTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let increase = mathHelper.divideDecimal(\r\n                        (mathHelper.subtractDecimal(\r\n                            totalPotatoes,\r\n                            dataPointsPotatoes[dataPointsPotatoes.length - 1].production\r\n                        )\r\n                        ),\r\n                        timeIncrease\r\n                    );\r\n\r\n\r\n                    // let temp_increase =  mathHelper.multiplyDecimal(mathHelper.addDecimal(HPInitial, plants[0].production), 0.5 * tickRate * prodMult);\r\n\r\n\r\n\r\n                    let trueTimeIncrease = (simulationTime + runningTime) - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let finalPotatoes = mathHelper.addDecimal(\r\n                        dataPointsPotatoes[dataPointsPotatoes.length - 1].production,\r\n                        mathHelper.multiplyDecimal(increase, trueTimeIncrease)\r\n                    );\r\n\r\n                    let newObj = { time: dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, production: finalPotatoes };\r\n                    dataPointsPotatoes.push(newObj);\r\n\r\n                    dataPointsFries.push({ \"time\": dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, \"fries\": farmingHelper.calcFryOutput(finalPotatoes) })\r\n\r\n                    //This means the `current` potatoes aren't updated to reflect the backwards fill/fix but it shouldn't be a big deal, and not used for anything atm\r\n                    totalPotatoes = finalPotatoes;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            totalPotatoes: totalPotatoes,\r\n            potatoeProduction: plants[0].production,\r\n            plants: plants,\r\n            nextCosts: modifiers.nextCosts,\r\n            dataPointsPotatoes: dataPointsPotatoes,\r\n            dataPointsFries: dataPointsFries,\r\n            finalModifiers: modifiers,\r\n        };\r\n    },\r\n    calcStepHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let steps = modifiers.steps;\r\n        let res = -1;\r\n        let potatoeSteps = [];\r\n        let runningTime = 0;\r\n\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = (modifiers_input.time / tickRate) < dataPointsMax ? 1 : helper.roundInt((modifiers_input.time / tickRate) / dataPointsMax);\r\n\r\n        for (let i = 0; i < steps.length; i++) {\r\n            if (steps[i].time === 0) continue;\r\n            res = this.calcHPProd(plants, {\r\n                ...modifiers,\r\n                numAutos: steps[i].autos,\r\n                time: steps[i].time,\r\n                dataPointThreshold: dataPointThreshold,\r\n                startTime: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time : 0,\r\n                runningTime: runningTime,\r\n                skipFinal: i < (steps.length - 1),\r\n                tickStart: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time + dataPointThreshold * tickRate : 0,\r\n            });\r\n            modifiers = res.finalModifiers;\r\n            modifiers.totalPotatoes = res.totalPotatoes;\r\n            plants = res.plants;\r\n            potatoeSteps = potatoeSteps.concat(res.dataPointsPotatoes);\r\n            steps[i].obj = { text: `P${steps.length - i} for ${steps[i].time}`, numAutos: steps[i].autos, time: steps[i].time }\r\n\r\n            runningTime += steps[i].time;\r\n\r\n        }\r\n        res.dataPointsPotatoes = potatoeSteps;\r\n        res.steps = steps;\r\n\r\n        return res;\r\n    },\r\n    calcAssemblyHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\r\n            let level = (data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel)\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcAssembly: function (data, line_num, bonus_num) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[line_num].BonusList[bonus_num].StartingLevel <= data?.AssemblerCollection[line_num].Level) {\r\n            let gain = data?.AssemblerCollection[line_num].BonusList[bonus_num].Gain;\r\n            let level = Math.max(0, data.AssemblerCollection[line_num].Level - (data.AssemblerCollection[line_num].BonusList[bonus_num].StartingLevel - 1));\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcContagionBonus: function (data, index) {\r\n        let bonus = 1;\r\n\r\n        if (data.GrasshopperCollection[index].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[index].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[index].Level);\r\n            bonus *= Math.pow(1 + base * 0.01, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcExpeditionHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data.ExpeditionsCollection[16].Locked > 0) {\r\n            let temp = data.ExpeditionsCollection[16];\r\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\r\n            bonus = res;\r\n        }\r\n        return bonus;\r\n    },\r\n    calcUniqueHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        for (let i = 0; i < data.FarmingShopUniqueHealthy.length; i++) {\r\n            bonus *= (data.FarmingShopUniqueHealthy[i] + 1);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcFriesHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let totalFries = helper.calcPOW(data.FrenchFriesTotal);\r\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\r\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\r\n        let fryBonus = shopFryBonus * contagionFryBonus;\r\n        bonus *= 1 + totalFries * fryBonus;\r\n        return bonus;\r\n    },\r\n    calcPetHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let activePets = data.EquipedPetID;\r\n        let allPets = data.PetsCollection;\r\n\r\n        let neededMap = {};\r\n        for (let i = 0; i < activePets.length; i++) {\r\n            if (activePets[i] > 0) {\r\n                neededMap[activePets[i]] = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < allPets.length; i++) {\r\n            let curr = allPets[i];\r\n            if (curr.ID in neededMap) {\r\n                let rank = curr.Rank;\r\n                let bonusInner = 0;\r\n\r\n                for (let j = 0; j < curr.BonusList.length; j++) {\r\n                    let bonusInner = curr.BonusList[j];\r\n                    if (bonusInner.ID === 23) {\r\n\r\n                        //public double GetPetBonus(int Bonus)\r\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\r\n                        //(x1                                                     + x3) * (x5) * 0.5\r\n\r\n\r\n                        // (\r\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\r\n                        //     - 1.0\r\n                        //     + Math.Max(\r\n                        //         0.0, \r\n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\r\n                        // )\r\n\r\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\r\n                        let x2 = helper.calculateLogarithm(1.0125, curr.Level + 1);\r\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\r\n                        let x4 = helper.calculateLogarithm(1.075, curr.Rank + 1);\r\n                        let x5 = 1.0 + x4 * 0.005;\r\n\r\n                        let tot1 = (x1 + x3);\r\n                        let tot2 = tot1 * x5;\r\n                        let tot3 = tot2 * 0.5;\r\n\r\n                        bonus += tot3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcHPBonus: function (data) {\r\n\r\n\r\n        // let bonus = 1;\r\n        // let assemblyHP = this.calcAssemblyHP(data);\r\n        // bonus *= assemblyHP;\r\n\r\n        // let contagionHP = this.calcContagionBonus(data, 0);\r\n        // bonus *= contagionHP;\r\n\r\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\r\n        // bonus *= soulBonus;\r\n\r\n        // let expeditionBonus = this.calcExpeditionHP(data);\r\n        // bonus *= expeditionBonus;\r\n\r\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\r\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\r\n\r\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\r\n        // bonus *= uniqueHPBonus;\r\n\r\n        // let fryHPBonus = this.calcFriesHPBonus(data);\r\n        // bonus *= fryHPBonus;\r\n\r\n        // let petHPBonus = this.calcPetHPBonus(data);\r\n        // bonus *= petHPBonus;\r\n\r\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\r\n        // bonus *= residueHPBonus;\r\n\r\n        // //(1 + \r\n        // // milk: \r\n        // let step1 = Math.max(0,\r\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\r\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\r\n        //         :\r\n        //         0\r\n        // );\r\n\r\n\r\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\r\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\r\n        //     : 1)\r\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\r\n\r\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\r\n        // //brewing:  \r\n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\r\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\r\n        // // bonus *= milkHPBonus;\r\n\r\n        let legitBonus = helper.calcPOW(data.HealthyPotatoBonus);\r\n        return legitBonus;\r\n    }\r\n}\r\n\r\nexport default farmingHelper;","import helper from '../util/farmingHelper.js';\r\nimport mathHelper from '../util/math.js';\r\nimport generalHelper from '../util/helper.js';\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n\r\n        //for some reason the break-infinity values get changed into {mantissa: x, exponent: y} objects, revert\r\n\r\n        for (let i = 0; i < finalPlants.length; i++) {\r\n            let cur = finalPlants[i];\r\n            cur.created = mathHelper.createDecimal(cur.created);\r\n            cur.totalMade = mathHelper.createDecimal(cur.totalMade);\r\n            cur.production = mathHelper.createDecimal(cur.production);\r\n        }\r\n\r\n        let modifiers = data.modifiers;\r\n        //Same thing for modifiers\r\n        modifiers.shopProdBonus = mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = mathHelper.createDecimal(modifiers.totalPotatoes);\r\n\r\n        const mode = data.mode;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        const numSimulatedAutos = data.numSimulatedAutos ? data.numSimulatedAutos : 1;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = mathHelper.createDecimal(0);\r\n        let totalPotCombo = {};\r\n        let bestProd = mathHelper.createDecimal(0);\r\n        let bestProdCombo = {};\r\n        let bestPIC = 0;\r\n        let bestPicCombo = { potatoeProduction: 0 };\r\n        let bestPICPerc = 0;\r\n        let bestPICPercCombo = { potatoeProduction: 0 }\r\n        let dataObj = { ...modifiers, time: secondsHour * futureTime };\r\n\r\n        let top10DataPointsPotatoes = [];\r\n        let top10DataPointsFries = [];\r\n\r\n        let counter = 0;\r\n        let counterMax = data.end - data.start;\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n            counterMax--;\r\n            counter++;\r\n            let combo = combinations[i];\r\n            dataObj.numAutos = combo;\r\n            let result;\r\n\r\n            switch (mode) {\r\n                case 'afk':\r\n\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n                case 'carlo':\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: combo });\r\n                    break;\r\n                case 'step':\r\n                    if (combo[0] === 0 && combo[1] === 0 && combo[2] === 0 && combo[3] === 0 && combo[4] === 0) {\r\n                        let bigsad = -1;\r\n                    }\r\n                    let steps = [];\r\n\r\n                    let curStep = 0;\r\n                    let numSteps = 0;\r\n                    let minTime = 0;\r\n\r\n                    for (let j = 0; j < combo.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            numSteps++;\r\n                            minTime += combo[j] * data.baseTimers[j];\r\n                        }\r\n                    }\r\n                    let remaining = (secondsHour * futureTime) - minTime;\r\n\r\n                    for (let j = 0; j < data.baseTimers.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            curStep++;\r\n                        }\r\n                        let autos = Array(data.baseTimers.length).fill(0);\r\n                        autos[j] = numSimulatedAutos;\r\n                        autos.reverse();\r\n                        let runTime = combo[j] * data.baseTimers[j];\r\n\r\n                        //If its the last plant that will be grown, give the remaining time to it\r\n                        if (curStep === numSteps && combo[j] > 0) {\r\n                            runTime += remaining;\r\n                        }\r\n                        //otherwise, round off time from other plants\r\n                        else if (combo[j] > 0) {\r\n                            let curPlant = finalPlants[finalPlants.length - 1 - j];\r\n                            let remainder = runTime % curPlant.growthTime;\r\n                            //Round down, add run time\r\n                            if (remainder <= curPlant.growthTime * 0.5) {\r\n                                runTime -= remainder;\r\n                                remaining += remainder;\r\n                            }\r\n                            //Round up, reduce run time\r\n                            else {\r\n                                let diff = curPlant.growthTime - remainder;\r\n                                //Only subtract time from final plant IF there is enough remaining time\r\n                                if (remaining >= diff) {\r\n                                    runTime += diff;\r\n                                    remaining -= diff\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        steps.push({\r\n                            time: generalHelper.roundInt(runTime),\r\n                            autos: autos\r\n                        })\r\n                    }\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: steps });\r\n                    break;\r\n                default:\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n            }\r\n\r\n            let picGained = 0;\r\n            let picPercent = 0;\r\n            let temp;\r\n\r\n            for (let j = 0; j < result.plants.length; j++) {\r\n                let picIncrease = helper.calcMaxPrestige(result.plants[j]);\r\n                picGained += picIncrease;\r\n                picPercent += (Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige));\r\n                result.plants[j].picIncrease = picIncrease;\r\n            }\r\n\r\n            if (result.totalPotatoes.greaterThanOrEqualTo(totalPot) === true) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n\r\n                top10DataPointsPotatoes.unshift({ data: result.dataPointsPotatoes, result: totalPot });\r\n                if (top10DataPointsPotatoes.length > 10) {\r\n                    top10DataPointsPotatoes.pop();\r\n                }\r\n                top10DataPointsFries.unshift({ data: result.dataPointsFries, result: totalPot });\r\n                if (top10DataPointsFries.length > 10) {\r\n                    top10DataPointsFries.pop();\r\n                }\r\n            }\r\n\r\n\r\n            if (result.potatoeProduction.greaterThanOrEqualTo(bestProd) === true) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            if (picGained > bestPIC) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                bestPIC = picGained;\r\n                bestPicCombo = temp;\r\n            }\r\n            else if (picGained === bestPIC) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPicCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                    bestPIC = picGained;\r\n                    bestPicCombo = temp;\r\n                }\r\n            }\r\n            if (picPercent > bestPICPerc) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                bestPICPerc = picPercent;\r\n                bestPICPercCombo = temp;\r\n            }\r\n            else if (picPercent === bestPICPerc) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPICPercCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                    bestPICPerc = picPercent;\r\n                    bestPICPercCombo = temp;\r\n                }\r\n            }\r\n\r\n            if (counter % 100 === 0) {\r\n                // eslint-disable-next-line no-restricted-globals\r\n                self.postMessage({\r\n                    update: true,\r\n                    temp: temp,\r\n                    updateAmount: 100\r\n                })\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            update: true,\r\n            updateAmount: counterMax\r\n        })\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo,\r\n            bestPicCombo: bestPicCombo,\r\n            bestPICPercCombo: bestPICPercCombo,\r\n            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            top10DataPointsFries: top10DataPointsFries\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"names":["roundTwoDecimal","number","Math","round","Number","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","secondsToStringWithS","seconds","string","numDays","numHours","numMinutes","numSeconds","floor","this","POSITIVE_INFINITY","NEGATIVE_INFINITY","concat","secondsToString","bonusColorMap","color","createDecimal","Decimal","multiplyDecimal","a","b","times","divideDecimal","dividedBy","addDecimal","plus","subtractDecimal","minus","logDecimal","exp","min","number1","number2","greaterThan","max","farmingHelper","findMultipliersWithMinPercentage","sum","numbers","minPercentage","multipliers","count","backtrack","index","currentSum","currentMultipliers","length","multiplier","productSum","reduce","acc","i","push","_toConsumableArray","console","calcGrowthTime","plant","modifiers","TimeNeeded","prestigeBonus","shopGrowingSpeed","petPlantCombo","contagionPlantGrowth","calcPlantHarvest","helper","Rank","prestige","contagionHarvest","assemblyPlantharvest","calcShopProdBonus","modifiers_input","shopLevel","FarmingShopPlantTotalProduction","mathHelper","calcProdOutput","plant_input","TotalCreated","totalMade","shopProdBonus","created","manualHarvestFormula","assemblyBonus","assemblyProduction","PlantTotalProductionBonus","contagionPlantProd","plantMult","futureMult","output","ID","hpBonus","calcFryOutput","potatoes","log10","step1","inter1","lessThan","step2","step3","calcCarryOverEXP_OLD","_ref","numAutos","expTick","leftOver","numLevels","individualEXP","ticksNeededEXP","ceil","reqExp","curExp","futureReq","calcCarryOverEXP","_ref2","numEXP","futureMultBD","calcFutureMult","JSON","parse","stringify","remainingTime","time","numAuto","expBonus","potionRank","growthTime","newOutPut","production","timeToLevel","calcTimeTillLevel","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","gainedEXP","totalExp","Infinity","remExp","getNextShopCosts","data","prodLevel","shopProdLevel","growthLevel","FarmingShopPlantGrowingSpeed","expLevel","FarmingShopPlantRankExpEarned","shopRankLevel","temp1","temp2","temp3","temp4","prodCost","growthCost","expCost","calcMaxPrestige","start","runningHarvests","flag","requiredPerPic","requiredHarvests","greaterThanOrEqualTo","calcTimeTillPrestige","resetPlantBD","resetModifiersBD","prestiged","totalTime","remainingHarvests","timeTillPrestige","toNumber","ticks","rankRes","_plant$totalMade","_plant$totalMade2","_plant$created","_plant$created2","_plant$production","_plant$production2","_modifiers$shopProdBo","_modifiers$shopProdBo2","_modifiers$hpBonus","_modifiers$hpBonus2","_modifiers$curPotatoe","_modifiers$totalPotat","_modifiers$totalPotat2","curPotatoes","totalPotatoes","calcHPProd","plants_input","plants","nextCosts","simulationTime","startTime","runningTime","dataPointsMax","maxSteps","tickStart","tickRate","dataPointThreshold","dataPointsPotatoes","dataPointsFries","currPotatoes","prevPlantsProd","Array","fill","finalPass","prodMult","HPInitial","j","curr","toAdd","_objectSpread","potionRankTime","curTime","HPToAdd","autoBuyPBC","updateCosts","shopRankEXP","skipFinal","timeIncrease","increase","trueTimeIncrease","finalPotatoes","newObj","potatoeProduction","finalModifiers","calcStepHPProd","steps","res","potatoeSteps","autos","obj","text","calcAssemblyHP","bonus","AssemblerCollection","BonusList","StartingLevel","Level","gain","Gain","level","calcAssembly","line_num","bonus_num","calcContagionBonus","GrasshopperCollection","Locked","BaseBonus","calcExpeditionHP","ExpeditionsCollection","temp","BonusPower","Room","calcUniqueHPBonus","FarmingShopUniqueHealthy","calcFriesHPBonus","FrenchFriesTotal","FarmingShopFriesHealthyBonus","calcPetHPBonus","activePets","EquipedPetID","allPets","PetsCollection","neededMap","bonusInner","x1","x2","calcHPBonus","HealthyPotatoBonus","self","onmessage","_ref$data","id","data1","finalPlants","cur","mode","futureTime","numSimulatedAutos","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","bestPIC","bestPicCombo","bestPICPerc","bestPICPercCombo","dataObj","top10DataPointsPotatoes","top10DataPointsFries","counter","counterMax","end","combo","result","curStep","numSteps","minTime","baseTimers","remaining","reverse","runTime","curPlant","remainder","diff","generalHelper","picGained","picPercent","picIncrease","unshift","pop","picGain","picStats","picLevel","postMessage","update","updateAmount","success","err"],"sourceRoot":""}