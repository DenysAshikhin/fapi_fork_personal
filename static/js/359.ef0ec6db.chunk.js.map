{"version":3,"file":"static/js/359.ef0ec6db.chunk.js","mappings":"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","sources":["util/helper.js","util/math.js","util/farmingHelper.js","farming/farmingWorker.js"],"sourcesContent":["var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n\r\n        let numDays = 0;\r\n\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numDays = Math.floor(seconds / (3600 * 24));\r\n        numHours = Math.floor((seconds % (3600 * 24)) / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = this.roundInt((seconds % (3600 * 24)) % 60);\r\n\r\n        if (numDays == Number.POSITIVE_INFINITY || numDays == Number.NEGATIVE_INFINITY) {\r\n            return `` + numDays;\r\n        }\r\n\r\n        if (numSeconds === 60) {\r\n            numSeconds = 0;\r\n            numMinutes++;\r\n        }\r\n        if (numMinutes === 60) {\r\n            numMinutes = 0;\r\n            numHours++;\r\n        }\r\n        if (numHours === 24) {\r\n            numHours = 0;\r\n            numDays++;\r\n        }\r\n\r\n        if (numDays > 0) {\r\n            string = string + `${numDays < 10 ? `0` + numDays : numDays}d:`\r\n        }\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numDays = 0;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numDays = Math.floor(seconds / (3600 * 24));\r\n        numHours = Math.floor((seconds % (3600 * 24)) / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numMinutes === 60) {\r\n            numMinutes = 0;\r\n            numHours++;\r\n        }\r\n        if (numHours === 24) {\r\n            numHours = 0;\r\n            numDays++;\r\n        }\r\n\r\n        if (numDays == Number.POSITIVE_INFINITY || numDays == Number.NEGATIVE_INFINITY) {\r\n            return `` + numDays;\r\n        }\r\n\r\n        if (numDays > 0) {\r\n            string = string + `${numDays < 10 ? `0` + numDays : numDays}d:`;\r\n            if (numHours === 0) {\r\n                string = string + `00h`\r\n            }\r\n        }\r\n        if (numHours > 0 || (numHours === 0 && numDays === 0)) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h`;\r\n        }\r\n        if (numDays === 0) {\r\n\r\n            string = string + `:`;\r\n\r\n            if (numMinutes > 0) {\r\n                string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`;\r\n            }\r\n            else {\r\n                string = string + `0s`;\r\n            }\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        // 1001: { color: 'maroon' },\r\n        // 1002: { color: 'orange' },\r\n        // 1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1010: { color: 'maroon' },\r\n        1011: { color: 'purple' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import Decimal from 'break_infinity.js';\r\nvar helper = {\r\n    createDecimal: function (number) {\r\n        let deci = number.mantissa || number.mantissa === 0 ? new Decimal(`${number.mantissa}e${number.exponent}`) : new Decimal(number);\r\n\r\n        return deci;\r\n    },\r\n    multiplyDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.times(b);\r\n    },\r\n    divideDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.dividedBy(b);\r\n    },\r\n    addDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.plus(b);\r\n    },\r\n    subtractDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.minus(b);\r\n    },\r\n    logDecimal: function (number, base) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return this.createDecimal(number.log(base));\r\n    },\r\n    pow: function (number, exp) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return number.pow(exp);\r\n    },\r\n    min: function (number1, number2) {\r\n        number1 = number1.mantissa || number1.mantissa === 0 ? number1 : this.createDecimal(number1);\r\n        number2 = number2.mantissa || number2.mantissa === 0 ? number2 : this.createDecimal(number2);\r\n\r\n        if (number1.greaterThan(number2)) {\r\n            return number2;\r\n        }\r\n        return number1;\r\n    },\r\n    max: function (number1, number2) {\r\n        number1 = number1.mantissa || number1.mantissa === 0 ? number1 : this.createDecimal(number1);\r\n        number2 = number2.mantissa || number2.mantissa === 0 ? number2 : this.createDecimal(number2);\r\n\r\n        if (number1.greaterThan(number2)) {\r\n            return number1;\r\n        }\r\n        return number2;\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './helper.js';\r\nimport mathHelper from './math.js';\r\n\r\nvar farmingHelper = {\r\n    findMultipliersWithMinPercentage: function (sum, numbers, minPercentage) {\r\n        const multipliers = [];\r\n        let count = 0;\r\n\r\n        function backtrack(index, currentSum, currentMultipliers) {\r\n            count++;\r\n\r\n            if (index === numbers.length) {\r\n                const productSum = currentMultipliers.reduce((acc, multiplier, i) => acc + multiplier * numbers[i], 0);\r\n                if (productSum >= minPercentage * sum) {\r\n                    multipliers.push([...currentMultipliers]);\r\n                }\r\n                return;\r\n            }\r\n            let max = Math.floor((sum - currentSum) / numbers[index]);\r\n            for (let multiplier = 0; multiplier <= max; multiplier++) {\r\n                currentMultipliers[index] = multiplier;\r\n                let tempSum = currentSum + multiplier * numbers[index];\r\n                if (tempSum < sum) {\r\n                    backtrack(index + 1, currentSum + multiplier * numbers[index], currentMultipliers);\r\n                }\r\n            }\r\n        }\r\n\r\n        backtrack(0, 0, []);\r\n        console.log(count);\r\n        return multipliers;\r\n    },\r\n    calcGrowthTime: function (plant, modifiers) {\r\n        let growingBonus = mathHelper.createDecimal(modifiers.originalShopGrowingBonus);\r\n        growingBonus = mathHelper.divideDecimal(growingBonus, (1 + 0.05 * modifiers.originalShopGrowingLevel));\r\n        growingBonus = mathHelper.multiplyDecimal(growingBonus, (1 + 0.05 * modifiers.shopGrowingSpeed)).toNumber();\r\n\r\n        let num = Math.floor(plant.TimeNeeded / plant.prestigeBonus / growingBonus);\r\n        return num < 10 ? 10 : num;\r\n    },\r\n    calcPlantHarvest: function (plant, modifiers) {\r\n        let num = helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.manualHarvestBonus;\r\n        return num;\r\n    },\r\n    calcShopProdBonus: function (modifiers_input, shopLevel) {\r\n        shopLevel = shopLevel || shopLevel === 0 ? shopLevel : modifiers_input.FarmingShopPlantTotalProduction;\r\n        return mathHelper.pow(1.25, shopLevel);\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        // let ManuallyCreated = plant_input.created;\r\n        // let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        //note bigsad = -1 -> need to take into account assumbly in the future\r\n        // const assemblyBonus = modifiers_input.assemblyProduction;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        // let PlantTotalProductionBonus = mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(shopProdBonus, assemblyBonus), modifiers_input.contagionPlantProd);\r\n        let PlantTotalProductionBonus = mathHelper.createDecimal(modifiers_input.originalShopProdBonus);\r\n        PlantTotalProductionBonus = mathHelper.divideDecimal(PlantTotalProductionBonus, this.calcShopProdBonus(null, modifiers_input.originalShopProdLevel));\r\n        PlantTotalProductionBonus = mathHelper.multiplyDecimal(shopProdBonus, PlantTotalProductionBonus);\r\n\r\n\r\n        let plantMult = plant_input.futureMult;\r\n\r\n        let output = mathHelper.multiplyDecimal(\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.multiplyDecimal(\r\n                    TotalCreated, plantMult),\r\n                PlantTotalProductionBonus),\r\n            mathHelper.createDecimal(Math.pow(1.02, prestige))\r\n        );\r\n\r\n        if (plant_input.ID === 1) {\r\n            output = mathHelper.multiplyDecimal(output, modifiers_input.hpBonus);\r\n        }\r\n\r\n        return output;\r\n    },\r\n    calcFryOutput: function (potatoes, modifiers) {\r\n\r\n\r\n        if (potatoes.lessThan(10000000000000000)) return 0;\r\n\r\n\r\n        let timerBonus = 0;\r\n        let timePassed = modifiers.timePassed ? modifiers.timePassed : 0;\r\n        if (timePassed > 1800) {\r\n            if (timePassed < 86400) {\r\n                timerBonus = timePassed / 86400;\r\n            }\r\n            else {\r\n                // 1.0 + (timePassed - 86400.0) / (172800.0 + (timePassed - 86400.0) * 0.5);\r\n                //1 + (step1) / (172800 + (step2) * 0.5)\r\n                let step1 = timePassed - 86400;\r\n                let step2 = timePassed - 86400;\r\n                let step3 = (172800 + step2 * 0.5);\r\n                let step4 = step1 / step3;\r\n                timerBonus = 1 + step4;\r\n            }\r\n        }\r\n\r\n        // BigDouble.Round(\r\n        // (Log10(HealthyPotatoTotal) - 15.75)\r\n        //  * (36 - Min(Log10(HealthyPotatoTotal), 31))\r\n        //  * Pow(1.15, Log10(HealthyPotatoTotal) - 16.0)\r\n        //  * FrenchFriesBonus \r\n        //  * TimerFriesPrestigeBonuses);\r\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        let log10 = mathHelper.logDecimal(potatoes, 10);\r\n        let step1 = mathHelper.subtractDecimal(log10, 15.75);\r\n\r\n        let log2 = log10;\r\n        log2 = log2.lessThan(31) ? log2 : 31;\r\n        let step2 = mathHelper.subtractDecimal(36, log2);\r\n\r\n        let log3 = mathHelper.subtractDecimal(log10, 16);\r\n        let step3 = mathHelper.pow(1.15, log3);\r\n\r\n        let inter1 = mathHelper.multiplyDecimal(step1, step2);\r\n        let inter2 = mathHelper.multiplyDecimal(inter1, step3);\r\n        let frenchBonus = mathHelper.createDecimal(modifiers.fryBonus);\r\n        let step4 = mathHelper.multiplyDecimal(inter2, frenchBonus);\r\n        let step5 = mathHelper.multiplyDecimal(step4, timerBonus);\r\n        return step4;\r\n\r\n    },\r\n    calcCarryOverEXP_OLD: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 1;\r\n        if (numAutos > 1) {\r\n            let individualEXP = expTick / numAutos;\r\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\r\n            if (numAutos > ticksNeededEXP) {\r\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\r\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                while (leftOver > futureReq) {\r\n                    leftOver -= futureReq;\r\n                    numLevels++;\r\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                }\r\n            }\r\n            else {\r\n                leftOver = 0;\r\n            }\r\n        }\r\n        else {\r\n\r\n            leftOver = 0;\r\n        }\r\n\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    calcCarryOverEXP: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 0;\r\n        let numEXP = plant.curExp + numAutos * expTick;\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n\r\n        //need to handle two cases: 1 auto, just go up as much as you can\r\n        // >1 autos\r\n\r\n        while (numEXP >= reqExp) {\r\n            numEXP -= reqExp;\r\n            numLevels++;\r\n            reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        }\r\n\r\n        leftOver = numEXP;\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    calcEXPBonus: function (modifiers) {\r\n        let originalBonus = modifiers.originalRankLevelBonus;\r\n        let originalLevel = modifiers.originalShopRankLevel;\r\n        let currentShopLevel = modifiers.shopRankLevel;\r\n        let originalPotion = modifiers.originalPotionRank;\r\n        let currentPotion = modifiers.potionRank;\r\n        let expBonus = mathHelper.createDecimal(originalBonus);\r\n        expBonus = mathHelper.divideDecimal(expBonus, 1 + originalLevel * 0.1);\r\n        expBonus = mathHelper.divideDecimal(expBonus, originalPotion > 0 ? 1.5 : 1);\r\n\r\n        expBonus = mathHelper.multiplyDecimal(expBonus, 1 + currentShopLevel * 0.1);\r\n        expBonus = mathHelper.multiplyDecimal(expBonus, currentPotion);\r\n        expBonus = expBonus.toNumber();\r\n\r\n        return expBonus;\r\n    },\r\n    futureMultBD: function (plant, modifiers) {\r\n        return mathHelper.pow(\r\n            (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n            mathHelper.logDecimal(plant.created, 1.25)\r\n        );\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n        //bigsad = -1 need to make costs big decimal as well now\r\n        // console.log(`calcing future mult${plant_input.ID}`)\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let newExpBonus = this.calcEXPBonus(modifiers);\r\n        let expTick = plant.prestigeBonus * newExpBonus;\r\n\r\n        plant.growthTime = this.calcGrowthTime(plant, modifiers);\r\n\r\n        if (numAutos === 0) {\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n            plant.production = newOutPut;\r\n            return plant;\r\n        }\r\n\r\n        while (remainingTime > 0) {\r\n\r\n            plant.timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel > remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, toCreate);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, toCreate);\r\n\r\n                plant.futureMult = this.futureMultBD(plant, modifiers);\r\n\r\n                if (rankIncrease) {\r\n\r\n                    let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick * numHarvests, numAutos });\r\n                    // let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick , numAutos });\r\n                    plant.curExp = leftOver.leftOver;\r\n                    plant.Rank += leftOver.numLevels;\r\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                    // plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    plant.reqExp = leftOver.reqExp;\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick * numAutos;\r\n                    let totalExp = plant.curExp + gainedEXP;\r\n                    plant.curExp = totalExp;\r\n                }\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n\r\n        let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n        plant.production = newOutPut;\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n        let plant = plant_input;\r\n        let modifiers = modifiers_input;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        if (numAutos === 0) return Infinity;\r\n\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let newExpBonus = this.calcEXPBonus(modifiers);\r\n        let expBonus = plant.prestigeBonus * newExpBonus * numAutos;\r\n\r\n        let ticksTillLevel = Math.ceil((remExp) / expBonus);\r\n        return ticksTillLevel * plant.growthTime - plant.elapsedTime;\r\n    },\r\n    getNextShopCosts: function (data) {\r\n\r\n        let prodCost = 1;\r\n        let prodLevel = data.FarmingShopPlantTotalProduction || data.FarmingShopPlantTotalProduction === 0 ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\r\n        let growthCost = 1;\r\n        let growthLevel = data.FarmingShopPlantGrowingSpeed || data.FarmingShopPlantGrowingSpeed === 0 ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\r\n        let expCost = 1;\r\n        let expLevel = data.FarmingShopPlantRankExpEarned || data.FarmingShopPlantRankExpEarned === 0 ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\r\n\r\n        let temp1 = mathHelper.pow(\r\n            1.05, prodLevel - 50\r\n        );\r\n        let temp2 = mathHelper.multiplyDecimal(100, temp1);\r\n        let temp3 = mathHelper.pow(temp2, prodLevel);\r\n        let temp4 = mathHelper.multiplyDecimal(100000000, temp3);\r\n        prodCost = prodLevel > 50 ? temp4 : mathHelper.multiplyDecimal(100000000, mathHelper.pow(100, prodLevel));\r\n\r\n\r\n        growthCost = mathHelper.multiplyDecimal(\r\n            mathHelper.pow(500, growthLevel),\r\n            10000000000\r\n        );\r\n        expCost =\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.pow(250, expLevel),\r\n                1000000000000000\r\n            );\r\n\r\n        return { prodCost, growthCost, expCost };\r\n    },\r\n    calcMaxPrestige: function (plant_input) {\r\n\r\n        let start = plant_input.prestige;\r\n        let runningHarvests = 0;\r\n        let flag = true;\r\n        while (flag) {\r\n            let requiredPerPic = 10 * Math.pow(2, start);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            if (plant_input.created.greaterThanOrEqualTo(requiredHarvests)) {\r\n                start++;\r\n                runningHarvests += requiredPerPic;\r\n            }\r\n            else {\r\n                flag = false;\r\n            }\r\n        }\r\n        return start - plant_input.prestige;\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        this.resetPlantBD(plant);\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n        let runningHarvests = 0;\r\n        let newExpBonus = this.calcEXPBonus(modifiers);\r\n        let expTick = plant.prestigeBonus * newExpBonus;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n            let requiredPerPic = 10 * Math.pow(2, plant.prestige);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            let remainingHarvests = mathHelper.subtractDecimal(requiredHarvests, plant.created);//minimum number of ticks\r\n            let timeTillPrestige =\r\n                mathHelper.multiplyDecimal(\r\n                    mathHelper.divideDecimal(\r\n                        remainingHarvests,\r\n                        (plant.perHarvest * numAutos)\r\n                    ).ceil(),\r\n                    plant.growthTime\r\n                ).ceil().toNumber()\r\n                ;\r\n\r\n            if (numAutos === 0 && remainingHarvests.greaterThan(0)) {\r\n                prestiged = true;\r\n                totalTime = Infinity;\r\n            }\r\n            else if (timeTillPrestige <= 0) {\r\n                prestiged = true;\r\n\r\n                if (totalTime <= 0) {\r\n                    plant.prestige++;\r\n                    prestiged = false;\r\n                    runningHarvests += requiredPerPic;\r\n                }\r\n\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n\r\n                let rankRes = this.calcCarryOverEXP({ plant, numAutos, expTick: expTick * ticks })\r\n                plant.Rank += rankRes.numLevels;\r\n                plant.curExp = rankRes.leftOver;\r\n                plant.reqExp = rankRes.reqExp;\r\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return { remainingTime: totalTime, prestige: plant.prestige, prestiged: prestiged }\r\n    },\r\n    resetPlantBD: function (plant) {\r\n\r\n        plant.totalMade = plant?.totalMade?.mantissa || plant?.totalMade?.mantissa === 0 ? plant.totalMade : mathHelper.createDecimal(plant.totalMade);\r\n        plant.created = plant?.created?.mantissa || plant?.created?.mantissa === 0 ? plant.created : mathHelper.createDecimal(plant.created);\r\n        plant.production = plant?.production?.mantissa || plant?.production?.mantissa === 0 ? plant.production : mathHelper.createDecimal(plant.production);\r\n        plant.futureMult = mathHelper.createDecimal(plant.futureMult);\r\n\r\n    },\r\n    resetModifiersBD: function (modifiers) {\r\n        modifiers.shopProdBonus = modifiers?.shopProdBonus?.mantissa || modifiers?.shopProdBonus?.mantissa === 0 ? modifiers.shopProdBonus : mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = modifiers?.hpBonus?.mantissa || modifiers?.hpBonus?.mantissa === 0 ? modifiers.hpBonus : mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = modifiers?.curPotatoes?.mantissa || modifiers?.curPotatoes.mantissa === 0 ? modifiers.curPotatoes : mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = modifiers?.totalPotatoes?.mantissa || modifiers?.totalPotatoes?.mantissa === 0 ? modifiers.totalPotatoes : mathHelper.createDecimal(modifiers.totalPotatoes);\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        modifiers.nextCosts.prodCost = mathHelper.createDecimal(modifiers.nextCosts.prodCost)\r\n        modifiers.nextCosts.growthCost = mathHelper.createDecimal(modifiers.nextCosts.growthCost)\r\n        modifiers.nextCosts.expCost = mathHelper.createDecimal(modifiers.nextCosts.expCost)\r\n\r\n        let numAutos = modifiers.numAutos;\r\n        let simulationTime = modifiers.time; //time in seconds\r\n        let startTime = modifiers.startTime ? modifiers.startTime : 0;//used for consistent tick timings\r\n        const runningTime = modifiers.runningTime ? modifiers.runningTime : 0;//Used for calculating end timings if necessary\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n        const tickStart = modifiers.tickStart ? modifiers.tickStart : 0;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = modifiers.dataPointThreshold ? modifiers.dataPointThreshold : (simulationTime / tickRate) < dataPointsMax ? 1 : helper.roundInt((simulationTime / tickRate) / dataPointsMax);\r\n        let dataPointsPotatoes = [];\r\n        let dataPointsFries = [];\r\n\r\n        let totalPotatoes = modifiers.totalPotatoes;\r\n        let currPotatoes = modifiers.curPotatoes;\r\n        let prevPlantsProd = Array(plants.length).fill(0);\r\n        for (let i = 0; i < plants.length; i++) {\r\n            prevPlantsProd[i] = plants[i].production;\r\n        }\r\n\r\n        // let runTime = 0;\r\n        let i = 0;\r\n        let finalPass = false;\r\n        // tickRate = 2;\r\n        let prodMult = 1;\r\n        if (tickRate > 2) {\r\n            if (tickRate >= 2592) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 1728) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 864) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 140) {\r\n                prodMult = 0.95;\r\n            }\r\n            else {\r\n                prodMult = 0.95;\r\n            }\r\n        }\r\n        //Iterate over each second\r\n        for (; i < simulationTime / tickRate || finalPass; i++) {\r\n            //Calculate new values for each plant\r\n            let HPInitial = 0;\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n\r\n                let toAdd = j === plants.length - 1 ? 0 :\r\n                    tickRate > 1 ?\r\n                        //Some basic calculus to find total assuming linear growth\r\n                        mathHelper.multiplyDecimal(mathHelper.addDecimal(prevPlantsProd[j + 1], plants[j + 1].production), 0.5 * tickRate * prodMult)\r\n                        :\r\n                        mathHelper.multiplyDecimal(plants[j + 1].production, tickRate);\r\n                curr.totalMade = mathHelper.addDecimal(curr.totalMade, toAdd);\r\n                let res = this.calcFutureMult(curr, { ...modifiers, time: tickRate, numAuto: numAutos[j], string: false });\r\n                curr = res;\r\n                if (curr.ID === 1) {\r\n                    HPInitial = prevPlantsProd[j];\r\n                }\r\n                prevPlantsProd[j] = curr.production;\r\n\r\n            }\r\n\r\n\r\n            //Reduce plant rank potion timer, or set it the bonus to 0 if necessary\r\n            if (modifiers.potionRank > 1 && !modifiers.forceRankPotion) {\r\n                modifiers.potionRankTime -= tickRate;\r\n                if (modifiers.potionRankTime < 0) {\r\n                    modifiers.potionRank = 1;\r\n                }\r\n            }\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n\r\n            let HPToAdd = tickRate > 1 ?\r\n                mathHelper.multiplyDecimal(mathHelper.addDecimal(HPInitial, plants[0].production), 0.5 * tickRate * prodMult)\r\n                :\r\n                plants[0].production;\r\n\r\n            totalPotatoes = mathHelper.addDecimal(totalPotatoes, HPToAdd);\r\n            currPotatoes = mathHelper.addDecimal(currPotatoes, HPToAdd);\r\n\r\n            if (modifiers.autoBuyPBC) {\r\n                let updateCosts = false;\r\n                let boughtUpgrade = true;\r\n                while (boughtUpgrade) {\r\n                    boughtUpgrade = false;\r\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.prodCost) === true) {\r\n                        currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.prodCost);\r\n                        modifiers.shopProdLevel++;\r\n                        modifiers.shopProdBonus = this.calcShopProdBonus(modifiers, modifiers.shopProdLevel);\r\n                        updateCosts = true;\r\n                        boughtUpgrade = true;\r\n                    }\r\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.growthCost) === true) {\r\n                        // currPotatoes -= modifiers.nextCosts.growthCost;\r\n                        currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.growthCost);\r\n                        modifiers.shopGrowingSpeed++;\r\n                        updateCosts = true;\r\n                        boughtUpgrade = true;\r\n                    }\r\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.expCost) === true) {\r\n                        currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.expCost);\r\n                        modifiers.shopRankLevel++;\r\n                        modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\r\n                        updateCosts = true;\r\n                        boughtUpgrade = true;\r\n                    }\r\n                    if (updateCosts) {\r\n                        let nextCosts = this.getNextShopCosts(modifiers);\r\n                        modifiers.nextCosts = nextCosts\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            if (i % dataPointThreshold === 0 && curTime >= tickStart && curTime <= (simulationTime + runningTime)) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes, modifiers) })\r\n            }\r\n\r\n            if (!modifiers.skipFinal) {\r\n\r\n                if (finalPass && curTime >= (simulationTime + runningTime)) {\r\n                    break;\r\n                }\r\n                if (!finalPass && curTime < (simulationTime + runningTime)) {\r\n                    finalPass = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (i > 0 && !modifiers.skipFinal) {\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n            //Handling rare case when you have to add, but only once due to intervals duration, but only at the end, and didn't fit in the for loop above\r\n            if (dataPointsPotatoes.length === 0) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes, modifiers) })\r\n            }\r\n            else if (dataPointsPotatoes[dataPointsPotatoes.length - 1].production !== totalPotatoes) {\r\n                if (curTime > (simulationTime + runningTime)) {\r\n\r\n                    let timeIncrease = curTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let increase = mathHelper.divideDecimal(\r\n                        (mathHelper.subtractDecimal(\r\n                            totalPotatoes,\r\n                            dataPointsPotatoes[dataPointsPotatoes.length - 1].production\r\n                        )\r\n                        ),\r\n                        timeIncrease\r\n                    );\r\n\r\n\r\n                    // let temp_increase =  mathHelper.multiplyDecimal(mathHelper.addDecimal(HPInitial, plants[0].production), 0.5 * tickRate * prodMult);\r\n\r\n\r\n\r\n                    let trueTimeIncrease = (simulationTime + runningTime) - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let finalPotatoes = mathHelper.addDecimal(\r\n                        dataPointsPotatoes[dataPointsPotatoes.length - 1].production,\r\n                        mathHelper.multiplyDecimal(increase, trueTimeIncrease)\r\n                    );\r\n\r\n                    let newObj = { time: dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, production: finalPotatoes };\r\n                    dataPointsPotatoes.push(newObj);\r\n\r\n                    dataPointsFries.push({ \"time\": dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, \"fries\": farmingHelper.calcFryOutput(finalPotatoes, modifiers) })\r\n\r\n                    //This means the `current` potatoes aren't updated to reflect the backwards fill/fix but it shouldn't be a big deal, and not used for anything atm\r\n                    totalPotatoes = finalPotatoes;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            totalPotatoes: totalPotatoes,\r\n            potatoeProduction: plants[0].production,\r\n            plants: plants,\r\n            nextCosts: modifiers.nextCosts,\r\n            dataPointsPotatoes: dataPointsPotatoes,\r\n            dataPointsFries: dataPointsFries,\r\n            finalModifiers: modifiers,\r\n        };\r\n    },\r\n    calcStepHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let steps = modifiers.steps;\r\n        let res = -1;\r\n        let potatoeSteps = [];\r\n        let runningTime = 0;\r\n\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = (modifiers_input.time / tickRate) < dataPointsMax ? 1 : helper.roundInt((modifiers_input.time / tickRate) / dataPointsMax);\r\n\r\n        for (let i = 0; i < steps.length; i++) {\r\n            if (steps[i].time === 0) continue;\r\n            res = this.calcHPProd(plants, {\r\n                ...modifiers,\r\n                numAutos: steps[i].autos,\r\n                time: steps[i].time,\r\n                dataPointThreshold: dataPointThreshold,\r\n                startTime: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time : 0,\r\n                runningTime: runningTime,\r\n                skipFinal: i < (steps.length - 1),\r\n                tickStart: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time + dataPointThreshold * tickRate : 0,\r\n            });\r\n            modifiers = res.finalModifiers;\r\n            modifiers.totalPotatoes = res.totalPotatoes;\r\n            plants = res.plants;\r\n            potatoeSteps = potatoeSteps.concat(res.dataPointsPotatoes);\r\n            steps[i].obj = { text: `P${steps.length - i} for ${steps[i].time}`, numAutos: steps[i].autos, time: steps[i].time }\r\n\r\n            runningTime += steps[i].time;\r\n\r\n        }\r\n        res.dataPointsPotatoes = potatoeSteps;\r\n        res.steps = steps;\r\n\r\n        return res;\r\n    },\r\n    calcAssemblyHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\r\n            let level = (data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel)\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcAssembly: function (data, line_num, bonus_num) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[line_num].BonusList[bonus_num].StartingLevel <= data?.AssemblerCollection[line_num].Level) {\r\n            let gain = data?.AssemblerCollection[line_num].BonusList[bonus_num].Gain;\r\n            let level = Math.max(0, data.AssemblerCollection[line_num].Level - (data.AssemblerCollection[line_num].BonusList[bonus_num].StartingLevel - 1));\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcAssemblyLine: function (line, al_level) {\r\n        let bonus = 1;\r\n\r\n        if (line.StartingLevel <= al_level) {\r\n            let gain = line.Gain;\r\n            let level = Math.max(0, al_level - (line.StartingLevel - 1));\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcAssemblyCost: function (id, data) {\r\n        let finalCost = mathHelper.createDecimal(-1);\r\n        let costReduction = mathHelper.createDecimal(data.AssemblyCostReductionBonus);\r\n        let assembly = data.AssemblerCollection[id];\r\n        let baseCost = mathHelper.createDecimal(assembly.BaseCost)\r\n\r\n        let step1 = mathHelper.addDecimal(\r\n            baseCost,\r\n            mathHelper.multiplyDecimal(baseCost, assembly.Level)\r\n        );\r\n\r\n        let temp = 1 + assembly.CostExpo + assembly.CostExpo * assembly.Level * 0.02\r\n        let powStepBase = mathHelper.createDecimal(temp);\r\n        let step2 = mathHelper.pow(powStepBase, assembly.Level)\r\n        finalCost = mathHelper.divideDecimal(mathHelper.multiplyDecimal(step1, step2), costReduction)\r\n        // finalCost =\r\n        //     (level + startingCost * level)\r\n        //     * pow(1 + assembly.CostExpo + assembly.CostExpo * assembly.BaseCost * 0.02, assembly.BaseCost)\r\n        //     / costReduction;\r\n\r\n        return finalCost;\r\n    },\r\n    calcProteinPerSecond: function (data) {\r\n        let proteinBonus = mathHelper.createDecimal(data.ProteinBonus);\r\n        let frenchTotal = mathHelper.createDecimal(data.FrenchFriesTotal);\r\n        let result = mathHelper.createDecimal(1);\r\n        if (frenchTotal.greaterThan(10000000000.0)) {\r\n            let log1 = mathHelper.logDecimal(frenchTotal, 5);\r\n            log1 = mathHelper.subtractDecimal(log1, 13.48);\r\n            let log2 = mathHelper.logDecimal(frenchTotal, 10.0);\r\n            log2 = mathHelper.subtractDecimal(log2, 8);\r\n            result = mathHelper.multiplyDecimal(\r\n                mathHelper.multiplyDecimal(log1, mathHelper.pow(1.1, log2)),\r\n                proteinBonus);\r\n        }\r\n        return result;\r\n    },\r\n    calcContagionBonus: function (data, index) {\r\n        let bonus = 1;\r\n\r\n        if (data.GrasshopperCollection[index].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[index].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[index].Level);\r\n            bonus *= Math.pow(1 + base * 0.01, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcExpeditionHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data.ExpeditionsCollection[16].Locked > 0) {\r\n            let temp = data.ExpeditionsCollection[16];\r\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\r\n            bonus = res;\r\n        }\r\n        return bonus;\r\n    },\r\n    calcUniqueHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        for (let i = 0; i < data.FarmingShopUniqueHealthy.length; i++) {\r\n            bonus *= (data.FarmingShopUniqueHealthy[i] + 1);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcFriesHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let totalFries = helper.calcPOW(data.FrenchFriesTotal);\r\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\r\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\r\n        let fryBonus = shopFryBonus * contagionFryBonus;\r\n        bonus *= 1 + totalFries * fryBonus;\r\n        return bonus;\r\n    },\r\n    calcPetHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let activePets = data.EquipedPetID;\r\n        let allPets = data.PetsCollection;\r\n\r\n        let neededMap = {};\r\n        for (let i = 0; i < activePets.length; i++) {\r\n            if (activePets[i] > 0) {\r\n                neededMap[activePets[i]] = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < allPets.length; i++) {\r\n            let curr = allPets[i];\r\n            if (curr.ID in neededMap) {\r\n                // let rank = curr.Rank;\r\n                // let bonusInner = 0;\r\n\r\n                for (let j = 0; j < curr.BonusList.length; j++) {\r\n                    let bonusInner = curr.BonusList[j];\r\n                    if (bonusInner.ID === 23) {\r\n\r\n                        //public double GetPetBonus(int Bonus)\r\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\r\n                        //(x1                                                     + x3) * (x5) * 0.5\r\n\r\n\r\n                        // (\r\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\r\n                        //     - 1.0\r\n                        //     + Math.Max(\r\n                        //         0.0, \r\n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\r\n                        // )\r\n\r\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\r\n                        let x2 = helper.calculateLogarithm(1.0125, curr.Level + 1);\r\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\r\n                        let x4 = helper.calculateLogarithm(1.075, curr.Rank + 1);\r\n                        let x5 = 1.0 + x4 * 0.005;\r\n\r\n                        let tot1 = (x1 + x3);\r\n                        let tot2 = tot1 * x5;\r\n                        let tot3 = tot2 * 0.5;\r\n\r\n                        bonus += tot3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcHPBonus: function (data) {\r\n\r\n\r\n        // let bonus = 1;\r\n        // let assemblyHP = this.calcAssemblyHP(data);\r\n        // bonus *= assemblyHP;\r\n\r\n        // let contagionHP = this.calcContagionBonus(data, 0);\r\n        // bonus *= contagionHP;\r\n\r\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\r\n        // bonus *= soulBonus;\r\n\r\n        // let expeditionBonus = this.calcExpeditionHP(data);\r\n        // bonus *= expeditionBonus;\r\n\r\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\r\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\r\n\r\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\r\n        // bonus *= uniqueHPBonus;\r\n\r\n        // let fryHPBonus = this.calcFriesHPBonus(data);\r\n        // bonus *= fryHPBonus;\r\n\r\n        // let petHPBonus = this.calcPetHPBonus(data);\r\n        // bonus *= petHPBonus;\r\n\r\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\r\n        // bonus *= residueHPBonus;\r\n\r\n        // //(1 + \r\n        // // milk: \r\n        // let step1 = Math.max(0,\r\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\r\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\r\n        //         :\r\n        //         0\r\n        // );\r\n\r\n\r\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\r\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\r\n        //     : 1)\r\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\r\n\r\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\r\n        // //brewing:  \r\n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\r\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\r\n        // // bonus *= milkHPBonus;\r\n\r\n        let legitBonus = helper.calcPOW(data.HealthyPotatoBonus);\r\n        return legitBonus;\r\n    }\r\n}\r\n\r\nexport default farmingHelper;","import helper from '../util/farmingHelper.js';\r\nimport mathHelper from '../util/math.js';\r\nimport generalHelper from '../util/helper.js';\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n\r\n        //for some reason the break-infinity values get changed into {mantissa: x, exponent: y} objects, revert\r\n\r\n        for (let i = 0; i < finalPlants.length; i++) {\r\n            let cur = finalPlants[i];\r\n            cur.created = mathHelper.createDecimal(cur.created);\r\n            cur.totalMade = mathHelper.createDecimal(cur.totalMade);\r\n            cur.production = mathHelper.createDecimal(cur.production);\r\n        }\r\n\r\n        let modifiers = data.modifiers;\r\n        //Same thing for modifiers\r\n        modifiers.shopProdBonus = mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = mathHelper.createDecimal(modifiers.totalPotatoes);\r\n\r\n        const mode = data.mode;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        const numSimulatedAutos = data.numSimulatedAutos ? data.numSimulatedAutos : 1;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = mathHelper.createDecimal(0);\r\n        let totalPotCombo = {};\r\n        let bestProd = mathHelper.createDecimal(0);\r\n        let bestProdCombo = {};\r\n        let bestPIC = 0;\r\n        let bestPicCombo = { potatoeProduction: 0 };\r\n        let bestPICPerc = 0;\r\n        let bestPICPercCombo = { potatoeProduction: 0 }\r\n        let dataObj = { ...modifiers, time: secondsHour * futureTime };\r\n\r\n        let top10DataPointsPotatoes = [];\r\n        let top10DataPointsFries = [];\r\n\r\n        let counter = 0;\r\n        let counterMax = data.end - data.start;\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n            counterMax--;\r\n            counter++;\r\n            let combo = combinations[i];\r\n            dataObj.numAutos = combo;\r\n            let result;\r\n\r\n            switch (mode) {\r\n                case 'afk':\r\n\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n                case 'carlo':\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: combo });\r\n                    break;\r\n                case 'step':\r\n                    if (combo[0] === 0 && combo[1] === 0 && combo[2] === 0 && combo[3] === 0 && combo[4] === 0) {\r\n                        let bigsad = -1;\r\n                    }\r\n                    let steps = [];\r\n\r\n                    let curStep = 0;\r\n                    let numSteps = 0;\r\n                    let minTime = 0;\r\n\r\n                    for (let j = 0; j < combo.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            numSteps++;\r\n                            minTime += combo[j] * data.baseTimers[j];\r\n                        }\r\n                    }\r\n                    let remaining = (secondsHour * futureTime) - minTime;\r\n\r\n                    for (let j = 0; j < data.baseTimers.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            curStep++;\r\n                        }\r\n                        let autos = Array(data.baseTimers.length).fill(0);\r\n                        autos[j] = numSimulatedAutos;\r\n                        autos.reverse();\r\n                        let runTime = combo[j] * data.baseTimers[j];\r\n\r\n                        //If its the last plant that will be grown, give the remaining time to it\r\n                        if (curStep === numSteps && combo[j] > 0) {\r\n                            runTime += remaining;\r\n                        }\r\n                        //otherwise, round off time from other plants\r\n                        else if (combo[j] > 0) {\r\n                            let curPlant = finalPlants[finalPlants.length - 1 - j];\r\n                            let remainder = runTime % curPlant.growthTime;\r\n                            //Round down, add run time\r\n                            if (remainder <= curPlant.growthTime * 0.5) {\r\n                                runTime -= remainder;\r\n                                remaining += remainder;\r\n                            }\r\n                            //Round up, reduce run time\r\n                            else {\r\n                                let diff = curPlant.growthTime - remainder;\r\n                                //Only subtract time from final plant IF there is enough remaining time\r\n                                if (remaining >= diff) {\r\n                                    runTime += diff;\r\n                                    remaining -= diff\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        steps.push({\r\n                            time: generalHelper.roundInt(runTime),\r\n                            autos: autos\r\n                        })\r\n                    }\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: steps });\r\n                    break;\r\n                default:\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n            }\r\n\r\n            let picGained = 0;\r\n            let picPercent = 0;\r\n            let temp;\r\n\r\n            for (let j = 0; j < result.plants.length; j++) {\r\n                let picIncrease = helper.calcMaxPrestige(result.plants[j]);\r\n                picGained += picIncrease;\r\n                picPercent += (Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige));\r\n                result.plants[j].picIncrease = picIncrease;\r\n            }\r\n\r\n            if (result.totalPotatoes.greaterThanOrEqualTo(totalPot) === true) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n\r\n                top10DataPointsPotatoes.unshift({ data: result.dataPointsPotatoes, result: totalPot });\r\n                if (top10DataPointsPotatoes.length > 10) {\r\n                    top10DataPointsPotatoes.pop();\r\n                }\r\n                top10DataPointsFries.unshift({ data: result.dataPointsFries, result: totalPot });\r\n                if (top10DataPointsFries.length > 10) {\r\n                    top10DataPointsFries.pop();\r\n                }\r\n            }\r\n\r\n\r\n            if (result.potatoeProduction.greaterThanOrEqualTo(bestProd) === true) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            if (picGained > bestPIC) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                bestPIC = picGained;\r\n                bestPicCombo = temp;\r\n            }\r\n            else if (picGained === bestPIC) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPicCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                    bestPIC = picGained;\r\n                    bestPicCombo = temp;\r\n                }\r\n            }\r\n            if (picPercent > bestPICPerc) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                bestPICPerc = picPercent;\r\n                bestPICPercCombo = temp;\r\n            }\r\n            else if (picPercent === bestPICPerc) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPICPercCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                    bestPICPerc = picPercent;\r\n                    bestPICPercCombo = temp;\r\n                }\r\n            }\r\n\r\n            if (counter % 100 === 0) {\r\n                // eslint-disable-next-line no-restricted-globals\r\n                self.postMessage({\r\n                    update: true,\r\n                    temp: temp,\r\n                    updateAmount: 100\r\n                })\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            update: true,\r\n            updateAmount: counterMax\r\n        })\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo,\r\n            bestPicCombo: bestPicCombo,\r\n            bestPICPercCombo: bestPICPercCombo,\r\n            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            top10DataPointsFries: top10DataPointsFries\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"names":["roundTwoDecimal","number","Math","round","Number","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","secondsToStringWithS","seconds","string","numDays","numHours","numMinutes","numSeconds","floor","this","POSITIVE_INFINITY","NEGATIVE_INFINITY","concat","secondsToString","bonusColorMap","color","createDecimal","Decimal","multiplyDecimal","a","b","times","divideDecimal","dividedBy","addDecimal","plus","subtractDecimal","minus","logDecimal","exp","min","number1","number2","greaterThan","max","farmingHelper","findMultipliersWithMinPercentage","sum","numbers","minPercentage","multipliers","count","backtrack","index","currentSum","currentMultipliers","length","multiplier","productSum","reduce","acc","i","push","_toConsumableArray","console","calcGrowthTime","plant","modifiers","growingBonus","mathHelper","originalShopGrowingBonus","originalShopGrowingLevel","shopGrowingSpeed","toNumber","TimeNeeded","prestigeBonus","calcPlantHarvest","helper","Rank","prestige","manualHarvestBonus","calcShopProdBonus","modifiers_input","shopLevel","FarmingShopPlantTotalProduction","calcProdOutput","plant_input","TotalCreated","totalMade","shopProdBonus","PlantTotalProductionBonus","originalShopProdBonus","originalShopProdLevel","plantMult","futureMult","output","ID","hpBonus","calcFryOutput","potatoes","lessThan","timerBonus","timePassed","log10","step1","log2","step2","log3","step3","inter1","inter2","frenchBonus","fryBonus","step4","calcCarryOverEXP_OLD","_ref","numAutos","expTick","leftOver","numLevels","individualEXP","ticksNeededEXP","ceil","reqExp","curExp","futureReq","calcCarryOverEXP","_ref2","numEXP","calcEXPBonus","originalBonus","originalRankLevelBonus","originalLevel","originalShopRankLevel","currentShopLevel","shopRankLevel","originalPotion","originalPotionRank","currentPotion","potionRank","expBonus","futureMultBD","manualHarvestFormula","created","calcFutureMult","JSON","parse","stringify","remainingTime","time","numAuto","newExpBonus","growthTime","newOutPut","production","timeToLevel","calcTimeTillLevel","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","gainedEXP","totalExp","Infinity","remExp","getNextShopCosts","data","prodLevel","shopProdLevel","growthLevel","FarmingShopPlantGrowingSpeed","expLevel","FarmingShopPlantRankExpEarned","temp1","temp2","temp3","temp4","prodCost","growthCost","expCost","calcMaxPrestige","start","runningHarvests","flag","requiredPerPic","requiredHarvests","greaterThanOrEqualTo","calcTimeTillPrestige","resetPlantBD","resetModifiersBD","prestiged","totalTime","remainingHarvests","timeTillPrestige","ticks","rankRes","_plant$totalMade","_plant$totalMade2","_plant$created","_plant$created2","_plant$production","_plant$production2","_modifiers$shopProdBo","_modifiers$shopProdBo2","_modifiers$hpBonus","_modifiers$hpBonus2","_modifiers$curPotatoe","_modifiers$totalPotat","_modifiers$totalPotat2","curPotatoes","totalPotatoes","calcHPProd","plants_input","plants","nextCosts","simulationTime","startTime","runningTime","dataPointsMax","maxSteps","tickStart","tickRate","dataPointThreshold","dataPointsPotatoes","dataPointsFries","currPotatoes","prevPlantsProd","Array","fill","finalPass","prodMult","HPInitial","j","curr","toAdd","_objectSpread","forceRankPotion","potionRankTime","curTime","HPToAdd","autoBuyPBC","updateCosts","boughtUpgrade","shopRankEXP","skipFinal","timeIncrease","increase","trueTimeIncrease","finalPotatoes","newObj","potatoeProduction","finalModifiers","calcStepHPProd","steps","res","potatoeSteps","autos","obj","text","calcAssemblyHP","bonus","AssemblerCollection","BonusList","StartingLevel","Level","gain","Gain","level","calcAssembly","line_num","bonus_num","calcAssemblyLine","line","al_level","calcAssemblyCost","id","costReduction","AssemblyCostReductionBonus","assembly","baseCost","BaseCost","temp","CostExpo","powStepBase","calcProteinPerSecond","proteinBonus","ProteinBonus","frenchTotal","FrenchFriesTotal","result","log1","calcContagionBonus","GrasshopperCollection","Locked","BaseBonus","calcExpeditionHP","ExpeditionsCollection","BonusPower","Room","calcUniqueHPBonus","FarmingShopUniqueHealthy","calcFriesHPBonus","FarmingShopFriesHealthyBonus","calcPetHPBonus","activePets","EquipedPetID","allPets","PetsCollection","neededMap","bonusInner","x1","x2","calcHPBonus","HealthyPotatoBonus","self","onmessage","_ref$data","data1","finalPlants","cur","mode","futureTime","numSimulatedAutos","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","bestPIC","bestPicCombo","bestPICPerc","bestPICPercCombo","dataObj","top10DataPointsPotatoes","top10DataPointsFries","counter","counterMax","end","combo","curStep","numSteps","minTime","baseTimers","remaining","reverse","runTime","curPlant","remainder","diff","generalHelper","picGained","picPercent","picIncrease","unshift","pop","picGain","picStats","picLevel","postMessage","update","updateAmount","success","err"],"sourceRoot":""}