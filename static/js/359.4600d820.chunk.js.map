{"version":3,"file":"static/js/359.4600d820.chunk.js","mappings":"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","sources":["util/helper.js","util/math.js","util/farmingHelper.js","farming/farmingWorker.js"],"sourcesContent":["var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = this.roundInt((seconds % 3600) % 60);\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`\r\n        }\r\n        else {\r\n            string = string + `0s`;\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        1001: { color: 'maroon' },\r\n        1002: { color: 'orange' },\r\n        1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import Decimal from 'break_infinity.js';\r\nvar helper = {\r\n    createDecimal: function (number) {\r\n        let deci = number.mantissa || number.mantissa === 0 ? new Decimal(`${number.mantissa}e${number.exponent}`) : new Decimal(number);\r\n\r\n        return deci;\r\n    },\r\n    multiplyDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.times(b);\r\n    },\r\n    divideDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.dividedBy(b);\r\n    },\r\n    addDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.plus(b);\r\n    },\r\n    subtractDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.minus(b);\r\n    },\r\n    logDecimal: function (number, base) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return this.createDecimal(number.log(base));\r\n    },\r\n    pow: function (number, exp) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return number.pow(exp);\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './helper.js';\r\nimport mathHelper from './math.js';\r\n\r\nvar farmingHelper = {\r\n    findMultipliersWithMinPercentage: function (sum, numbers, minPercentage) {\r\n        const multipliers = [];\r\n        let count = 0;\r\n\r\n        function backtrack(index, currentSum, currentMultipliers) {\r\n            count++;\r\n\r\n            if (index === numbers.length) {\r\n                const productSum = currentMultipliers.reduce((acc, multiplier, i) => acc + multiplier * numbers[i], 0);\r\n                if (productSum >= minPercentage * sum) {\r\n                    multipliers.push([...currentMultipliers]);\r\n                }\r\n                return;\r\n            }\r\n            let max = Math.floor((sum - currentSum) / numbers[index]);\r\n            for (let multiplier = 0; multiplier <= max; multiplier++) {\r\n                currentMultipliers[index] = multiplier;\r\n                let tempSum = currentSum + multiplier * numbers[index];\r\n                if (tempSum < sum) {\r\n                    backtrack(index + 1, currentSum + multiplier * numbers[index], currentMultipliers);\r\n                }\r\n            }\r\n        }\r\n\r\n        backtrack(0, 0, []);\r\n        console.log(count);\r\n        return multipliers;\r\n    },\r\n    calcGrowthTime: function (plant, modifiers) {\r\n        let num = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        return num < 10 ? 10 : num;\r\n    },\r\n    calcPlantHarvest: function (plant, modifiers) {\r\n        return helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.contagionHarvest;\r\n    },\r\n    calcShopProdBonus: function (modifiers_input, shopLevel) {\r\n        shopLevel = shopLevel ? shopLevel : modifiers_input.FarmingShopPlantTotalProduction;\r\n        return mathHelper.pow(1.25, shopLevel);\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        //note bigsad = -1 -> need to take into account assumbly in the future\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(shopProdBonus, assemblyBonus), modifiers_input.contagionPlantProd);\r\n\r\n        let plantMult = plant_input.futureMult;\r\n\r\n        let output = mathHelper.multiplyDecimal(\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.multiplyDecimal(\r\n                    TotalCreated, plantMult),\r\n                PlantTotalProductionBonus),\r\n            mathHelper.createDecimal(Math.pow(1.02, prestige))\r\n        )\r\n            ;\r\n        if (plant_input.ID === 1) {\r\n            output = mathHelper.multiplyDecimal(output, modifiers_input.hpBonus);\r\n        }\r\n\r\n        return output;\r\n    },\r\n    calcFryOutput: function (potatoes) {\r\n\r\n        // BigDouble.Round((BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 15.75) * (20 - BigDouble.Min(BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0), 31) + 16) * BigDouble.Pow(1.15, BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 16.0) * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        let log10 = mathHelper.logDecimal(potatoes, 10);\r\n        let step1 = mathHelper.subtractDecimal(mathHelper.logDecimal(potatoes, 10), 15.75);\r\n        let inter1 = log10;\r\n        inter1 = inter1.lessThan(31) ? inter1 : 31;\r\n        let step2 = mathHelper.subtractDecimal(mathHelper.createDecimal(36), inter1);\r\n        let step3 = mathHelper.pow(\r\n            mathHelper.createDecimal(1.15),\r\n            mathHelper.subtractDecimal(\r\n                log10, 16.0\r\n            )\r\n        );\r\n        return mathHelper.multiplyDecimal(step1, mathHelper.multiplyDecimal(step2, step3));\r\n    },\r\n    calcCarryOverEXP_OLD: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 1;\r\n        if (numAutos > 1) {\r\n            let individualEXP = expTick / numAutos;\r\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\r\n            if (numAutos > ticksNeededEXP) {\r\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\r\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                while (leftOver > futureReq) {\r\n                    leftOver -= futureReq;\r\n                    numLevels++;\r\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                }\r\n            }\r\n            else {\r\n                leftOver = 0;\r\n            }\r\n        }\r\n        else {\r\n\r\n            leftOver = 0;\r\n        }\r\n\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    calcCarryOverEXP: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 0;\r\n        let numEXP = plant.curExp + numAutos * expTick;\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n\r\n        //need to handle two cases: 1 auto, just go up as much as you can\r\n        // >1 autos\r\n\r\n        while (numEXP >= reqExp) {\r\n            numEXP -= reqExp;\r\n            numLevels++;\r\n            reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        }\r\n\r\n        leftOver = numEXP;\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    futureMultBD: function (plant, modifiers) {\r\n        return mathHelper.pow(\r\n            (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n            mathHelper.logDecimal(plant.created, 1.25)\r\n        );\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n        //bigsad = -1 need to make costs big decimal as well now\r\n        // console.log(`calcing future mult${plant_input.ID}`)\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus;\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n\r\n        while (remainingTime > 0) {\r\n\r\n            // plant.timeToLevel = Math.ceil((plant.reqExp - plant.curExp) / expTick) * plant.growthTime - plant.elapsedTime;\r\n            plant.timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel > remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n                plant.created = mathHelper.addDecimal(plant.created, toCreate);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, toCreate);\r\n\r\n                plant.futureMult = this.futureMultBD(plant, modifiers);\r\n\r\n                if (rankIncrease) {\r\n\r\n                    let leftOver = this.calcCarryOverEXP({ plant, expTick, numAutos });\r\n                    plant.curExp = leftOver.leftOver;\r\n                    plant.Rank += leftOver.numLevels;\r\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                    // plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    plant.reqExp = leftOver.reqExp;\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick * numAutos;\r\n                    let totalExp = plant.curExp + gainedEXP;\r\n                    plant.curExp = totalExp;\r\n                }\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        let newOutPut = this.calcProdOutput(plant, modifiers);\r\n        plant.production = newOutPut;\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n        let plant = plant_input;\r\n        let modifiers = modifiers_input;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n        let ticksTillLevel = Math.ceil((remExp) / expBonus);\r\n\r\n        return ticksTillLevel * plant.growthTime - plant.elapsedTime;\r\n    },\r\n    getNextShopCosts: function (data) {\r\n\r\n        let prodCost = 1;\r\n        let prodLevel = data.FarmingShopPlantTotalProduction || data.FarmingShopPlantTotalProduction === 0 ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\r\n        let growthCost = 1;\r\n        let growthLevel = data.FarmingShopPlantGrowingSpeed || data.FarmingShopPlantGrowingSpeed === 0 ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\r\n        let expCost = 1;\r\n        let expLevel = data.FarmingShopPlantRankExpEarned || data.FarmingShopPlantRankExpEarned === 0 ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\r\n\r\n        let temp1 = mathHelper.pow(\r\n            1.05, prodLevel - 50\r\n        );\r\n        let temp2 = mathHelper.multiplyDecimal(100, temp1);\r\n        let temp3 = mathHelper.pow(temp2, prodLevel);\r\n        let temp4 = mathHelper.multiplyDecimal(100000000, temp3);\r\n        prodCost = prodLevel > 50 ? temp4 : mathHelper.multiplyDecimal(100000000, mathHelper.pow(100, prodLevel));\r\n\r\n\r\n        growthCost = 10000000000 * Math.pow(500, growthLevel);\r\n        expCost = 1000000000000000 * Math.pow(250, expLevel);\r\n        return { prodCost, growthCost, expCost };\r\n    },\r\n    calcMaxPrestige: function (plant_input) {\r\n\r\n        let start = plant_input.prestige;\r\n        let runningHarvests = 0;\r\n        let flag = true;\r\n        while (flag) {\r\n            let requiredHarvests = runningHarvests + (10 * Math.pow(2, start));\r\n            if (plant_input.created.greaterThanOrEqualTo(requiredHarvests)) {\r\n                start++;\r\n                runningHarvests += requiredHarvests;\r\n            }\r\n            else {\r\n                flag = false;\r\n            }\r\n        }\r\n        return start - plant_input.prestige;\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        this.resetPlantBD(plant);\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n        let runningHarvests = 0;\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus;\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n            let requiredHarvests = runningHarvests + (10 * Math.pow(2, plant.prestige));\r\n            let remainingHarvests = requiredHarvests - plant.created;\r\n            let timeTillPrestige = Math.ceil((remainingHarvests / (plant.perHarvest * numAutos))) * plant.growthTime;\r\n\r\n            if (timeTillPrestige <= 0) {\r\n                prestiged = true;\r\n\r\n                if (totalTime <= 0) {\r\n                    plant.prestige++;\r\n                    prestiged = false;\r\n                    runningHarvests += requiredHarvests;\r\n                }\r\n\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n\r\n                let rankRes = this.calcCarryOverEXP({ plant, numAutos, expTick })\r\n                plant.Rank += rankRes.numLevels;\r\n                plant.curExp = rankRes.leftOver;\r\n                plant.reqExp = rankRes.reqExp;\r\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return { remainingTime: totalTime, prestige: plant.prestige, prestiged: prestiged }\r\n    },\r\n    resetPlantBD: function (plant) {\r\n\r\n        plant.totalMade = plant?.totalMade?.mantissa || plant?.totalMade?.mantissa === 0 ? plant.totalMade : mathHelper.createDecimal(plant.totalMade);\r\n        plant.created = plant?.created?.mantissa || plant?.created?.mantissa === 0 ? plant.created : mathHelper.createDecimal(plant.created);\r\n        plant.production = plant?.production?.mantissa || plant?.production?.mantissa === 0 ? plant.production : mathHelper.createDecimal(plant.production);\r\n        plant.futureMult = mathHelper.createDecimal(plant.futureMult);\r\n\r\n    },\r\n    resetModifiersBD: function (modifiers) {\r\n        modifiers.shopProdBonus = modifiers?.shopProdBonus?.mantissa || modifiers?.shopProdBonus?.mantissa === 0 ? modifiers.shopProdBonus : mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = modifiers?.hpBonus?.mantissa || modifiers?.hpBonus?.mantissa === 0 ? modifiers.hpBonus : mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = modifiers?.curPotatoes?.mantissa || modifiers?.curPotatoes.mantissa === 0 ? modifiers.curPotatoes : mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = modifiers?.totalPotatoes?.mantissa || modifiers?.totalPotatoes?.mantissa === 0 ? modifiers.totalPotatoes : mathHelper.createDecimal(modifiers.totalPotatoes);\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        modifiers.nextCosts.prodCost = mathHelper.createDecimal(modifiers.nextCosts.prodCost)\r\n        modifiers.nextCosts.growthCost = mathHelper.createDecimal(modifiers.nextCosts.growthCost)\r\n        modifiers.nextCosts.expCost = mathHelper.createDecimal(modifiers.nextCosts.expCost)\r\n\r\n        let numAutos = modifiers.numAutos;\r\n        let simulationTime = modifiers.time; //time in seconds\r\n        let startTime = modifiers.startTime ? modifiers.startTime : 0;//used for consistent tick timings\r\n        const runningTime = modifiers.runningTime ? modifiers.runningTime : 0;//Used for calculating end timings if necessary\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n        const tickStart = modifiers.tickStart ? modifiers.tickStart : 0;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = modifiers.dataPointThreshold ? modifiers.dataPointThreshold : (simulationTime / tickRate) < dataPointsMax ? 1 : helper.roundInt((simulationTime / tickRate) / dataPointsMax);\r\n        let dataPointsPotatoes = [];\r\n        let dataPointsFries = [];\r\n\r\n        let totalPotatoes = modifiers.totalPotatoes;\r\n        let currPotatoes = modifiers.curPotatoes;\r\n        let prevPlantsProd = Array(plants.length).fill(0);\r\n        for (let i = 0; i < plants.length; i++) {\r\n            prevPlantsProd[i] = plants[i].production;\r\n        }\r\n\r\n        // let runTime = 0;\r\n        let i = 0;\r\n        let finalPass = false;\r\n        //Iterate over each second\r\n        for (; i < simulationTime / tickRate || finalPass; i++) {\r\n            //Calculate new values for each plant\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n\r\n                let toAdd = j === plants.length - 1 ? 0 :\r\n                    // plants[j + 1].production * tickRate\r\n                    tickRate > 1 ?\r\n                        //Some basic calculus to find total assuming linear growth\r\n                        mathHelper.multiplyDecimal(mathHelper.addDecimal(prevPlantsProd[j + 1], plants[j + 1].production), 0.5 * tickRate)\r\n                        :\r\n                        mathHelper.multiplyDecimal(plants[j + 1].production, tickRate);\r\n                curr.totalMade = mathHelper.addDecimal(curr.totalMade, toAdd);\r\n                let res = this.calcFutureMult(curr, { ...modifiers, time: tickRate, numAuto: numAutos[j], string: false });\r\n                plants[j] = res;\r\n                prevPlantsProd[j] = plants[j].production;\r\n            }\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n\r\n\r\n\r\n            totalPotatoes = mathHelper.addDecimal(totalPotatoes, mathHelper.multiplyDecimal(plants[0].production, tickRate));\r\n            currPotatoes = mathHelper.addDecimal(currPotatoes, mathHelper.multiplyDecimal(plants[0].production, tickRate));\r\n\r\n            if (modifiers.autoBuyPBC) {\r\n                let updateCosts = false;\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.prodCost) === true) {\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.prodCost);\r\n                    modifiers.shopProdLevel++;\r\n                    modifiers.shopProdBonus = this.calcShopProdBonus(modifiers, modifiers.shopProdLevel);\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.growthCost) === true) {\r\n                    // currPotatoes -= modifiers.nextCosts.growthCost;\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.growthCost);\r\n                    modifiers.shopGrowingSpeed++;\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.expCost) === true) {\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.expCost);\r\n                    modifiers.shopRankLevel++;\r\n                    modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\r\n                    updateCosts = true;\r\n                }\r\n                if (updateCosts) {\r\n                    let nextCosts = this.getNextShopCosts(modifiers);\r\n                    modifiers.nextCosts = nextCosts\r\n                }\r\n            }\r\n\r\n\r\n            if (i % dataPointThreshold === 0 && curTime >= tickStart && curTime <= (simulationTime + runningTime)) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n\r\n            if (!modifiers.skipFinal) {\r\n\r\n                if (finalPass && curTime >= (simulationTime + runningTime)) {\r\n                    break;\r\n                }\r\n                if (!finalPass && curTime < (simulationTime + runningTime)) {\r\n                    finalPass = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (i > 0 && !modifiers.skipFinal) {\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n            //Handling rare case when you have to add, but only once due to intervals duration, but only at the end, and didn't fit in the for loop above\r\n            if (dataPointsPotatoes.length === 0) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n            else if (dataPointsPotatoes[dataPointsPotatoes.length - 1].production !== totalPotatoes) {\r\n                if (curTime > (simulationTime + runningTime)) {\r\n\r\n                    let timeIncrease = curTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let increase = (totalPotatoes - dataPointsPotatoes[dataPointsPotatoes.length - 1].production) / timeIncrease;\r\n                    let trueTimeIncrease = (simulationTime + runningTime) - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let finalPotatoes = mathHelper.addDecimal(dataPointsPotatoes[dataPointsPotatoes.length - 1].production, increase * trueTimeIncrease);\r\n\r\n                    let newObj = { time: dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, production: finalPotatoes };\r\n                    dataPointsPotatoes.push(newObj);\r\n\r\n                    dataPointsFries.push({ \"time\": dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, \"fries\": farmingHelper.calcFryOutput(finalPotatoes) })\r\n\r\n                    //This means the `current` potatoes aren't updated to reflect the backwards fill/fix but it shouldn't be a big deal, and not used for anything atm\r\n                    totalPotatoes = finalPotatoes;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            totalPotatoes: totalPotatoes,\r\n            potatoeProduction: plants[0].production,\r\n            plants: plants,\r\n            nextCosts: modifiers.nextCosts,\r\n            dataPointsPotatoes: dataPointsPotatoes,\r\n            dataPointsFries: dataPointsFries,\r\n            finalModifiers: modifiers,\r\n        };\r\n    },\r\n    calcStepHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let steps = modifiers.steps;\r\n        let res = -1;\r\n        let potatoeSteps = [];\r\n        let runningTime = 0;\r\n\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = (modifiers_input.time / tickRate) < dataPointsMax ? 1 : helper.roundInt((modifiers_input.time / tickRate) / dataPointsMax);\r\n\r\n        for (let i = 0; i < steps.length; i++) {\r\n            res = this.calcHPProd(plants, {\r\n                ...modifiers,\r\n                numAutos: steps[i].autos,\r\n                time: steps[i].time,\r\n                dataPointThreshold: dataPointThreshold,\r\n                startTime: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time : 0,\r\n                runningTime: runningTime,\r\n                skipFinal: i < (steps.length - 1),\r\n                tickStart: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time + dataPointThreshold * tickRate : 0,\r\n            });\r\n            modifiers = res.finalModifiers;\r\n            modifiers.totalPotatoes = res.totalPotatoes;\r\n            plants = res.plants;\r\n            potatoeSteps = potatoeSteps.concat(res.dataPointsPotatoes);\r\n            steps[i].obj = { text: `P${steps.length - i} for ${steps[i].time}`, numAutos: steps[i].autos, time: steps[i].time }\r\n\r\n            runningTime += steps[i].time;\r\n\r\n        }\r\n        res.dataPointsPotatoes = potatoeSteps;\r\n        res.steps = steps;\r\n\r\n        return res;\r\n    },\r\n    calcAssemblyHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\r\n            let level = (data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel)\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcContagionBonus: function (data, index) {\r\n        let bonus = 1;\r\n\r\n        if (data.GrasshopperCollection[index].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[index].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[index].Level);\r\n            bonus *= Math.pow(1 + base * 0.01, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcExpeditionHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data.ExpeditionsCollection[16].Locked > 0) {\r\n            let temp = data.ExpeditionsCollection[16];\r\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\r\n            bonus = res;\r\n        }\r\n        return bonus;\r\n    },\r\n    calcUniqueHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        for (let i = 0; i < data.FarmingShopUniqueHealthy.length; i++) {\r\n            bonus *= (data.FarmingShopUniqueHealthy[i] + 1);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcFriesHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let totalFries = helper.calcPOW(data.FrenchFriesTotal);\r\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\r\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\r\n        let fryBonus = shopFryBonus * contagionFryBonus;\r\n        bonus *= 1 + totalFries * fryBonus;\r\n        return bonus;\r\n    },\r\n    calcPetHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let activePets = data.EquipedPetID;\r\n        let allPets = data.PetsCollection;\r\n\r\n        let neededMap = {};\r\n        for (let i = 0; i < activePets.length; i++) {\r\n            if (activePets[i] > 0) {\r\n                neededMap[activePets[i]] = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < allPets.length; i++) {\r\n            let curr = allPets[i];\r\n            if (curr.ID in neededMap) {\r\n                let rank = curr.Rank;\r\n                let bonusInner = 0;\r\n\r\n                for (let j = 0; j < curr.BonusList.length; j++) {\r\n                    let bonusInner = curr.BonusList[j];\r\n                    if (bonusInner.ID === 23) {\r\n\r\n                        //public double GetPetBonus(int Bonus)\r\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\r\n                        //(x1                                                     + x3) * (x5) * 0.5\r\n\r\n\r\n                        // (\r\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\r\n                        //     - 1.0\r\n                        //     + Math.Max(\r\n                        //         0.0, \r\n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\r\n                        // )\r\n\r\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\r\n                        let x2 = helper.calculateLogarithm(1.0125, curr.Level + 1);\r\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\r\n                        let x4 = helper.calculateLogarithm(1.075, curr.Rank + 1);\r\n                        let x5 = 1.0 + x4 * 0.005;\r\n\r\n                        let tot1 = (x1 + x3);\r\n                        let tot2 = tot1 * x5;\r\n                        let tot3 = tot2 * 0.5;\r\n\r\n                        bonus += tot3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcHPBonus: function (data) {\r\n\r\n\r\n        // let bonus = 1;\r\n        // let assemblyHP = this.calcAssemblyHP(data);\r\n        // bonus *= assemblyHP;\r\n\r\n        // let contagionHP = this.calcContagionBonus(data, 0);\r\n        // bonus *= contagionHP;\r\n\r\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\r\n        // bonus *= soulBonus;\r\n\r\n        // let expeditionBonus = this.calcExpeditionHP(data);\r\n        // bonus *= expeditionBonus;\r\n\r\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\r\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\r\n\r\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\r\n        // bonus *= uniqueHPBonus;\r\n\r\n        // let fryHPBonus = this.calcFriesHPBonus(data);\r\n        // bonus *= fryHPBonus;\r\n\r\n        // let petHPBonus = this.calcPetHPBonus(data);\r\n        // bonus *= petHPBonus;\r\n\r\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\r\n        // bonus *= residueHPBonus;\r\n\r\n        // //(1 + \r\n        // // milk: \r\n        // let step1 = Math.max(0,\r\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\r\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\r\n        //         :\r\n        //         0\r\n        // );\r\n\r\n\r\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\r\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\r\n        //     : 1)\r\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\r\n\r\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\r\n        // //brewing:  \r\n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\r\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\r\n        // // bonus *= milkHPBonus;\r\n\r\n        let legitBonus = helper.calcPOW(data.HealthyPotatoBonus);\r\n        return legitBonus;\r\n    }\r\n}\r\n\r\nexport default farmingHelper;","import helper from '../util/farmingHelper.js';\r\nimport mathHelper from '../util/math.js';\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n\r\n        //for some reason the break-infinity values get changed into {mantissa: x, exponent: y} objects, revert\r\n\r\n        for (let i = 0; i < finalPlants.length; i++) {\r\n            let cur = finalPlants[i];\r\n            cur.created = mathHelper.createDecimal(cur.created);\r\n            cur.totalMade = mathHelper.createDecimal(cur.totalMade);\r\n            cur.production = mathHelper.createDecimal(cur.production);\r\n        }\r\n\r\n        let modifiers = data.modifiers;\r\n        //Same thing for modifiers\r\n        modifiers.shopProdBonus = mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = mathHelper.createDecimal(modifiers.totalPotatoes);\r\n\r\n        const mode = data.mode;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        const numSimulatedAutos = data.numSimulatedAutos ? data.numSimulatedAutos : 1;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = mathHelper.createDecimal(0);\r\n        let totalPotCombo = {};\r\n        let bestProd = mathHelper.createDecimal(0);\r\n        let bestProdCombo = {};\r\n        let bestPIC = 0;\r\n        let bestPicCombo = { potatoeProduction: 0 };\r\n        let bestPICPerc = 0;\r\n        let bestPICPercCombo = { potatoeProduction: 0 }\r\n        let dataObj = { ...modifiers, time: secondsHour * futureTime };\r\n\r\n        let top10DataPointsPotatoes = [];\r\n        let top10DataPointsFries = [];\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n\r\n            let combo = combinations[i];\r\n            dataObj.numAutos = combo;\r\n            let result;\r\n\r\n            switch (mode) {\r\n                case 'afk':\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n                case 'step':\r\n\r\n                    let steps = [];\r\n                    let runningTime = 0;\r\n\r\n                    let curStep = 0;\r\n                    let numSteps = 0;\r\n                    let minTime = 0;\r\n\r\n                    for (let j = 0; j < combo.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            numSteps++;\r\n                            minTime += combo[j] * data.baseTimers[j];\r\n                        }\r\n                    }\r\n                    let remaining = (secondsHour * futureTime) - minTime;\r\n\r\n                    for (let j = 0; j < data.baseTimers.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            curStep++;\r\n                        }\r\n                        let autos = Array(data.baseTimers.length).fill(0);\r\n                        autos[j] = numSimulatedAutos;\r\n                        autos.reverse();\r\n                        let runTime = combo[j] * data.baseTimers[j];\r\n                        runningTime += runTime;\r\n\r\n                        if (curStep === numSteps && combo[j] > 0) {\r\n                            runTime += remaining;\r\n                        }\r\n\r\n                        steps.push({\r\n                            time: runTime,\r\n                            autos: autos\r\n                        })\r\n                    }\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: steps, numSteps: numSteps });\r\n                    break;\r\n                default:\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n            }\r\n\r\n            let picGained = 0;\r\n            let picPercent = 0;\r\n\r\n            for (let j = 0; j < result.plants.length; j++) {\r\n                let picIncrease = helper.calcMaxPrestige(result.plants[j]);\r\n                picGained += picIncrease;\r\n                picPercent += (Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige));\r\n                result.plants[j].picIncrease = picIncrease;\r\n            }\r\n\r\n            if (result.totalPotatoes.greaterThanOrEqualTo(totalPot) === true) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n\r\n                top10DataPointsPotatoes.unshift({ data: result.dataPointsPotatoes, result: totalPot });\r\n                if (top10DataPointsPotatoes.length > 10) {\r\n                    top10DataPointsPotatoes.pop();\r\n                }\r\n                top10DataPointsFries.unshift({ data: result.dataPointsFries, result: totalPot });\r\n                if (top10DataPointsFries.length > 10) {\r\n                    top10DataPointsFries.pop();\r\n                }\r\n            }\r\n\r\n\r\n            if (result.potatoeProduction.greaterThanOrEqualTo(bestProd) === true) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            if (picGained > bestPIC) {\r\n                let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                bestPIC = picGained;\r\n                bestPicCombo = temp;\r\n            }\r\n            else if (picGained === bestPIC) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPicCombo.potatoeProduction)) {\r\n                    let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                    bestPIC = picGained;\r\n                    bestPicCombo = temp;\r\n                }\r\n            }\r\n            if (picPercent > bestPICPerc) {\r\n                let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                bestPICPerc = picPercent;\r\n                bestPICPercCombo = temp;\r\n            }\r\n            else if (picPercent === bestPICPerc) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPICPercCombo.potatoeProduction)) {\r\n                    let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                    bestPICPerc = picPercent;\r\n                    bestPICPercCombo = temp;\r\n                }\r\n            }\r\n\r\n\r\n            // eslint-disable-next-line no-restricted-globals\r\n            self.postMessage({\r\n                update: true\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo,\r\n            bestPicCombo: bestPicCombo,\r\n            bestPICPercCombo: bestPICPercCombo,\r\n            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            top10DataPointsFries: top10DataPointsFries\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"names":["roundTwoDecimal","number","Math","round","Number","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","secondsToStringWithS","seconds","numHours","numMinutes","numSeconds","string","floor","this","concat","secondsToString","bonusColorMap","color","createDecimal","Decimal","multiplyDecimal","a","b","times","divideDecimal","dividedBy","addDecimal","plus","subtractDecimal","minus","logDecimal","exp","farmingHelper","findMultipliersWithMinPercentage","sum","numbers","minPercentage","multipliers","count","backtrack","index","currentSum","currentMultipliers","length","max","multiplier","productSum","reduce","acc","i","push","_toConsumableArray","console","calcGrowthTime","plant","modifiers","TimeNeeded","prestigeBonus","shopGrowingSpeed","petPlantCombo","contagionPlantGrowth","calcPlantHarvest","helper","Rank","prestige","contagionHarvest","calcShopProdBonus","modifiers_input","shopLevel","FarmingShopPlantTotalProduction","mathHelper","calcProdOutput","plant_input","TotalCreated","totalMade","shopProdBonus","created","manualHarvestFormula","PlantTotalProductionBonus","contagionPlantProd","plantMult","futureMult","output","ID","hpBonus","calcFryOutput","potatoes","log10","step1","inter1","lessThan","step2","step3","calcCarryOverEXP_OLD","_ref","numAutos","expTick","leftOver","numLevels","individualEXP","ticksNeededEXP","ceil","reqExp","curExp","futureReq","calcCarryOverEXP","_ref2","numEXP","futureMultBD","calcFutureMult","JSON","parse","stringify","remainingTime","time","numAuto","expBonus","growthTime","timeToLevel","calcTimeTillLevel","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","gainedEXP","totalExp","newOutPut","production","remExp","getNextShopCosts","data","prodLevel","shopProdLevel","growthLevel","FarmingShopPlantGrowingSpeed","expLevel","FarmingShopPlantRankExpEarned","shopRankLevel","temp1","temp2","temp3","temp4","prodCost","growthCost","expCost","calcMaxPrestige","start","runningHarvests","flag","requiredHarvests","greaterThanOrEqualTo","calcTimeTillPrestige","resetPlantBD","resetModifiersBD","prestiged","totalTime","remainingHarvests","timeTillPrestige","ticks","rankRes","_plant$totalMade","_plant$totalMade2","_plant$created","_plant$created2","_plant$production","_plant$production2","_modifiers$shopProdBo","_modifiers$shopProdBo2","_modifiers$hpBonus","_modifiers$hpBonus2","_modifiers$curPotatoe","_modifiers$totalPotat","_modifiers$totalPotat2","curPotatoes","totalPotatoes","calcHPProd","plants_input","plants","nextCosts","simulationTime","startTime","runningTime","dataPointsMax","maxSteps","tickStart","tickRate","dataPointThreshold","dataPointsPotatoes","dataPointsFries","currPotatoes","prevPlantsProd","Array","fill","finalPass","j","curr","toAdd","res","_objectSpread","curTime","autoBuyPBC","updateCosts","shopRankEXP","skipFinal","timeIncrease","increase","trueTimeIncrease","finalPotatoes","newObj","potatoeProduction","finalModifiers","calcStepHPProd","steps","potatoeSteps","autos","obj","text","calcAssemblyHP","bonus","AssemblerCollection","BonusList","StartingLevel","Level","gain","Gain","level","calcContagionBonus","GrasshopperCollection","Locked","BaseBonus","calcExpeditionHP","ExpeditionsCollection","temp","BonusPower","Room","calcUniqueHPBonus","FarmingShopUniqueHealthy","calcFriesHPBonus","FrenchFriesTotal","FarmingShopFriesHealthyBonus","calcPetHPBonus","activePets","EquipedPetID","allPets","PetsCollection","neededMap","bonusInner","x1","x2","calcHPBonus","HealthyPotatoBonus","self","onmessage","_ref$data","id","data1","finalPlants","cur","mode","futureTime","numSimulatedAutos","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","bestPIC","bestPicCombo","bestPICPerc","bestPICPercCombo","dataObj","top10DataPointsPotatoes","top10DataPointsFries","end","combo","result","curStep","numSteps","minTime","baseTimers","remaining","reverse","runTime","picGained","picPercent","picIncrease","unshift","pop","picGain","picStats","picLevel","postMessage","update","success","err"],"sourceRoot":""}