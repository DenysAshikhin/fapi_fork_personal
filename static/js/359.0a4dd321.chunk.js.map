{"version":3,"file":"static/js/359.0a4dd321.chunk.js","mappings":"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","sources":["util/helper.js","util/math.js","util/farmingHelper.js","farming/farmingWorker.js"],"sourcesContent":["var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = this.roundInt((seconds % 3600) % 60);\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`\r\n        }\r\n        else {\r\n            string = string + `0s`;\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        1001: { color: 'maroon' },\r\n        1002: { color: 'orange' },\r\n        1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import Decimal from 'break_infinity.js';\r\nvar helper = {\r\n    createDecimal: function (number) {\r\n        let deci = number.mantissa || number.mantissa === 0 ? new Decimal(`${number.mantissa}e${number.exponent}`) : new Decimal(number);\r\n\r\n        return deci;\r\n    },\r\n    multiplyDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.times(b);\r\n    },\r\n    divideDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.dividedBy(b);\r\n    },\r\n    addDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.plus(b);\r\n    },\r\n    subtractDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.minus(b);\r\n    },\r\n    logDecimal: function (number, base) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return this.createDecimal(number.log(base));\r\n    },\r\n    pow: function (number, exp) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return number.pow(exp);\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './helper.js';\r\nimport mathHelper from './math.js';\r\n\r\nvar farmingHelper = {\r\n    findMultipliersWithMinPercentage: function (sum, numbers, minPercentage) {\r\n        const multipliers = [];\r\n        let count = 0;\r\n\r\n        function backtrack(index, currentSum, currentMultipliers) {\r\n            count++;\r\n\r\n            if (index === numbers.length) {\r\n                const productSum = currentMultipliers.reduce((acc, multiplier, i) => acc + multiplier * numbers[i], 0);\r\n                if (productSum >= minPercentage * sum) {\r\n                    multipliers.push([...currentMultipliers]);\r\n                }\r\n                return;\r\n            }\r\n            let max = Math.floor((sum - currentSum) / numbers[index]);\r\n            for (let multiplier = 0; multiplier <= max; multiplier++) {\r\n                currentMultipliers[index] = multiplier;\r\n                let tempSum = currentSum + multiplier * numbers[index];\r\n                if (tempSum < sum) {\r\n                    backtrack(index + 1, currentSum + multiplier * numbers[index], currentMultipliers);\r\n                }\r\n            }\r\n        }\r\n\r\n        backtrack(0, 0, []);\r\n        console.log(count);\r\n        return multipliers;\r\n    },\r\n    calcGrowthTime: function (plant, modifiers) {\r\n        let num = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        return num < 10 ? 10 : num;\r\n    },\r\n    calcPlantHarvest: function (plant, modifiers) {\r\n        return helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.contagionHarvest * modifiers.assemblyPlantharvest;\r\n    },\r\n    calcShopProdBonus: function (modifiers_input, shopLevel) {\r\n        shopLevel = shopLevel ? shopLevel : modifiers_input.FarmingShopPlantTotalProduction;\r\n        return mathHelper.pow(1.25, shopLevel);\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        //note bigsad = -1 -> need to take into account assumbly in the future\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(shopProdBonus, assemblyBonus), modifiers_input.contagionPlantProd);\r\n\r\n        let plantMult = plant_input.futureMult;\r\n\r\n        let output = mathHelper.multiplyDecimal(\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.multiplyDecimal(\r\n                    TotalCreated, plantMult),\r\n                PlantTotalProductionBonus),\r\n            mathHelper.createDecimal(Math.pow(1.02, prestige))\r\n        )\r\n            ;\r\n        if (plant_input.ID === 1) {\r\n            output = mathHelper.multiplyDecimal(output, modifiers_input.hpBonus);\r\n        }\r\n\r\n        return output;\r\n    },\r\n    calcFryOutput: function (potatoes) {\r\n\r\n        // BigDouble.Round((BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 15.75) * (20 - BigDouble.Min(BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0), 31) + 16) * BigDouble.Pow(1.15, BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 16.0) * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        let log10 = mathHelper.logDecimal(potatoes, 10);\r\n        let step1 = mathHelper.subtractDecimal(mathHelper.logDecimal(potatoes, 10), 15.75);\r\n        let inter1 = log10;\r\n        inter1 = inter1.lessThan(31) ? inter1 : 31;\r\n        let step2 = mathHelper.subtractDecimal(mathHelper.createDecimal(36), inter1);\r\n        let step3 = mathHelper.pow(\r\n            mathHelper.createDecimal(1.15),\r\n            mathHelper.subtractDecimal(\r\n                log10, 16.0\r\n            )\r\n        );\r\n        return mathHelper.multiplyDecimal(step1, mathHelper.multiplyDecimal(step2, step3));\r\n    },\r\n    calcCarryOverEXP_OLD: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 1;\r\n        if (numAutos > 1) {\r\n            let individualEXP = expTick / numAutos;\r\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\r\n            if (numAutos > ticksNeededEXP) {\r\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\r\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                while (leftOver > futureReq) {\r\n                    leftOver -= futureReq;\r\n                    numLevels++;\r\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                }\r\n            }\r\n            else {\r\n                leftOver = 0;\r\n            }\r\n        }\r\n        else {\r\n\r\n            leftOver = 0;\r\n        }\r\n\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    calcCarryOverEXP: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 0;\r\n        let numEXP = plant.curExp + numAutos * expTick;\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n\r\n        //need to handle two cases: 1 auto, just go up as much as you can\r\n        // >1 autos\r\n\r\n        while (numEXP >= reqExp) {\r\n            numEXP -= reqExp;\r\n            numLevels++;\r\n            reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        }\r\n\r\n        leftOver = numEXP;\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    futureMultBD: function (plant, modifiers) {\r\n        return mathHelper.pow(\r\n            (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n            mathHelper.logDecimal(plant.created, 1.25)\r\n        );\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n        //bigsad = -1 need to make costs big decimal as well now\r\n        // console.log(`calcing future mult${plant_input.ID}`)\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        if (numAutos === 0) {\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n            plant.production = newOutPut;\r\n            return plant;\r\n        }\r\n\r\n\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus;\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n\r\n\r\n\r\n        while (remainingTime > 0) {\r\n\r\n            // plant.timeToLevel = Math.ceil((plant.reqExp - plant.curExp) / expTick) * plant.growthTime - plant.elapsedTime;\r\n            plant.timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel > remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n                plant.created = mathHelper.addDecimal(plant.created, toCreate);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, toCreate);\r\n\r\n                plant.futureMult = this.futureMultBD(plant, modifiers);\r\n\r\n                if (rankIncrease) {\r\n\r\n                    let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick * numHarvests, numAutos });\r\n                    // let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick , numAutos });\r\n                    plant.curExp = leftOver.leftOver;\r\n                    plant.Rank += leftOver.numLevels;\r\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                    // plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    plant.reqExp = leftOver.reqExp;\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick * numAutos;\r\n                    let totalExp = plant.curExp + gainedEXP;\r\n                    plant.curExp = totalExp;\r\n                }\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n\r\n        }\r\n\r\n        let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n        plant.production = newOutPut;\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n        let plant = plant_input;\r\n        let modifiers = modifiers_input;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        if (numAutos === 0) return Infinity;\r\n\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n        let ticksTillLevel = Math.ceil((remExp) / expBonus);\r\n\r\n        return ticksTillLevel * plant.growthTime - plant.elapsedTime;\r\n    },\r\n    getNextShopCosts: function (data) {\r\n\r\n        let prodCost = 1;\r\n        let prodLevel = data.FarmingShopPlantTotalProduction || data.FarmingShopPlantTotalProduction === 0 ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\r\n        let growthCost = 1;\r\n        let growthLevel = data.FarmingShopPlantGrowingSpeed || data.FarmingShopPlantGrowingSpeed === 0 ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\r\n        let expCost = 1;\r\n        let expLevel = data.FarmingShopPlantRankExpEarned || data.FarmingShopPlantRankExpEarned === 0 ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\r\n\r\n        let temp1 = mathHelper.pow(\r\n            1.05, prodLevel - 50\r\n        );\r\n        let temp2 = mathHelper.multiplyDecimal(100, temp1);\r\n        let temp3 = mathHelper.pow(temp2, prodLevel);\r\n        let temp4 = mathHelper.multiplyDecimal(100000000, temp3);\r\n        prodCost = prodLevel > 50 ? temp4 : mathHelper.multiplyDecimal(100000000, mathHelper.pow(100, prodLevel));\r\n\r\n\r\n        growthCost = 10000000000 * Math.pow(500, growthLevel);\r\n        expCost = 1000000000000000 * Math.pow(250, expLevel);\r\n        return { prodCost, growthCost, expCost };\r\n    },\r\n    calcMaxPrestige: function (plant_input) {\r\n\r\n        let start = plant_input.prestige;\r\n        let runningHarvests = 0;\r\n        let flag = true;\r\n        while (flag) {\r\n            let requiredPerPic = 10 * Math.pow(2, start);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            if (plant_input.created.greaterThanOrEqualTo(requiredHarvests)) {\r\n                start++;\r\n                runningHarvests += requiredPerPic;\r\n            }\r\n            else {\r\n                flag = false;\r\n            }\r\n        }\r\n        return start - plant_input.prestige;\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        this.resetPlantBD(plant);\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n        let runningHarvests = 0;\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n            let requiredPerPic = 10 * Math.pow(2, plant.prestige);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            let remainingHarvests = mathHelper.subtractDecimal(requiredHarvests, plant.created);\r\n            let timeTillPrestige =\r\n                mathHelper.multiplyDecimal(\r\n                    mathHelper.divideDecimal(\r\n                        remainingHarvests,\r\n                        (plant.perHarvest * numAutos)\r\n                    ),\r\n                    plant.growthTime\r\n                ).ceil().toNumber()\r\n                ;\r\n\r\n            if (numAutos === 0 && remainingHarvests.greaterThan(0)) {\r\n                prestiged = true;\r\n                totalTime = Infinity;\r\n            }\r\n            else if (timeTillPrestige <= 0) {\r\n                prestiged = true;\r\n\r\n                if (totalTime <= 0) {\r\n                    plant.prestige++;\r\n                    prestiged = false;\r\n                    runningHarvests += requiredPerPic;\r\n                }\r\n\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n\r\n                let rankRes = this.calcCarryOverEXP({ plant, numAutos, expTick: expTick * ticks })\r\n                plant.Rank += rankRes.numLevels;\r\n                plant.curExp = rankRes.leftOver;\r\n                plant.reqExp = rankRes.reqExp;\r\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return { remainingTime: totalTime, prestige: plant.prestige, prestiged: prestiged }\r\n    },\r\n    resetPlantBD: function (plant) {\r\n\r\n        plant.totalMade = plant?.totalMade?.mantissa || plant?.totalMade?.mantissa === 0 ? plant.totalMade : mathHelper.createDecimal(plant.totalMade);\r\n        plant.created = plant?.created?.mantissa || plant?.created?.mantissa === 0 ? plant.created : mathHelper.createDecimal(plant.created);\r\n        plant.production = plant?.production?.mantissa || plant?.production?.mantissa === 0 ? plant.production : mathHelper.createDecimal(plant.production);\r\n        plant.futureMult = mathHelper.createDecimal(plant.futureMult);\r\n\r\n    },\r\n    resetModifiersBD: function (modifiers) {\r\n        modifiers.shopProdBonus = modifiers?.shopProdBonus?.mantissa || modifiers?.shopProdBonus?.mantissa === 0 ? modifiers.shopProdBonus : mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = modifiers?.hpBonus?.mantissa || modifiers?.hpBonus?.mantissa === 0 ? modifiers.hpBonus : mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = modifiers?.curPotatoes?.mantissa || modifiers?.curPotatoes.mantissa === 0 ? modifiers.curPotatoes : mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = modifiers?.totalPotatoes?.mantissa || modifiers?.totalPotatoes?.mantissa === 0 ? modifiers.totalPotatoes : mathHelper.createDecimal(modifiers.totalPotatoes);\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        modifiers.nextCosts.prodCost = mathHelper.createDecimal(modifiers.nextCosts.prodCost)\r\n        modifiers.nextCosts.growthCost = mathHelper.createDecimal(modifiers.nextCosts.growthCost)\r\n        modifiers.nextCosts.expCost = mathHelper.createDecimal(modifiers.nextCosts.expCost)\r\n\r\n        let numAutos = modifiers.numAutos;\r\n        let simulationTime = modifiers.time; //time in seconds\r\n        let startTime = modifiers.startTime ? modifiers.startTime : 0;//used for consistent tick timings\r\n        const runningTime = modifiers.runningTime ? modifiers.runningTime : 0;//Used for calculating end timings if necessary\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n        const tickStart = modifiers.tickStart ? modifiers.tickStart : 0;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = modifiers.dataPointThreshold ? modifiers.dataPointThreshold : (simulationTime / tickRate) < dataPointsMax ? 1 : helper.roundInt((simulationTime / tickRate) / dataPointsMax);\r\n        let dataPointsPotatoes = [];\r\n        let dataPointsFries = [];\r\n\r\n        let totalPotatoes = modifiers.totalPotatoes;\r\n        let currPotatoes = modifiers.curPotatoes;\r\n        let prevPlantsProd = Array(plants.length).fill(0);\r\n        for (let i = 0; i < plants.length; i++) {\r\n            prevPlantsProd[i] = plants[i].production;\r\n        }\r\n\r\n        // let runTime = 0;\r\n        let i = 0;\r\n        let finalPass = false;\r\n        // tickRate = 2;\r\n        let prodMult = 1;\r\n        // if (tickRate > 2) {\r\n        //     if (tickRate >= 2592) {\r\n        //         prodMult = 0.95;\r\n        //     }\r\n        //     else if (tickRate >= 1728) {\r\n        //         prodMult = 0.95;\r\n        //     }\r\n        //     else if (tickRate >= 864) {\r\n        //         prodMult = 0.95;\r\n        //     }\r\n        //     else {\r\n        //         prodMult = 0.95;\r\n        //     }\r\n        // }\r\n        //Iterate over each second\r\n        for (; i < simulationTime / tickRate || finalPass; i++) {\r\n            //Calculate new values for each plant\r\n            let HPInitial = 0;\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n\r\n                let toAdd = j === plants.length - 1 ? 0 :\r\n                    tickRate > 1 ?\r\n                        //Some basic calculus to find total assuming linear growth\r\n                        mathHelper.multiplyDecimal(mathHelper.addDecimal(prevPlantsProd[j + 1], plants[j + 1].production), 0.5 * tickRate * prodMult)\r\n                        :\r\n                        mathHelper.multiplyDecimal(plants[j + 1].production, tickRate);\r\n                curr.totalMade = mathHelper.addDecimal(curr.totalMade, toAdd);\r\n                let res = this.calcFutureMult(curr, { ...modifiers, time: tickRate, numAuto: numAutos[j], string: false });\r\n                curr = res;\r\n                if (curr.ID === 1) {\r\n                    HPInitial = prevPlantsProd[j];\r\n                }\r\n                prevPlantsProd[j] = curr.production;\r\n\r\n            }\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n\r\n            let HPToAdd = tickRate > 1 ?\r\n                mathHelper.multiplyDecimal(mathHelper.addDecimal(HPInitial, plants[0].production), 0.5 * tickRate * prodMult)\r\n                :\r\n                plants[0].production;\r\n\r\n            totalPotatoes = mathHelper.addDecimal(totalPotatoes, HPToAdd);\r\n            currPotatoes = mathHelper.addDecimal(currPotatoes, HPToAdd);\r\n\r\n            if (modifiers.autoBuyPBC) {\r\n                let updateCosts = false;\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.prodCost) === true) {\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.prodCost);\r\n                    modifiers.shopProdLevel++;\r\n                    modifiers.shopProdBonus = this.calcShopProdBonus(modifiers, modifiers.shopProdLevel);\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.growthCost) === true) {\r\n                    // currPotatoes -= modifiers.nextCosts.growthCost;\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.growthCost);\r\n                    modifiers.shopGrowingSpeed++;\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.expCost) === true) {\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.expCost);\r\n                    modifiers.shopRankLevel++;\r\n                    modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\r\n                    updateCosts = true;\r\n                }\r\n                if (updateCosts) {\r\n                    let nextCosts = this.getNextShopCosts(modifiers);\r\n                    modifiers.nextCosts = nextCosts\r\n                }\r\n            }\r\n\r\n\r\n            if (i % dataPointThreshold === 0 && curTime >= tickStart && curTime <= (simulationTime + runningTime)) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n\r\n            if (!modifiers.skipFinal) {\r\n\r\n                if (finalPass && curTime >= (simulationTime + runningTime)) {\r\n                    break;\r\n                }\r\n                if (!finalPass && curTime < (simulationTime + runningTime)) {\r\n                    finalPass = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (i > 0 && !modifiers.skipFinal) {\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n            //Handling rare case when you have to add, but only once due to intervals duration, but only at the end, and didn't fit in the for loop above\r\n            if (dataPointsPotatoes.length === 0) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n            else if (dataPointsPotatoes[dataPointsPotatoes.length - 1].production !== totalPotatoes) {\r\n                if (curTime > (simulationTime + runningTime)) {\r\n\r\n                    let timeIncrease = curTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let increase = (totalPotatoes - dataPointsPotatoes[dataPointsPotatoes.length - 1].production) / timeIncrease;\r\n                    let trueTimeIncrease = (simulationTime + runningTime) - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let finalPotatoes = mathHelper.addDecimal(dataPointsPotatoes[dataPointsPotatoes.length - 1].production, increase * trueTimeIncrease);\r\n\r\n                    let newObj = { time: dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, production: finalPotatoes };\r\n                    dataPointsPotatoes.push(newObj);\r\n\r\n                    dataPointsFries.push({ \"time\": dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, \"fries\": farmingHelper.calcFryOutput(finalPotatoes) })\r\n\r\n                    //This means the `current` potatoes aren't updated to reflect the backwards fill/fix but it shouldn't be a big deal, and not used for anything atm\r\n                    totalPotatoes = finalPotatoes;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            totalPotatoes: totalPotatoes,\r\n            potatoeProduction: plants[0].production,\r\n            plants: plants,\r\n            nextCosts: modifiers.nextCosts,\r\n            dataPointsPotatoes: dataPointsPotatoes,\r\n            dataPointsFries: dataPointsFries,\r\n            finalModifiers: modifiers,\r\n        };\r\n    },\r\n    calcStepHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let steps = modifiers.steps;\r\n        let res = -1;\r\n        let potatoeSteps = [];\r\n        let runningTime = 0;\r\n\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = (modifiers_input.time / tickRate) < dataPointsMax ? 1 : helper.roundInt((modifiers_input.time / tickRate) / dataPointsMax);\r\n\r\n        for (let i = 0; i < steps.length; i++) {\r\n            if (steps[i].time === 0) continue;\r\n            res = this.calcHPProd(plants, {\r\n                ...modifiers,\r\n                numAutos: steps[i].autos,\r\n                time: steps[i].time,\r\n                dataPointThreshold: dataPointThreshold,\r\n                startTime: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time : 0,\r\n                runningTime: runningTime,\r\n                skipFinal: i < (steps.length - 1),\r\n                tickStart: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time + dataPointThreshold * tickRate : 0,\r\n            });\r\n            modifiers = res.finalModifiers;\r\n            modifiers.totalPotatoes = res.totalPotatoes;\r\n            plants = res.plants;\r\n            potatoeSteps = potatoeSteps.concat(res.dataPointsPotatoes);\r\n            steps[i].obj = { text: `P${steps.length - i} for ${steps[i].time}`, numAutos: steps[i].autos, time: steps[i].time }\r\n\r\n            runningTime += steps[i].time;\r\n\r\n        }\r\n        res.dataPointsPotatoes = potatoeSteps;\r\n        res.steps = steps;\r\n\r\n        return res;\r\n    },\r\n    calcAssemblyHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\r\n            let level = (data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel)\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcContagionBonus: function (data, index) {\r\n        let bonus = 1;\r\n\r\n        if (data.GrasshopperCollection[index].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[index].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[index].Level);\r\n            bonus *= Math.pow(1 + base * 0.01, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcExpeditionHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data.ExpeditionsCollection[16].Locked > 0) {\r\n            let temp = data.ExpeditionsCollection[16];\r\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\r\n            bonus = res;\r\n        }\r\n        return bonus;\r\n    },\r\n    calcUniqueHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        for (let i = 0; i < data.FarmingShopUniqueHealthy.length; i++) {\r\n            bonus *= (data.FarmingShopUniqueHealthy[i] + 1);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcFriesHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let totalFries = helper.calcPOW(data.FrenchFriesTotal);\r\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\r\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\r\n        let fryBonus = shopFryBonus * contagionFryBonus;\r\n        bonus *= 1 + totalFries * fryBonus;\r\n        return bonus;\r\n    },\r\n    calcPetHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let activePets = data.EquipedPetID;\r\n        let allPets = data.PetsCollection;\r\n\r\n        let neededMap = {};\r\n        for (let i = 0; i < activePets.length; i++) {\r\n            if (activePets[i] > 0) {\r\n                neededMap[activePets[i]] = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < allPets.length; i++) {\r\n            let curr = allPets[i];\r\n            if (curr.ID in neededMap) {\r\n                let rank = curr.Rank;\r\n                let bonusInner = 0;\r\n\r\n                for (let j = 0; j < curr.BonusList.length; j++) {\r\n                    let bonusInner = curr.BonusList[j];\r\n                    if (bonusInner.ID === 23) {\r\n\r\n                        //public double GetPetBonus(int Bonus)\r\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\r\n                        //(x1                                                     + x3) * (x5) * 0.5\r\n\r\n\r\n                        // (\r\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\r\n                        //     - 1.0\r\n                        //     + Math.Max(\r\n                        //         0.0, \r\n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\r\n                        // )\r\n\r\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\r\n                        let x2 = helper.calculateLogarithm(1.0125, curr.Level + 1);\r\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\r\n                        let x4 = helper.calculateLogarithm(1.075, curr.Rank + 1);\r\n                        let x5 = 1.0 + x4 * 0.005;\r\n\r\n                        let tot1 = (x1 + x3);\r\n                        let tot2 = tot1 * x5;\r\n                        let tot3 = tot2 * 0.5;\r\n\r\n                        bonus += tot3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcHPBonus: function (data) {\r\n\r\n\r\n        // let bonus = 1;\r\n        // let assemblyHP = this.calcAssemblyHP(data);\r\n        // bonus *= assemblyHP;\r\n\r\n        // let contagionHP = this.calcContagionBonus(data, 0);\r\n        // bonus *= contagionHP;\r\n\r\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\r\n        // bonus *= soulBonus;\r\n\r\n        // let expeditionBonus = this.calcExpeditionHP(data);\r\n        // bonus *= expeditionBonus;\r\n\r\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\r\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\r\n\r\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\r\n        // bonus *= uniqueHPBonus;\r\n\r\n        // let fryHPBonus = this.calcFriesHPBonus(data);\r\n        // bonus *= fryHPBonus;\r\n\r\n        // let petHPBonus = this.calcPetHPBonus(data);\r\n        // bonus *= petHPBonus;\r\n\r\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\r\n        // bonus *= residueHPBonus;\r\n\r\n        // //(1 + \r\n        // // milk: \r\n        // let step1 = Math.max(0,\r\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\r\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\r\n        //         :\r\n        //         0\r\n        // );\r\n\r\n\r\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\r\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\r\n        //     : 1)\r\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\r\n\r\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\r\n        // //brewing:  \r\n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\r\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\r\n        // // bonus *= milkHPBonus;\r\n\r\n        let legitBonus = helper.calcPOW(data.HealthyPotatoBonus);\r\n        return legitBonus;\r\n    }\r\n}\r\n\r\nexport default farmingHelper;","import helper from '../util/farmingHelper.js';\r\nimport mathHelper from '../util/math.js';\r\nimport generalHelper from '../util/helper.js';\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n\r\n        //for some reason the break-infinity values get changed into {mantissa: x, exponent: y} objects, revert\r\n\r\n        for (let i = 0; i < finalPlants.length; i++) {\r\n            let cur = finalPlants[i];\r\n            cur.created = mathHelper.createDecimal(cur.created);\r\n            cur.totalMade = mathHelper.createDecimal(cur.totalMade);\r\n            cur.production = mathHelper.createDecimal(cur.production);\r\n        }\r\n\r\n        let modifiers = data.modifiers;\r\n        //Same thing for modifiers\r\n        modifiers.shopProdBonus = mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = mathHelper.createDecimal(modifiers.totalPotatoes);\r\n\r\n        const mode = data.mode;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        const numSimulatedAutos = data.numSimulatedAutos ? data.numSimulatedAutos : 1;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = mathHelper.createDecimal(0);\r\n        let totalPotCombo = {};\r\n        let bestProd = mathHelper.createDecimal(0);\r\n        let bestProdCombo = {};\r\n        let bestPIC = 0;\r\n        let bestPicCombo = { potatoeProduction: 0 };\r\n        let bestPICPerc = 0;\r\n        let bestPICPercCombo = { potatoeProduction: 0 }\r\n        let dataObj = { ...modifiers, time: secondsHour * futureTime };\r\n\r\n        let top10DataPointsPotatoes = [];\r\n        let top10DataPointsFries = [];\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n\r\n            let combo = combinations[i];\r\n            dataObj.numAutos = combo;\r\n            let result;\r\n\r\n            switch (mode) {\r\n                case 'afk':\r\n\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n                case 'carlo':\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: combo });\r\n                    break;\r\n                case 'step':\r\n                    if (combo[0] === 0 && combo[1] === 0 && combo[2] === 0 && combo[3] === 0 && combo[4] === 0) {\r\n                        let bigsad = -1;\r\n                    }\r\n                    let steps = [];\r\n\r\n                    let curStep = 0;\r\n                    let numSteps = 0;\r\n                    let minTime = 0;\r\n\r\n                    for (let j = 0; j < combo.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            numSteps++;\r\n                            minTime += combo[j] * data.baseTimers[j];\r\n                        }\r\n                    }\r\n                    let remaining = (secondsHour * futureTime) - minTime;\r\n\r\n                    for (let j = 0; j < data.baseTimers.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            curStep++;\r\n                        }\r\n                        let autos = Array(data.baseTimers.length).fill(0);\r\n                        autos[j] = numSimulatedAutos;\r\n                        autos.reverse();\r\n                        let runTime = combo[j] * data.baseTimers[j];\r\n\r\n                        //If its the last plant that will be grown, give the remaining time to it\r\n                        if (curStep === numSteps && combo[j] > 0) {\r\n                            runTime += remaining;\r\n                        }\r\n                        //otherwise, round off time from other plants\r\n                        else if (combo[j] > 0) {\r\n                            let curPlant = finalPlants[finalPlants.length - 1 - j];\r\n                            let remainder = runTime % curPlant.growthTime;\r\n                            //Round down, add run time\r\n                            if (remainder <= curPlant.growthTime * 0.5) {\r\n                                runTime -= remainder;\r\n                                remaining += remainder;\r\n                            }\r\n                            //Round up, reduce run time\r\n                            else {\r\n                                let diff = curPlant.growthTime - remainder;\r\n                                //Only subtract time from final plant IF there is enough remaining time\r\n                                if (remaining >= diff) {\r\n                                    runTime += diff;\r\n                                    remaining -= diff\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        steps.push({\r\n                            time: generalHelper.roundInt(runTime),\r\n                            autos: autos\r\n                        })\r\n                    }\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: steps });\r\n                    break;\r\n                default:\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n            }\r\n\r\n            let picGained = 0;\r\n            let picPercent = 0;\r\n            let temp;\r\n\r\n            for (let j = 0; j < result.plants.length; j++) {\r\n                let picIncrease = helper.calcMaxPrestige(result.plants[j]);\r\n                picGained += picIncrease;\r\n                picPercent += (Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige));\r\n                result.plants[j].picIncrease = picIncrease;\r\n            }\r\n\r\n            if (result.totalPotatoes.greaterThanOrEqualTo(totalPot) === true) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n\r\n                top10DataPointsPotatoes.unshift({ data: result.dataPointsPotatoes, result: totalPot });\r\n                if (top10DataPointsPotatoes.length > 10) {\r\n                    top10DataPointsPotatoes.pop();\r\n                }\r\n                top10DataPointsFries.unshift({ data: result.dataPointsFries, result: totalPot });\r\n                if (top10DataPointsFries.length > 10) {\r\n                    top10DataPointsFries.pop();\r\n                }\r\n            }\r\n\r\n\r\n            if (result.potatoeProduction.greaterThanOrEqualTo(bestProd) === true) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            if (picGained > bestPIC) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                bestPIC = picGained;\r\n                bestPicCombo = temp;\r\n            }\r\n            else if (picGained === bestPIC) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPicCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                    bestPIC = picGained;\r\n                    bestPicCombo = temp;\r\n                }\r\n            }\r\n            if (picPercent > bestPICPerc) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                bestPICPerc = picPercent;\r\n                bestPICPercCombo = temp;\r\n            }\r\n            else if (picPercent === bestPICPerc) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPICPercCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                    bestPICPerc = picPercent;\r\n                    bestPICPercCombo = temp;\r\n                }\r\n            }\r\n\r\n\r\n            // eslint-disable-next-line no-restricted-globals\r\n            self.postMessage({\r\n                update: true,\r\n                temp: temp\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo,\r\n            bestPicCombo: bestPicCombo,\r\n            bestPICPercCombo: bestPICPercCombo,\r\n            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            top10DataPointsFries: top10DataPointsFries\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"names":["roundTwoDecimal","number","Math","round","Number","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","secondsToStringWithS","seconds","numHours","numMinutes","numSeconds","string","floor","this","concat","secondsToString","bonusColorMap","color","createDecimal","Decimal","multiplyDecimal","a","b","times","divideDecimal","dividedBy","addDecimal","plus","subtractDecimal","minus","logDecimal","exp","farmingHelper","findMultipliersWithMinPercentage","sum","numbers","minPercentage","multipliers","count","backtrack","index","currentSum","currentMultipliers","length","max","multiplier","productSum","reduce","acc","i","push","_toConsumableArray","console","calcGrowthTime","plant","modifiers","TimeNeeded","prestigeBonus","shopGrowingSpeed","petPlantCombo","contagionPlantGrowth","calcPlantHarvest","helper","Rank","prestige","contagionHarvest","assemblyPlantharvest","calcShopProdBonus","modifiers_input","shopLevel","FarmingShopPlantTotalProduction","mathHelper","calcProdOutput","plant_input","TotalCreated","totalMade","shopProdBonus","created","manualHarvestFormula","PlantTotalProductionBonus","contagionPlantProd","plantMult","futureMult","output","ID","hpBonus","calcFryOutput","potatoes","log10","step1","inter1","lessThan","step2","step3","calcCarryOverEXP_OLD","_ref","numAutos","expTick","leftOver","numLevels","individualEXP","ticksNeededEXP","ceil","reqExp","curExp","futureReq","calcCarryOverEXP","_ref2","numEXP","futureMultBD","calcFutureMult","JSON","parse","stringify","remainingTime","time","numAuto","newOutPut","production","expBonus","growthTime","timeToLevel","calcTimeTillLevel","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","gainedEXP","totalExp","Infinity","remExp","getNextShopCosts","data","prodLevel","shopProdLevel","growthLevel","FarmingShopPlantGrowingSpeed","expLevel","FarmingShopPlantRankExpEarned","shopRankLevel","temp1","temp2","temp3","temp4","prodCost","growthCost","expCost","calcMaxPrestige","start","runningHarvests","flag","requiredPerPic","requiredHarvests","greaterThanOrEqualTo","calcTimeTillPrestige","resetPlantBD","resetModifiersBD","prestiged","totalTime","remainingHarvests","timeTillPrestige","toNumber","greaterThan","ticks","rankRes","_plant$totalMade","_plant$totalMade2","_plant$created","_plant$created2","_plant$production","_plant$production2","_modifiers$shopProdBo","_modifiers$shopProdBo2","_modifiers$hpBonus","_modifiers$hpBonus2","_modifiers$curPotatoe","_modifiers$totalPotat","_modifiers$totalPotat2","curPotatoes","totalPotatoes","calcHPProd","plants_input","plants","nextCosts","simulationTime","startTime","runningTime","dataPointsMax","maxSteps","tickStart","tickRate","dataPointThreshold","dataPointsPotatoes","dataPointsFries","currPotatoes","prevPlantsProd","Array","fill","finalPass","HPInitial","j","curr","toAdd","_objectSpread","curTime","HPToAdd","autoBuyPBC","updateCosts","shopRankEXP","skipFinal","timeIncrease","increase","trueTimeIncrease","finalPotatoes","newObj","potatoeProduction","finalModifiers","calcStepHPProd","steps","res","potatoeSteps","autos","obj","text","calcAssemblyHP","bonus","AssemblerCollection","BonusList","StartingLevel","Level","gain","Gain","level","calcContagionBonus","GrasshopperCollection","Locked","BaseBonus","calcExpeditionHP","ExpeditionsCollection","temp","BonusPower","Room","calcUniqueHPBonus","FarmingShopUniqueHealthy","calcFriesHPBonus","FrenchFriesTotal","FarmingShopFriesHealthyBonus","calcPetHPBonus","activePets","EquipedPetID","allPets","PetsCollection","neededMap","bonusInner","x1","x2","calcHPBonus","HealthyPotatoBonus","self","onmessage","_ref$data","id","data1","finalPlants","cur","mode","futureTime","numSimulatedAutos","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","bestPIC","bestPicCombo","bestPICPerc","bestPICPercCombo","dataObj","top10DataPointsPotatoes","top10DataPointsFries","end","combo","result","curStep","numSteps","minTime","baseTimers","remaining","reverse","runTime","curPlant","remainder","diff","generalHelper","picGained","picPercent","picIncrease","unshift","pop","picGain","picStats","picLevel","postMessage","update","success","err"],"sourceRoot":""}