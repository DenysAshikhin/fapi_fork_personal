{"version":3,"file":"static/js/359.2b09be2e.chunk.js","mappings":"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","sources":["util/helper.js","util/math.js","util/farmingHelper.js","farming/farmingWorker.js"],"sourcesContent":["var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = this.roundInt((seconds % 3600) % 60);\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`\r\n        }\r\n        else {\r\n            string = string + `0s`;\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        1001: { color: 'maroon' },\r\n        1002: { color: 'orange' },\r\n        1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import Decimal from 'break_infinity.js';\r\nvar helper = {\r\n    createDecimal: function (number) {\r\n        let deci = number.mantissa || number.mantissa === 0 ? new Decimal(`${number.mantissa}e${number.exponent}`) : new Decimal(number);\r\n\r\n        return deci;\r\n    },\r\n    multiplyDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.times(b);\r\n    },\r\n    divideDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.dividedBy(b);\r\n    },\r\n    addDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.plus(b);\r\n    },\r\n    subtractDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.minus(b);\r\n    },\r\n    logDecimal: function (number, base) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return this.createDecimal(number.log(base));\r\n    },\r\n    pow: function (number, exp) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return number.pow(exp);\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './helper.js';\r\nimport mathHelper from './math.js';\r\n\r\nvar farmingHelper = {\r\n    findMultipliersWithMinPercentage: function (sum, numbers, minPercentage) {\r\n        const multipliers = [];\r\n        let count = 0;\r\n\r\n        function backtrack(index, currentSum, currentMultipliers) {\r\n            count++;\r\n\r\n            if (index === numbers.length) {\r\n                const productSum = currentMultipliers.reduce((acc, multiplier, i) => acc + multiplier * numbers[i], 0);\r\n                if (productSum >= minPercentage * sum) {\r\n                    multipliers.push([...currentMultipliers]);\r\n                }\r\n                return;\r\n            }\r\n            let max = Math.floor((sum - currentSum) / numbers[index]);\r\n            for (let multiplier = 0; multiplier <= max; multiplier++) {\r\n                currentMultipliers[index] = multiplier;\r\n                let tempSum = currentSum + multiplier * numbers[index];\r\n                if (tempSum < sum) {\r\n                    backtrack(index + 1, currentSum + multiplier * numbers[index], currentMultipliers);\r\n                }\r\n            }\r\n        }\r\n\r\n        backtrack(0, 0, []);\r\n        console.log(count);\r\n        return multipliers;\r\n    },\r\n    calcGrowthTime: function (plant, modifiers) {\r\n        let num = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        return num < 10 ? 10 : num;\r\n    },\r\n    calcPlantHarvest: function (plant, modifiers) {\r\n        return helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.contagionHarvest;\r\n    },\r\n    calcShopProdBonus: function (modifiers_input, shopLevel) {\r\n        shopLevel = shopLevel ? shopLevel : modifiers_input.FarmingShopPlantTotalProduction;\r\n        return mathHelper.pow(1.25, shopLevel);\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        //note bigsad = -1 -> need to take into account assumbly in the future\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(shopProdBonus, assemblyBonus), modifiers_input.contagionPlantProd);\r\n\r\n        let plantMult = plant_input.futureMult;\r\n\r\n        let output = mathHelper.multiplyDecimal(\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.multiplyDecimal(\r\n                    TotalCreated, plantMult),\r\n                PlantTotalProductionBonus),\r\n            mathHelper.createDecimal(Math.pow(1.02, prestige))\r\n        )\r\n            ;\r\n        if (plant_input.ID === 1) {\r\n            output = mathHelper.multiplyDecimal(output, modifiers_input.hpBonus);\r\n        }\r\n\r\n        return output;\r\n    },\r\n    calcFryOutput: function (potatoes) {\r\n\r\n        // BigDouble.Round((BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 15.75) * (20 - BigDouble.Min(BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0), 31) + 16) * BigDouble.Pow(1.15, BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 16.0) * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        let log10 = mathHelper.logDecimal(potatoes, 10);\r\n        let step1 = mathHelper.subtractDecimal(mathHelper.logDecimal(potatoes, 10), 15.75);\r\n        let inter1 = log10;\r\n        inter1 = inter1.lessThan(31) ? inter1 : 31;\r\n        let step2 = mathHelper.subtractDecimal(mathHelper.createDecimal(36), inter1);\r\n        let step3 = mathHelper.pow(\r\n            mathHelper.createDecimal(1.15),\r\n            mathHelper.subtractDecimal(\r\n                log10, 16.0\r\n            )\r\n        );\r\n        return mathHelper.multiplyDecimal(step1, mathHelper.multiplyDecimal(step2, step3));\r\n    },\r\n    calcCarryOverEXP_OLD: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 1;\r\n        if (numAutos > 1) {\r\n            let individualEXP = expTick / numAutos;\r\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\r\n            if (numAutos > ticksNeededEXP) {\r\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\r\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                while (leftOver > futureReq) {\r\n                    leftOver -= futureReq;\r\n                    numLevels++;\r\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                }\r\n            }\r\n            else {\r\n                leftOver = 0;\r\n            }\r\n        }\r\n        else {\r\n\r\n            leftOver = 0;\r\n        }\r\n\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    calcCarryOverEXP: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 0;\r\n        let numEXP = plant.curExp + numAutos * expTick;\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n\r\n        //need to handle two cases: 1 auto, just go up as much as you can\r\n        // >1 autos\r\n\r\n        while (numEXP >= reqExp) {\r\n            numEXP -= reqExp;\r\n            numLevels++;\r\n            reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        }\r\n\r\n        leftOver = numEXP;\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    futureMultBD: function (plant, modifiers) {\r\n        return mathHelper.pow(\r\n            (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n            mathHelper.logDecimal(plant.created, 1.25)\r\n        );\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n        //bigsad = -1 need to make costs big decimal as well now\r\n        // console.log(`calcing future mult${plant_input.ID}`)\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        if (numAutos === 0) {\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n            plant.production = newOutPut;\r\n            return plant;\r\n        }\r\n\r\n\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus;\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n\r\n\r\n\r\n        while (remainingTime > 0) {\r\n\r\n            // plant.timeToLevel = Math.ceil((plant.reqExp - plant.curExp) / expTick) * plant.growthTime - plant.elapsedTime;\r\n            plant.timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel > remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n                plant.created = mathHelper.addDecimal(plant.created, toCreate);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, toCreate);\r\n\r\n                plant.futureMult = this.futureMultBD(plant, modifiers);\r\n\r\n                if (rankIncrease) {\r\n\r\n                    let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick * numHarvests, numAutos });\r\n                    // let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick , numAutos });\r\n                    plant.curExp = leftOver.leftOver;\r\n                    plant.Rank += leftOver.numLevels;\r\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                    // plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    plant.reqExp = leftOver.reqExp;\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick * numAutos;\r\n                    let totalExp = plant.curExp + gainedEXP;\r\n                    plant.curExp = totalExp;\r\n                }\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n\r\n        }\r\n\r\n        let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n        plant.production = newOutPut;\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n        let plant = plant_input;\r\n        let modifiers = modifiers_input;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        if (numAutos === 0) return Infinity;\r\n\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n        let ticksTillLevel = Math.ceil((remExp) / expBonus);\r\n\r\n        return ticksTillLevel * plant.growthTime - plant.elapsedTime;\r\n    },\r\n    getNextShopCosts: function (data) {\r\n\r\n        let prodCost = 1;\r\n        let prodLevel = data.FarmingShopPlantTotalProduction || data.FarmingShopPlantTotalProduction === 0 ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\r\n        let growthCost = 1;\r\n        let growthLevel = data.FarmingShopPlantGrowingSpeed || data.FarmingShopPlantGrowingSpeed === 0 ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\r\n        let expCost = 1;\r\n        let expLevel = data.FarmingShopPlantRankExpEarned || data.FarmingShopPlantRankExpEarned === 0 ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\r\n\r\n        let temp1 = mathHelper.pow(\r\n            1.05, prodLevel - 50\r\n        );\r\n        let temp2 = mathHelper.multiplyDecimal(100, temp1);\r\n        let temp3 = mathHelper.pow(temp2, prodLevel);\r\n        let temp4 = mathHelper.multiplyDecimal(100000000, temp3);\r\n        prodCost = prodLevel > 50 ? temp4 : mathHelper.multiplyDecimal(100000000, mathHelper.pow(100, prodLevel));\r\n\r\n\r\n        growthCost = 10000000000 * Math.pow(500, growthLevel);\r\n        expCost = 1000000000000000 * Math.pow(250, expLevel);\r\n        return { prodCost, growthCost, expCost };\r\n    },\r\n    calcMaxPrestige: function (plant_input) {\r\n\r\n        let start = plant_input.prestige;\r\n        let runningHarvests = 0;\r\n        let flag = true;\r\n        while (flag) {\r\n            let requiredPerPic = 10 * Math.pow(2, start);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            if (plant_input.created.greaterThanOrEqualTo(requiredHarvests)) {\r\n                start++;\r\n                runningHarvests += requiredPerPic;\r\n            }\r\n            else {\r\n                flag = false;\r\n            }\r\n        }\r\n        return start - plant_input.prestige;\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        this.resetPlantBD(plant);\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n        let runningHarvests = 0;\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n            let requiredPerPic = 10 * Math.pow(2, plant.prestige);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            let remainingHarvests = mathHelper.subtractDecimal(requiredHarvests, plant.created);\r\n            let timeTillPrestige =\r\n                mathHelper.multiplyDecimal(\r\n                    mathHelper.divideDecimal(\r\n                        remainingHarvests,\r\n                        (plant.perHarvest * numAutos)\r\n                    ),\r\n                    plant.growthTime\r\n                ).ceil().toNumber()\r\n                ;\r\n\r\n            if (numAutos === 0 && remainingHarvests.greaterThan(0)) {\r\n                prestiged = true;\r\n                totalTime = Infinity;\r\n            }\r\n            else if (timeTillPrestige <= 0) {\r\n                prestiged = true;\r\n\r\n                if (totalTime <= 0) {\r\n                    plant.prestige++;\r\n                    prestiged = false;\r\n                    runningHarvests += requiredPerPic;\r\n                }\r\n\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n\r\n                let rankRes = this.calcCarryOverEXP({ plant, numAutos, expTick: expTick * ticks })\r\n                plant.Rank += rankRes.numLevels;\r\n                plant.curExp = rankRes.leftOver;\r\n                plant.reqExp = rankRes.reqExp;\r\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return { remainingTime: totalTime, prestige: plant.prestige, prestiged: prestiged }\r\n    },\r\n    resetPlantBD: function (plant) {\r\n\r\n        plant.totalMade = plant?.totalMade?.mantissa || plant?.totalMade?.mantissa === 0 ? plant.totalMade : mathHelper.createDecimal(plant.totalMade);\r\n        plant.created = plant?.created?.mantissa || plant?.created?.mantissa === 0 ? plant.created : mathHelper.createDecimal(plant.created);\r\n        plant.production = plant?.production?.mantissa || plant?.production?.mantissa === 0 ? plant.production : mathHelper.createDecimal(plant.production);\r\n        plant.futureMult = mathHelper.createDecimal(plant.futureMult);\r\n\r\n    },\r\n    resetModifiersBD: function (modifiers) {\r\n        modifiers.shopProdBonus = modifiers?.shopProdBonus?.mantissa || modifiers?.shopProdBonus?.mantissa === 0 ? modifiers.shopProdBonus : mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = modifiers?.hpBonus?.mantissa || modifiers?.hpBonus?.mantissa === 0 ? modifiers.hpBonus : mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = modifiers?.curPotatoes?.mantissa || modifiers?.curPotatoes.mantissa === 0 ? modifiers.curPotatoes : mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = modifiers?.totalPotatoes?.mantissa || modifiers?.totalPotatoes?.mantissa === 0 ? modifiers.totalPotatoes : mathHelper.createDecimal(modifiers.totalPotatoes);\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        modifiers.nextCosts.prodCost = mathHelper.createDecimal(modifiers.nextCosts.prodCost)\r\n        modifiers.nextCosts.growthCost = mathHelper.createDecimal(modifiers.nextCosts.growthCost)\r\n        modifiers.nextCosts.expCost = mathHelper.createDecimal(modifiers.nextCosts.expCost)\r\n\r\n        let numAutos = modifiers.numAutos;\r\n        let simulationTime = modifiers.time; //time in seconds\r\n        let startTime = modifiers.startTime ? modifiers.startTime : 0;//used for consistent tick timings\r\n        const runningTime = modifiers.runningTime ? modifiers.runningTime : 0;//Used for calculating end timings if necessary\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n        const tickStart = modifiers.tickStart ? modifiers.tickStart : 0;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = modifiers.dataPointThreshold ? modifiers.dataPointThreshold : (simulationTime / tickRate) < dataPointsMax ? 1 : helper.roundInt((simulationTime / tickRate) / dataPointsMax);\r\n        let dataPointsPotatoes = [];\r\n        let dataPointsFries = [];\r\n\r\n        let totalPotatoes = modifiers.totalPotatoes;\r\n        let currPotatoes = modifiers.curPotatoes;\r\n        let prevPlantsProd = Array(plants.length).fill(0);\r\n        for (let i = 0; i < plants.length; i++) {\r\n            prevPlantsProd[i] = plants[i].production;\r\n        }\r\n\r\n        // let runTime = 0;\r\n        let i = 0;\r\n        let finalPass = false;\r\n\r\n        //Iterate over each second\r\n        for (; i < simulationTime / tickRate || finalPass; i++) {\r\n            //Calculate new values for each plant\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n\r\n                let toAdd = j === plants.length - 1 ? 0 :\r\n                    // plants[j + 1].production * tickRate\r\n                    tickRate > 1 ?\r\n                        //Some basic calculus to find total assuming linear growth\r\n                        mathHelper.multiplyDecimal(mathHelper.addDecimal(prevPlantsProd[j + 1], plants[j + 1].production), 0.5 * tickRate)\r\n                        :\r\n                        mathHelper.multiplyDecimal(plants[j + 1].production, tickRate);\r\n                curr.totalMade = mathHelper.addDecimal(curr.totalMade, toAdd);\r\n                let res = this.calcFutureMult(curr, { ...modifiers, time: tickRate, numAuto: numAutos[j], string: false });\r\n                plants[j] = res;\r\n                prevPlantsProd[j] = plants[j].production;\r\n            }\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n\r\n\r\n\r\n            totalPotatoes = mathHelper.addDecimal(totalPotatoes, mathHelper.multiplyDecimal(plants[0].production, tickRate));\r\n            currPotatoes = mathHelper.addDecimal(currPotatoes, mathHelper.multiplyDecimal(plants[0].production, tickRate));\r\n\r\n            if (modifiers.autoBuyPBC) {\r\n                let updateCosts = false;\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.prodCost) === true) {\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.prodCost);\r\n                    modifiers.shopProdLevel++;\r\n                    modifiers.shopProdBonus = this.calcShopProdBonus(modifiers, modifiers.shopProdLevel);\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.growthCost) === true) {\r\n                    // currPotatoes -= modifiers.nextCosts.growthCost;\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.growthCost);\r\n                    modifiers.shopGrowingSpeed++;\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.expCost) === true) {\r\n                    currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.expCost);\r\n                    modifiers.shopRankLevel++;\r\n                    modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\r\n                    updateCosts = true;\r\n                }\r\n                if (updateCosts) {\r\n                    let nextCosts = this.getNextShopCosts(modifiers);\r\n                    modifiers.nextCosts = nextCosts\r\n                }\r\n            }\r\n\r\n\r\n            if (i % dataPointThreshold === 0 && curTime >= tickStart && curTime <= (simulationTime + runningTime)) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n\r\n            if (!modifiers.skipFinal) {\r\n\r\n                if (finalPass && curTime >= (simulationTime + runningTime)) {\r\n                    break;\r\n                }\r\n                if (!finalPass && curTime < (simulationTime + runningTime)) {\r\n                    finalPass = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (i > 0 && !modifiers.skipFinal) {\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n            //Handling rare case when you have to add, but only once due to intervals duration, but only at the end, and didn't fit in the for loop above\r\n            if (dataPointsPotatoes.length === 0) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n            else if (dataPointsPotatoes[dataPointsPotatoes.length - 1].production !== totalPotatoes) {\r\n                if (curTime > (simulationTime + runningTime)) {\r\n\r\n                    let timeIncrease = curTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let increase = (totalPotatoes - dataPointsPotatoes[dataPointsPotatoes.length - 1].production) / timeIncrease;\r\n                    let trueTimeIncrease = (simulationTime + runningTime) - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let finalPotatoes = mathHelper.addDecimal(dataPointsPotatoes[dataPointsPotatoes.length - 1].production, increase * trueTimeIncrease);\r\n\r\n                    let newObj = { time: dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, production: finalPotatoes };\r\n                    dataPointsPotatoes.push(newObj);\r\n\r\n                    dataPointsFries.push({ \"time\": dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, \"fries\": farmingHelper.calcFryOutput(finalPotatoes) })\r\n\r\n                    //This means the `current` potatoes aren't updated to reflect the backwards fill/fix but it shouldn't be a big deal, and not used for anything atm\r\n                    totalPotatoes = finalPotatoes;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            totalPotatoes: totalPotatoes,\r\n            potatoeProduction: plants[0].production,\r\n            plants: plants,\r\n            nextCosts: modifiers.nextCosts,\r\n            dataPointsPotatoes: dataPointsPotatoes,\r\n            dataPointsFries: dataPointsFries,\r\n            finalModifiers: modifiers,\r\n        };\r\n    },\r\n    calcStepHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let steps = modifiers.steps;\r\n        let res = -1;\r\n        let potatoeSteps = [];\r\n        let runningTime = 0;\r\n\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = (modifiers_input.time / tickRate) < dataPointsMax ? 1 : helper.roundInt((modifiers_input.time / tickRate) / dataPointsMax);\r\n\r\n        for (let i = 0; i < steps.length; i++) {\r\n            if (steps[i].time === 0) continue;\r\n            res = this.calcHPProd(plants, {\r\n                ...modifiers,\r\n                numAutos: steps[i].autos,\r\n                time: steps[i].time,\r\n                dataPointThreshold: dataPointThreshold,\r\n                startTime: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time : 0,\r\n                runningTime: runningTime,\r\n                skipFinal: i < (steps.length - 1),\r\n                tickStart: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time + dataPointThreshold * tickRate : 0,\r\n            });\r\n            modifiers = res.finalModifiers;\r\n            modifiers.totalPotatoes = res.totalPotatoes;\r\n            plants = res.plants;\r\n            potatoeSteps = potatoeSteps.concat(res.dataPointsPotatoes);\r\n            steps[i].obj = { text: `P${steps.length - i} for ${steps[i].time}`, numAutos: steps[i].autos, time: steps[i].time }\r\n\r\n            runningTime += steps[i].time;\r\n\r\n        }\r\n        res.dataPointsPotatoes = potatoeSteps;\r\n        res.steps = steps;\r\n\r\n        return res;\r\n    },\r\n    calcAssemblyHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\r\n            let level = (data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel)\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcContagionBonus: function (data, index) {\r\n        let bonus = 1;\r\n\r\n        if (data.GrasshopperCollection[index].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[index].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[index].Level);\r\n            bonus *= Math.pow(1 + base * 0.01, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcExpeditionHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data.ExpeditionsCollection[16].Locked > 0) {\r\n            let temp = data.ExpeditionsCollection[16];\r\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\r\n            bonus = res;\r\n        }\r\n        return bonus;\r\n    },\r\n    calcUniqueHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        for (let i = 0; i < data.FarmingShopUniqueHealthy.length; i++) {\r\n            bonus *= (data.FarmingShopUniqueHealthy[i] + 1);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcFriesHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let totalFries = helper.calcPOW(data.FrenchFriesTotal);\r\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\r\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\r\n        let fryBonus = shopFryBonus * contagionFryBonus;\r\n        bonus *= 1 + totalFries * fryBonus;\r\n        return bonus;\r\n    },\r\n    calcPetHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let activePets = data.EquipedPetID;\r\n        let allPets = data.PetsCollection;\r\n\r\n        let neededMap = {};\r\n        for (let i = 0; i < activePets.length; i++) {\r\n            if (activePets[i] > 0) {\r\n                neededMap[activePets[i]] = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < allPets.length; i++) {\r\n            let curr = allPets[i];\r\n            if (curr.ID in neededMap) {\r\n                let rank = curr.Rank;\r\n                let bonusInner = 0;\r\n\r\n                for (let j = 0; j < curr.BonusList.length; j++) {\r\n                    let bonusInner = curr.BonusList[j];\r\n                    if (bonusInner.ID === 23) {\r\n\r\n                        //public double GetPetBonus(int Bonus)\r\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\r\n                        //(x1                                                     + x3) * (x5) * 0.5\r\n\r\n\r\n                        // (\r\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\r\n                        //     - 1.0\r\n                        //     + Math.Max(\r\n                        //         0.0, \r\n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\r\n                        // )\r\n\r\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\r\n                        let x2 = helper.calculateLogarithm(1.0125, curr.Level + 1);\r\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\r\n                        let x4 = helper.calculateLogarithm(1.075, curr.Rank + 1);\r\n                        let x5 = 1.0 + x4 * 0.005;\r\n\r\n                        let tot1 = (x1 + x3);\r\n                        let tot2 = tot1 * x5;\r\n                        let tot3 = tot2 * 0.5;\r\n\r\n                        bonus += tot3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcHPBonus: function (data) {\r\n\r\n\r\n        // let bonus = 1;\r\n        // let assemblyHP = this.calcAssemblyHP(data);\r\n        // bonus *= assemblyHP;\r\n\r\n        // let contagionHP = this.calcContagionBonus(data, 0);\r\n        // bonus *= contagionHP;\r\n\r\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\r\n        // bonus *= soulBonus;\r\n\r\n        // let expeditionBonus = this.calcExpeditionHP(data);\r\n        // bonus *= expeditionBonus;\r\n\r\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\r\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\r\n\r\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\r\n        // bonus *= uniqueHPBonus;\r\n\r\n        // let fryHPBonus = this.calcFriesHPBonus(data);\r\n        // bonus *= fryHPBonus;\r\n\r\n        // let petHPBonus = this.calcPetHPBonus(data);\r\n        // bonus *= petHPBonus;\r\n\r\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\r\n        // bonus *= residueHPBonus;\r\n\r\n        // //(1 + \r\n        // // milk: \r\n        // let step1 = Math.max(0,\r\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\r\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\r\n        //         :\r\n        //         0\r\n        // );\r\n\r\n\r\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\r\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\r\n        //     : 1)\r\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\r\n\r\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\r\n        // //brewing:  \r\n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\r\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\r\n        // // bonus *= milkHPBonus;\r\n\r\n        let legitBonus = helper.calcPOW(data.HealthyPotatoBonus);\r\n        return legitBonus;\r\n    }\r\n}\r\n\r\nexport default farmingHelper;","import helper from '../util/farmingHelper.js';\r\nimport mathHelper from '../util/math.js';\r\nimport generalHelper from '../util/helper.js';\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n\r\n        //for some reason the break-infinity values get changed into {mantissa: x, exponent: y} objects, revert\r\n\r\n        for (let i = 0; i < finalPlants.length; i++) {\r\n            let cur = finalPlants[i];\r\n            cur.created = mathHelper.createDecimal(cur.created);\r\n            cur.totalMade = mathHelper.createDecimal(cur.totalMade);\r\n            cur.production = mathHelper.createDecimal(cur.production);\r\n        }\r\n\r\n        let modifiers = data.modifiers;\r\n        //Same thing for modifiers\r\n        modifiers.shopProdBonus = mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = mathHelper.createDecimal(modifiers.totalPotatoes);\r\n\r\n        const mode = data.mode;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        const numSimulatedAutos = data.numSimulatedAutos ? data.numSimulatedAutos : 1;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = mathHelper.createDecimal(0);\r\n        let totalPotCombo = {};\r\n        let bestProd = mathHelper.createDecimal(0);\r\n        let bestProdCombo = {};\r\n        let bestPIC = 0;\r\n        let bestPicCombo = { potatoeProduction: 0 };\r\n        let bestPICPerc = 0;\r\n        let bestPICPercCombo = { potatoeProduction: 0 }\r\n        let dataObj = { ...modifiers, time: secondsHour * futureTime };\r\n\r\n        let top10DataPointsPotatoes = [];\r\n        let top10DataPointsFries = [];\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n\r\n            let combo = combinations[i];\r\n            dataObj.numAutos = combo;\r\n            let result;\r\n\r\n            switch (mode) {\r\n                case 'afk':\r\n\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n                case 'carlo':\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: combo });\r\n                    break;\r\n                case 'step':\r\n                    if (combo[0] === 0 && combo[1] === 0 && combo[2] === 0 && combo[3] === 0 && combo[4] === 0) {\r\n                        let bigsad = -1;\r\n                    }\r\n                    let steps = [];\r\n\r\n                    let curStep = 0;\r\n                    let numSteps = 0;\r\n                    let minTime = 0;\r\n\r\n                    for (let j = 0; j < combo.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            numSteps++;\r\n                            minTime += combo[j] * data.baseTimers[j];\r\n                        }\r\n                    }\r\n                    let remaining = (secondsHour * futureTime) - minTime;\r\n\r\n                    for (let j = 0; j < data.baseTimers.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            curStep++;\r\n                        }\r\n                        let autos = Array(data.baseTimers.length).fill(0);\r\n                        autos[j] = numSimulatedAutos;\r\n                        autos.reverse();\r\n                        let runTime = combo[j] * data.baseTimers[j];\r\n\r\n                        //If its the last plant that will be grown, give the remaining time to it\r\n                        if (curStep === numSteps && combo[j] > 0) {\r\n                            runTime += remaining;\r\n                        }\r\n                        //otherwise, round off time from other plants\r\n                        else if (combo[j] > 0) {\r\n                            let curPlant = finalPlants[finalPlants.length - 1 - j];\r\n                            let remainder = runTime % curPlant.growthTime;\r\n                            //Round down, add run time\r\n                            if (remainder <= curPlant.growthTime * 0.5) {\r\n                                runTime -= remainder;\r\n                                remaining += remainder;\r\n                            }\r\n                            //Round up, reduce run time\r\n                            else {\r\n                                let diff = curPlant.growthTime - remainder;\r\n                                //Only subtract time from final plant IF there is enough remaining time\r\n                                if (remaining >= diff) {\r\n                                    runTime += diff;\r\n                                    remaining -= diff\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        steps.push({\r\n                            time: generalHelper.roundInt(runTime),\r\n                            autos: autos\r\n                        })\r\n                    }\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: steps });\r\n                    break;\r\n                default:\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n            }\r\n\r\n            let picGained = 0;\r\n            let picPercent = 0;\r\n            let temp;\r\n\r\n            for (let j = 0; j < result.plants.length; j++) {\r\n                let picIncrease = helper.calcMaxPrestige(result.plants[j]);\r\n                picGained += picIncrease;\r\n                picPercent += (Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige));\r\n                result.plants[j].picIncrease = picIncrease;\r\n            }\r\n\r\n            if (result.totalPotatoes.greaterThanOrEqualTo(totalPot) === true) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n\r\n                top10DataPointsPotatoes.unshift({ data: result.dataPointsPotatoes, result: totalPot });\r\n                if (top10DataPointsPotatoes.length > 10) {\r\n                    top10DataPointsPotatoes.pop();\r\n                }\r\n                top10DataPointsFries.unshift({ data: result.dataPointsFries, result: totalPot });\r\n                if (top10DataPointsFries.length > 10) {\r\n                    top10DataPointsFries.pop();\r\n                }\r\n            }\r\n\r\n\r\n            if (result.potatoeProduction.greaterThanOrEqualTo(bestProd) === true) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            if (picGained > bestPIC) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                bestPIC = picGained;\r\n                bestPicCombo = temp;\r\n            }\r\n            else if (picGained === bestPIC) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPicCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                    bestPIC = picGained;\r\n                    bestPicCombo = temp;\r\n                }\r\n            }\r\n            if (picPercent > bestPICPerc) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                bestPICPerc = picPercent;\r\n                bestPICPercCombo = temp;\r\n            }\r\n            else if (picPercent === bestPICPerc) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPICPercCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                    bestPICPerc = picPercent;\r\n                    bestPICPercCombo = temp;\r\n                }\r\n            }\r\n\r\n\r\n            // eslint-disable-next-line no-restricted-globals\r\n            self.postMessage({\r\n                update: true,\r\n                temp: temp\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo,\r\n            bestPicCombo: bestPicCombo,\r\n            bestPICPercCombo: bestPICPercCombo,\r\n            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            top10DataPointsFries: top10DataPointsFries\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"names":["roundTwoDecimal","number","Math","round","Number","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","secondsToStringWithS","seconds","numHours","numMinutes","numSeconds","string","floor","this","concat","secondsToString","bonusColorMap","color","createDecimal","Decimal","multiplyDecimal","a","b","times","divideDecimal","dividedBy","addDecimal","plus","subtractDecimal","minus","logDecimal","exp","farmingHelper","findMultipliersWithMinPercentage","sum","numbers","minPercentage","multipliers","count","backtrack","index","currentSum","currentMultipliers","length","max","multiplier","productSum","reduce","acc","i","push","_toConsumableArray","console","calcGrowthTime","plant","modifiers","TimeNeeded","prestigeBonus","shopGrowingSpeed","petPlantCombo","contagionPlantGrowth","calcPlantHarvest","helper","Rank","prestige","contagionHarvest","calcShopProdBonus","modifiers_input","shopLevel","FarmingShopPlantTotalProduction","mathHelper","calcProdOutput","plant_input","TotalCreated","totalMade","shopProdBonus","created","manualHarvestFormula","PlantTotalProductionBonus","contagionPlantProd","plantMult","futureMult","output","ID","hpBonus","calcFryOutput","potatoes","log10","step1","inter1","lessThan","step2","step3","calcCarryOverEXP_OLD","_ref","numAutos","expTick","leftOver","numLevels","individualEXP","ticksNeededEXP","ceil","reqExp","curExp","futureReq","calcCarryOverEXP","_ref2","numEXP","futureMultBD","calcFutureMult","JSON","parse","stringify","remainingTime","time","numAuto","newOutPut","production","expBonus","growthTime","timeToLevel","calcTimeTillLevel","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","gainedEXP","totalExp","Infinity","remExp","getNextShopCosts","data","prodLevel","shopProdLevel","growthLevel","FarmingShopPlantGrowingSpeed","expLevel","FarmingShopPlantRankExpEarned","shopRankLevel","temp1","temp2","temp3","temp4","prodCost","growthCost","expCost","calcMaxPrestige","start","runningHarvests","flag","requiredPerPic","requiredHarvests","greaterThanOrEqualTo","calcTimeTillPrestige","resetPlantBD","resetModifiersBD","prestiged","totalTime","remainingHarvests","timeTillPrestige","toNumber","greaterThan","ticks","rankRes","_plant$totalMade","_plant$totalMade2","_plant$created","_plant$created2","_plant$production","_plant$production2","_modifiers$shopProdBo","_modifiers$shopProdBo2","_modifiers$hpBonus","_modifiers$hpBonus2","_modifiers$curPotatoe","_modifiers$totalPotat","_modifiers$totalPotat2","curPotatoes","totalPotatoes","calcHPProd","plants_input","plants","nextCosts","simulationTime","startTime","runningTime","dataPointsMax","maxSteps","tickStart","tickRate","dataPointThreshold","dataPointsPotatoes","dataPointsFries","currPotatoes","prevPlantsProd","Array","fill","finalPass","j","curr","toAdd","res","_objectSpread","curTime","autoBuyPBC","updateCosts","shopRankEXP","skipFinal","timeIncrease","increase","trueTimeIncrease","finalPotatoes","newObj","potatoeProduction","finalModifiers","calcStepHPProd","steps","potatoeSteps","autos","obj","text","calcAssemblyHP","bonus","AssemblerCollection","BonusList","StartingLevel","Level","gain","Gain","level","calcContagionBonus","GrasshopperCollection","Locked","BaseBonus","calcExpeditionHP","ExpeditionsCollection","temp","BonusPower","Room","calcUniqueHPBonus","FarmingShopUniqueHealthy","calcFriesHPBonus","FrenchFriesTotal","FarmingShopFriesHealthyBonus","calcPetHPBonus","activePets","EquipedPetID","allPets","PetsCollection","neededMap","bonusInner","x1","x2","calcHPBonus","HealthyPotatoBonus","self","onmessage","_ref$data","id","data1","finalPlants","cur","mode","futureTime","numSimulatedAutos","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","bestPIC","bestPicCombo","bestPICPerc","bestPICPercCombo","dataObj","top10DataPointsPotatoes","top10DataPointsFries","end","combo","result","curStep","numSteps","minTime","baseTimers","remaining","reverse","runTime","curPlant","remainder","diff","generalHelper","picGained","picPercent","picIncrease","unshift","pop","picGain","picStats","picLevel","postMessage","update","success","err"],"sourceRoot":""}