{"version":3,"file":"static/js/699.f7a2437d.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","util/helper.js","util/farmingHelper.js","farmingWorker.js"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = this.roundInt((seconds % 3600) % 60);\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`\r\n        }\r\n        else {\r\n            string = string + `0s`;\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        1001: { color: 'maroon' },\r\n        1002: { color: 'orange' },\r\n        1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './helper.js';\r\n\r\nvar farmingHelper = {\r\n\r\n    calcPlantHarvest: function (plant, modifiers) {\r\n        return helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.contagionHarvest;\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = 1 * shopProdBonus * assemblyBonus * modifiers_input.contagionPlantProd;\r\n\r\n        const Max = function (a, b) {\r\n            return a > b ? a : b;\r\n        }\r\n        let plantMult = Math.pow(\r\n            (1 + 0.05 * (1 + shovel * 0.02)),\r\n            helper.calculateLogarithm(1.25, ManuallyCreated)\r\n        )\r\n        let output = TotalCreated * plantMult * PlantTotalProductionBonus * Math.pow(1.02, prestige);\r\n        if (plant_input.ID === 1) {\r\n            output *= modifiers_input.hpBonus;\r\n        }\r\n\r\n        return output;\r\n    },\r\n    calcFryOutput: function (potatoes) {\r\n\r\n        // BigDouble.Round((BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 15.75) * (20 - BigDouble.Min(BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0), 31) + 16) * BigDouble.Pow(1.15, BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 16.0) * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        let step1 = (helper.calculateLogarithm(10.0, potatoes) - 15.75);\r\n        let step2 = (20 - Math.min(helper.calculateLogarithm(10.0, potatoes), 31) + 16);\r\n        let step3 = Math.pow(1.15, helper.calculateLogarithm(10.0, potatoes) - 16.0);\r\n        return step1 * step2 * step3;\r\n    },\r\n    calcCarryOverEXP: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 1;\r\n        if (numAutos > 1) {\r\n            let individualEXP = expTick / numAutos;\r\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\r\n            if (numAutos > ticksNeededEXP) {\r\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\r\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                while (leftOver > futureReq) {\r\n                    leftOver -= futureReq;\r\n                    numLevels++;\r\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                }\r\n            }\r\n            else {\r\n                leftOver = 0;\r\n            }\r\n        }\r\n        else {\r\n\r\n            leftOver = 0;\r\n        }\r\n        return { leftOver, numLevels };\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n\r\n        // console.log(`calcing future mult${plant_input.ID}`)\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let x = 0;\r\n        let numLoops = 0;\r\n        let expTick = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n\r\n        while (remainingTime > 0) {\r\n\r\n            plant.timeToLevel = Math.ceil((plant.reqExp - plant.curExp) / expTick) * plant.growthTime;\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel >= remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n                plant.created += toCreate;\r\n                plant.totalMade += toCreate;\r\n\r\n                plant.futureMult = Math.pow(\r\n                    (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n                    helper.calculateLogarithm(1.25, plant.created)\r\n                );\r\n\r\n                if (rankIncrease) {\r\n\r\n                    let leftOver = this.calcCarryOverEXP({ plant, expTick, numAutos });\r\n                    plant.curExp = leftOver.leftOver;\r\n                    plant.Rank += leftOver.numLevels;\r\n                    // plant.perHarvest = helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                    plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick;\r\n                    // plant.curExp += gainedEXP;\r\n                    let totalExp = plant.curExp + gainedEXP;\r\n\r\n                    if (totalExp > plant.reqExp) {\r\n                        let leftOver = this.calcCarryOverEXP({ plant, expTick, numAutos });\r\n                        plant.curExp = leftOver.leftOver;\r\n                        plant.Rank += leftOver.numLevels;\r\n                        // plant.perHarvest = helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n                        plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    }\r\n                }\r\n\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n            plant.production = newOutPut;\r\n        }\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n        let ticksTillLevel = Math.ceil((remExp) / expBonus);\r\n\r\n        plant.timeToLevel = ticksTillLevel * plant.growthTime;\r\n\r\n\r\n\r\n        // plant.timeToLevel = (remExp / expBonus) * plant.growthTime;\r\n        return plant;\r\n    },\r\n    getNextShopCosts: function (data) {\r\n\r\n        let prodCost = 1;\r\n        let prodLevel = data.FarmingShopPlantTotalProduction ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\r\n        let growthCost = 1;\r\n        let growthLevel = data.FarmingShopPlantGrowingSpeed ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\r\n        let expCost = 1;\r\n        let expLevel = data.FarmingShopPlantRankExpEarned ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\r\n\r\n\r\n        prodCost = prodLevel > 50 ? 100000000.0 * Math.pow(100 * Math.pow(1.05, prodLevel - 50), prodLevel)\r\n            :\r\n            100000000 * Math.pow(100, prodLevel);\r\n        growthCost = 10000000000 * Math.pow(500, growthLevel);\r\n        expCost = 1000000000000000 * Math.pow(250, expLevel);\r\n        return { prodCost, growthCost, expCost };\r\n    },\r\n    calcMaxPrestige: function (plant_input) {\r\n\r\n        let start = plant_input.prestige;\r\n        let runningHarvests = 0;\r\n        let flag = true;\r\n        while (flag) {\r\n            let requiredHarvests = runningHarvests + (10 * Math.pow(2, start));\r\n            if (plant_input.created >= requiredHarvests) {\r\n                start++;\r\n                runningHarvests += requiredHarvests;\r\n            }\r\n            else {\r\n                flag = false;\r\n            }\r\n        }\r\n        return start - plant_input.prestige;\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n        let runningHarvests = 0;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers).timeToLevel;\r\n            let requiredHarvests = runningHarvests + (10 * Math.pow(2, plant.prestige));\r\n            let remainingHarvests = requiredHarvests - plant.created;\r\n            let timeTillPrestige = Math.ceil((remainingHarvests / (plant.perHarvest * numAutos))) * plant.growthTime;\r\n\r\n            if (timeTillPrestige <= 0) {\r\n                prestiged = true;\r\n\r\n                if (totalTime <= 0) {\r\n                    plant.prestige++;\r\n                    prestiged = false;\r\n                    runningHarvests += requiredHarvests;\r\n                }\r\n\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created += ((ticks) * plant.perHarvest) * numAutos;\r\n                plant.totalMade += ((ticks) * plant.perHarvest) * numAutos;\r\n                plant.Rank++;\r\n                plant.curExp = 0;\r\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n                plant.created += ((ticks) * plant.perHarvest) * numAutos;\r\n                plant.totalMade += ((ticks) * plant.perHarvest) * numAutos;\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return { remainingTime: totalTime, prestige: plant.prestige, prestiged: prestiged }\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAutos;\r\n        let time = modifiers.time;//time in seconds\r\n\r\n        let totalPotatoes = modifiers.totalPotatoes;\r\n        let currPotatoes = modifiers.curPotatoes;\r\n\r\n        //Iterate over each second\r\n        for (let i = 0; i < time; i++) {\r\n            //Calculate new values for each plant\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n                let toAdd = j === plants.length - 1 ? 0 : plants[j + 1].production * 1;\r\n                curr.totalMade += toAdd;\r\n                let res = this.calcFutureMult(curr, { ...modifiers, time: 1, numAuto: numAutos[j], string: false });\r\n                plants[j] = res;\r\n            }\r\n            totalPotatoes += plants[0].production;\r\n            currPotatoes += plants[0].production;\r\n\r\n            if (modifiers.autoBuyPBC) {\r\n                let updateCosts = false;\r\n                if (currPotatoes >= modifiers.nextCosts.prodCost) {\r\n                    currPotatoes -= modifiers.nextCosts.prodCost;\r\n                    modifiers.shopProdLevel++;\r\n                    modifiers.shopProdBonus = Math.pow(1.25, modifiers.shopProdLevel);\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes >= modifiers.nextCosts.growthCost) {\r\n                    currPotatoes -= modifiers.nextCosts.growthCost;\r\n                    modifiers.shopGrowingSpeed++;\r\n                    updateCosts = true;\r\n                }\r\n                if (currPotatoes >= modifiers.nextCosts.expCost) {\r\n                    currPotatoes -= modifiers.nextCosts.expCost;\r\n                    modifiers.shopRankLevel++;\r\n                    modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\r\n                    updateCosts = true;\r\n                }\r\n                if (updateCosts) {\r\n\r\n                    let nextCosts = this.getNextShopCosts(modifiers);\r\n                    modifiers.nextCosts = nextCosts\r\n                }\r\n            }\r\n\r\n        }\r\n        // console.log(`plant 2 final prod: ${plants[1].production}`)\r\n        return { totalPotatoes: totalPotatoes, potatoeProduction: plants[0].production, plants: plants, nextCosts: modifiers.nextCosts };\r\n    },\r\n    calcAssemblyHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\r\n            let level = (data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel)\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcContagionBonus: function (data, index) {\r\n        let bonus = 1;\r\n\r\n        if (data.GrasshopperCollection[index].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[index].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[index].Level);\r\n            bonus *= Math.pow(1 + base * 0.01, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcExpeditionHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data.ExpeditionsCollection[16].Locked > 0) {\r\n            let temp = data.ExpeditionsCollection[16];\r\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\r\n            bonus = res;\r\n        }\r\n        return bonus;\r\n    },\r\n    calcUniqueHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        for (let i = 0; i < data.FarmingShopUniqueHealthy.length; i++) {\r\n            bonus *= (data.FarmingShopUniqueHealthy[i] + 1);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcFriesHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let totalFries = helper.calcPOW(data.FrenchFriesTotal);\r\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\r\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\r\n        let fryBonus = shopFryBonus * contagionFryBonus;\r\n        bonus *= 1 + totalFries * fryBonus;\r\n        return bonus;\r\n    },\r\n    calcPetHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let activePets = data.EquipedPetID;\r\n        let allPets = data.PetsCollection;\r\n\r\n        let neededMap = {};\r\n        for (let i = 0; i < activePets.length; i++) {\r\n            if (activePets[i] > 0) {\r\n                neededMap[activePets[i]] = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < allPets.length; i++) {\r\n            let curr = allPets[i];\r\n            if (curr.ID in neededMap) {\r\n                let rank = curr.Rank;\r\n                let bonusInner = 0;\r\n\r\n                for (let j = 0; j < curr.BonusList.length; j++) {\r\n                    let bonusInner = curr.BonusList[j];\r\n                    if (bonusInner.ID === 23) {\r\n\r\n                        //public double GetPetBonus(int Bonus)\r\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\r\n                        //(x1                                                     + x3) * (x5) * 0.5\r\n\r\n\r\n                        // (\r\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\r\n                        //     - 1.0\r\n                        //     + Math.Max(\r\n                        //         0.0, \r\n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\r\n                        // )\r\n\r\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\r\n                        let x2 = helper.calculateLogarithm(1.0125, curr.Level + 1);\r\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\r\n                        let x4 = helper.calculateLogarithm(1.075, curr.Rank + 1);\r\n                        let x5 = 1.0 + x4 * 0.005;\r\n\r\n                        let tot1 = (x1 + x3);\r\n                        let tot2 = tot1 * x5;\r\n                        let tot3 = tot2 * 0.5;\r\n\r\n                        bonus += tot3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcHPBonus: function (data) {\r\n\r\n\r\n        // let bonus = 1;\r\n        // let assemblyHP = this.calcAssemblyHP(data);\r\n        // bonus *= assemblyHP;\r\n\r\n        // let contagionHP = this.calcContagionBonus(data, 0);\r\n        // bonus *= contagionHP;\r\n\r\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\r\n        // bonus *= soulBonus;\r\n\r\n        // let expeditionBonus = this.calcExpeditionHP(data);\r\n        // bonus *= expeditionBonus;\r\n\r\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\r\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\r\n\r\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\r\n        // bonus *= uniqueHPBonus;\r\n\r\n        // let fryHPBonus = this.calcFriesHPBonus(data);\r\n        // bonus *= fryHPBonus;\r\n\r\n        // let petHPBonus = this.calcPetHPBonus(data);\r\n        // bonus *= petHPBonus;\r\n\r\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\r\n        // bonus *= residueHPBonus;\r\n\r\n        // //(1 + \r\n        // // milk: \r\n        // let step1 = Math.max(0,\r\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\r\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\r\n        //         :\r\n        //         0\r\n        // );\r\n\r\n\r\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\r\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\r\n        //     : 1)\r\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\r\n\r\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\r\n        // //brewing:  \r\n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\r\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\r\n        // // bonus *= milkHPBonus;\r\n\r\n        let legitBonus = helper.calcPOW(data.HealthyPotatoBonus);\r\n        return legitBonus;\r\n    }\r\n}\r\n\r\nexport default farmingHelper;","import helper from './util/farmingHelper.js';\r\n\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n        let modifiers = data.modifiers;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = 0;\r\n        let totalPotCombo = {};\r\n        let bestProd = 0;\r\n        let bestProdCombo = {};\r\n        let bestPIC = 0;\r\n        let bestPicCombo = { potatoeProduction: 0 };\r\n        let bestPICPerc = 0;\r\n        let bestPICPercCombo = { potatoeProduction: 0 }\r\n        let dataObj = { ...modifiers, time: secondsHour * futureTime };\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n            // console.log(`calculating loop: ${i} / ${combinations.length} <------> ${data.start}  == ${data.end}`);\r\n            let combo = combinations[i];\r\n            dataObj.numAutos = combo;\r\n\r\n            let result = helper.calcHPProd(finalPlants, dataObj);\r\n\r\n            let picGained = 0;\r\n            let picPercent = 0;\r\n\r\n            for (let j = 0; j < result.plants.length; j++) {\r\n                let picIncrease = helper.calcMaxPrestige(result.plants[j]);\r\n                picGained += picIncrease;\r\n                picPercent += (Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige));\r\n                result.plants[j].picIncrease = picIncrease;\r\n            }\r\n\r\n            if (result.totalPotatoes > totalPot) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n            if (result.potatoeProduction > bestProd) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            if (picGained > bestPIC) {\r\n                let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                bestPIC = picGained;\r\n                bestPicCombo = temp;\r\n            }\r\n            else if (picGained === bestPIC) {\r\n                if (result.potatoeProduction > bestPicCombo.potatoeProduction) {\r\n                    let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                    bestPIC = picGained;\r\n                    bestPicCombo = temp;\r\n                }\r\n            }\r\n            if (picPercent > bestPICPerc) {\r\n                let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                bestPICPerc = picPercent;\r\n                bestPICPercCombo = temp;\r\n            }\r\n            else if (picPercent === bestPICPerc) {\r\n                if (result.potatoeProduction > bestPICPercCombo.potatoeProduction) {\r\n                    let temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                    bestPICPerc = picPercent;\r\n                    bestPICPercCombo = temp;\r\n                }\r\n            }\r\n\r\n\r\n            // eslint-disable-next-line no-restricted-globals\r\n            self.postMessage({\r\n                update: true\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo,\r\n            bestPicCombo: bestPicCombo,\r\n            bestPICPercCombo: bestPICPercCombo,\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_defineProperty","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","roundTwoDecimal","number","Math","round","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","secondsToStringWithS","seconds","numHours","numMinutes","numSeconds","string","floor","this","concat","secondsToString","bonusColorMap","color","calcPlantHarvest","plant","modifiers","helper","Rank","prestige","contagionHarvest","calcProdOutput","plant_input","modifiers_input","TotalCreated","totalMade","ManuallyCreated","created","shovel","manualHarvestFormula","shopProdBonus","PlantTotalProductionBonus","contagionPlantProd","output","ID","hpBonus","calcFryOutput","potatoes","min","calcCarryOverEXP","_ref","numAutos","expTick","leftOver","numLevels","individualEXP","ticksNeededEXP","ceil","reqExp","curExp","futureReq","calcFutureMult","JSON","parse","stringify","remainingTime","time","numAuto","prestigeBonus","expBonus","growthTime","TimeNeeded","shopGrowingSpeed","petPlantCombo","contagionPlantGrowth","timeToLevel","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","futureMult","gainedEXP","newOutPut","production","calcTimeTillLevel","remExp","ticksTillLevel","getNextShopCosts","data","prodLevel","FarmingShopPlantTotalProduction","shopProdLevel","growthLevel","FarmingShopPlantGrowingSpeed","expLevel","FarmingShopPlantRankExpEarned","shopRankLevel","prodCost","growthCost","expCost","calcMaxPrestige","start","runningHarvests","flag","requiredHarvests","calcTimeTillPrestige","prestiged","totalTime","remainingHarvests","timeTillPrestige","ticks","calcHPProd","plants_input","plants","totalPotatoes","currPotatoes","curPotatoes","j","curr","toAdd","_objectSpread","autoBuyPBC","updateCosts","nextCosts","shopRankEXP","potatoeProduction","calcAssemblyHP","bonus","AssemblerCollection","BonusList","StartingLevel","Level","gain","Gain","level","calcContagionBonus","index","GrasshopperCollection","Locked","BaseBonus","calcExpeditionHP","ExpeditionsCollection","temp","BonusPower","Room","calcUniqueHPBonus","FarmingShopUniqueHealthy","calcFriesHPBonus","FrenchFriesTotal","FarmingShopFriesHealthyBonus","calcPetHPBonus","activePets","EquipedPetID","allPets","PetsCollection","neededMap","bonusInner","x1","x2","max","calcHPBonus","HealthyPotatoBonus","self","onmessage","_ref$data","id","data1","finalPlants","futureTime","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","bestPIC","bestPicCombo","bestPICPerc","bestPICPercCombo","dataObj","end","combo","result","picGained","picPercent","picIncrease","picGain","picStats","picLevel","postMessage","update","success","err","console"],"sourceRoot":""}