{"version":3,"file":"static/js/359.23f5e57c.chunk.js","mappings":"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","sources":["util/helper.js","util/math.js","util/farmingHelper.js","farming/farmingWorker.js"],"sourcesContent":["var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n\r\n        let numDays = 0;\r\n\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numDays = Math.floor(seconds / (3600 * 24));\r\n        numHours = Math.floor((seconds % (3600 * 24)) / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = this.roundInt((seconds % (3600 * 24)) % 60);\r\n\r\n        if (numDays == Number.POSITIVE_INFINITY || numDays == Number.NEGATIVE_INFINITY) {\r\n            return `` + numDays;\r\n        }\r\n\r\n        if (numSeconds === 60) {\r\n            numSeconds = 0;\r\n            numMinutes++;\r\n        }\r\n        if (numMinutes === 60) {\r\n            numMinutes = 0;\r\n            numHours++;\r\n        }\r\n        if (numHours === 24) {\r\n            numHours = 0;\r\n            numDays++;\r\n        }\r\n\r\n        if (numDays > 0) {\r\n            string = string + `${numDays < 10 ? `0` + numDays : numDays}d:`\r\n        }\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numDays = 0;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numDays = Math.floor(seconds / (3600 * 24));\r\n        numHours = Math.floor((seconds % (3600 * 24)) / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numMinutes === 60) {\r\n            numMinutes = 0;\r\n            numHours++;\r\n        }\r\n        if (numHours === 24) {\r\n            numHours = 0;\r\n            numDays++;\r\n        }\r\n\r\n        if (numDays == Number.POSITIVE_INFINITY || numDays == Number.NEGATIVE_INFINITY) {\r\n            return `` + numDays;\r\n        }\r\n\r\n        if (numDays > 0) {\r\n            string = string + `${numDays < 10 ? `0` + numDays : numDays}d:`;\r\n            if (numHours === 0) {\r\n                string = string + `00h`\r\n            }\r\n        }\r\n        if (numHours > 0 || (numHours === 0 && numDays === 0)) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h`;\r\n        }\r\n        if (numDays === 0) {\r\n\r\n            string = string + `:`;\r\n\r\n            if (numMinutes > 0) {\r\n                string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`;\r\n            }\r\n            else {\r\n                string = string + `0s`;\r\n            }\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        // 1001: { color: 'maroon' },\r\n        // 1002: { color: 'orange' },\r\n        // 1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1010: { color: 'maroon' },\r\n        1011: { color: 'purple' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import Decimal from 'break_infinity.js';\r\nvar helper = {\r\n    createDecimal: function (number) {\r\n        let deci = number.mantissa || number.mantissa === 0 ? new Decimal(`${number.mantissa}e${number.exponent}`) : new Decimal(number);\r\n\r\n        return deci;\r\n    },\r\n    multiplyDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.times(b);\r\n    },\r\n    divideDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.dividedBy(b);\r\n    },\r\n    addDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.plus(b);\r\n    },\r\n    subtractDecimal: function (a, b) {\r\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\r\n        return a.minus(b);\r\n    },\r\n    logDecimal: function (number, base) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return this.createDecimal(number.log(base));\r\n    },\r\n    pow: function (number, exp) {\r\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\r\n        return number.pow(exp);\r\n    },\r\n    min: function (number1, number2) {\r\n        number1 = number1.mantissa || number1.mantissa === 0 ? number1 : this.createDecimal(number1);\r\n        number2 = number2.mantissa || number2.mantissa === 0 ? number2 : this.createDecimal(number2);\r\n\r\n        if (number1.greaterThan(number2)) {\r\n            return number2;\r\n        }\r\n        return number1;\r\n    },\r\n    max: function (number1, number2) {\r\n        number1 = number1.mantissa || number1.mantissa === 0 ? number1 : this.createDecimal(number1);\r\n        number2 = number2.mantissa || number2.mantissa === 0 ? number2 : this.createDecimal(number2);\r\n\r\n        if (number1.greaterThan(number2)) {\r\n            return number1;\r\n        }\r\n        return number2;\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './helper.js';\r\nimport mathHelper from './math.js';\r\n\r\nvar farmingHelper = {\r\n    findMultipliersWithMinPercentage: function (sum, numbers, minPercentage) {\r\n        const multipliers = [];\r\n        let count = 0;\r\n\r\n        function backtrack(index, currentSum, currentMultipliers) {\r\n            count++;\r\n\r\n            if (index === numbers.length) {\r\n                const productSum = currentMultipliers.reduce((acc, multiplier, i) => acc + multiplier * numbers[i], 0);\r\n                if (productSum >= minPercentage * sum) {\r\n                    multipliers.push([...currentMultipliers]);\r\n                }\r\n                return;\r\n            }\r\n            let max = Math.floor((sum - currentSum) / numbers[index]);\r\n            for (let multiplier = 0; multiplier <= max; multiplier++) {\r\n                currentMultipliers[index] = multiplier;\r\n                let tempSum = currentSum + multiplier * numbers[index];\r\n                if (tempSum < sum) {\r\n                    backtrack(index + 1, currentSum + multiplier * numbers[index], currentMultipliers);\r\n                }\r\n            }\r\n        }\r\n\r\n        backtrack(0, 0, []);\r\n        console.log(count);\r\n        return multipliers;\r\n    },\r\n    calcGrowthTime: function (plant, modifiers) {\r\n        let growingBonus = mathHelper.createDecimal(modifiers.originalShopGrowingBonus);\r\n        growingBonus = mathHelper.divideDecimal(growingBonus, (1 + 0.05 * modifiers.originalShopGrowingLevel));\r\n        growingBonus = mathHelper.multiplyDecimal(growingBonus, (1 + 0.05 * modifiers.shopGrowingSpeed)).toNumber();\r\n\r\n        let num = Math.floor(plant.TimeNeeded / plant.prestigeBonus / growingBonus);\r\n        return num < 10 ? 10 : num;\r\n    },\r\n    calcPlantHarvest: function (plant, modifiers) {\r\n        let num = helper.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.manualHarvestBonus;\r\n        return num;\r\n    },\r\n    calcShopProdBonus: function (modifiers_input, shopLevel) {\r\n        shopLevel = shopLevel || shopLevel === 0 ? shopLevel : modifiers_input.FarmingShopPlantTotalProduction;\r\n        return mathHelper.pow(1.25, shopLevel);\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        // let ManuallyCreated = plant_input.created;\r\n        // let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        //note bigsad = -1 -> need to take into account assumbly in the future\r\n        // const assemblyBonus = modifiers_input.assemblyProduction;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        // let PlantTotalProductionBonus = mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(shopProdBonus, assemblyBonus), modifiers_input.contagionPlantProd);\r\n        let PlantTotalProductionBonus = mathHelper.createDecimal(modifiers_input.originalShopProdBonus);\r\n        PlantTotalProductionBonus = mathHelper.divideDecimal(PlantTotalProductionBonus, this.calcShopProdBonus(null, modifiers_input.originalShopProdLevel));\r\n        PlantTotalProductionBonus = mathHelper.multiplyDecimal(shopProdBonus, PlantTotalProductionBonus);\r\n\r\n\r\n        let plantMult = plant_input.futureMult;\r\n\r\n        let output = mathHelper.multiplyDecimal(\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.multiplyDecimal(\r\n                    TotalCreated, plantMult),\r\n                PlantTotalProductionBonus),\r\n            mathHelper.createDecimal(Math.pow(1.02, prestige))\r\n        );\r\n\r\n        if (plant_input.ID === 1) {\r\n            output = mathHelper.multiplyDecimal(output, modifiers_input.hpBonus);\r\n        }\r\n\r\n        return output;\r\n    },\r\n    calcFryOutput: function (potatoes) {\r\n\r\n        // BigDouble.Round((BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 15.75) * (20 - BigDouble.Min(BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0), 31) + 16) * BigDouble.Pow(1.15, BigDouble.Log(GM.PD.HealthyPotatoTotal, 10.0) - 16.0) * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\r\n        let log10 = mathHelper.logDecimal(potatoes, 10);\r\n        let step1 = mathHelper.subtractDecimal(mathHelper.logDecimal(potatoes, 10), 15.75);\r\n        let inter1 = log10;\r\n        inter1 = inter1.lessThan(31) ? inter1 : 31;\r\n        let step2 = mathHelper.subtractDecimal(mathHelper.createDecimal(36), inter1);\r\n        let step3 = mathHelper.pow(\r\n            mathHelper.createDecimal(1.15),\r\n            mathHelper.subtractDecimal(\r\n                log10, 16.0\r\n            )\r\n        );\r\n        return mathHelper.multiplyDecimal(step1, mathHelper.multiplyDecimal(step2, step3));\r\n    },\r\n    calcCarryOverEXP_OLD: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 1;\r\n        if (numAutos > 1) {\r\n            let individualEXP = expTick / numAutos;\r\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\r\n            if (numAutos > ticksNeededEXP) {\r\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\r\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                while (leftOver > futureReq) {\r\n                    leftOver -= futureReq;\r\n                    numLevels++;\r\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, (plant.Rank + numLevels));\r\n                }\r\n            }\r\n            else {\r\n                leftOver = 0;\r\n            }\r\n        }\r\n        else {\r\n\r\n            leftOver = 0;\r\n        }\r\n\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    calcCarryOverEXP: function ({ plant, numAutos, expTick }) {\r\n\r\n        let leftOver = 0;\r\n        let numLevels = 0;\r\n        let numEXP = plant.curExp + numAutos * expTick;\r\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n\r\n        //need to handle two cases: 1 auto, just go up as much as you can\r\n        // >1 autos\r\n\r\n        while (numEXP >= reqExp) {\r\n            numEXP -= reqExp;\r\n            numLevels++;\r\n            reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\r\n        }\r\n\r\n        leftOver = numEXP;\r\n        return { leftOver, numLevels, reqExp };\r\n    },\r\n    calcEXPBonus: function (modifiers) {\r\n        let originalBonus = modifiers.originalRankLevelBonus;\r\n        let originalLevel = modifiers.originalShopRankLevel;\r\n        let currentShopLevel = modifiers.shopRankLevel;\r\n        let originalPotion = modifiers.originalPotionRank;\r\n        let currentPotion = modifiers.potionRank;\r\n        let expBonus = mathHelper.createDecimal(originalBonus);\r\n        expBonus = mathHelper.divideDecimal(expBonus, 1 + originalLevel * 0.1);\r\n        expBonus = mathHelper.divideDecimal(expBonus, originalPotion > 0 ? 1.5 : 1);\r\n\r\n        expBonus = mathHelper.multiplyDecimal(expBonus, 1 + currentShopLevel * 0.1);\r\n        expBonus = mathHelper.multiplyDecimal(expBonus, currentPotion);\r\n        expBonus = expBonus.toNumber();\r\n\r\n        return expBonus;\r\n    },\r\n    futureMultBD: function (plant, modifiers) {\r\n        return mathHelper.pow(\r\n            (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n            mathHelper.logDecimal(plant.created, 1.25)\r\n        );\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n        //bigsad = -1 need to make costs big decimal as well now\r\n        // console.log(`calcing future mult${plant_input.ID}`)\r\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let newExpBonus = this.calcEXPBonus(modifiers);\r\n        let expTick = plant.prestigeBonus * newExpBonus;\r\n\r\n        plant.growthTime = this.calcGrowthTime(plant, modifiers);\r\n\r\n        if (numAutos === 0) {\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n            plant.production = newOutPut;\r\n            return plant;\r\n        }\r\n\r\n        while (remainingTime > 0) {\r\n\r\n            plant.timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel > remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n\r\n            remainingTime -= elapsedTime;\r\n            plant.elapsedTime += elapsedTime;\r\n\r\n            let numHarvests = 0;\r\n            if (plant.elapsedTime >= plant.growthTime) {\r\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, toCreate);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, toCreate);\r\n\r\n                plant.futureMult = this.futureMultBD(plant, modifiers);\r\n\r\n                if (rankIncrease) {\r\n\r\n                    let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick * numHarvests, numAutos });\r\n                    // let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick , numAutos });\r\n                    plant.curExp = leftOver.leftOver;\r\n                    plant.Rank += leftOver.numLevels;\r\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                    // plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n                    plant.reqExp = leftOver.reqExp;\r\n                }\r\n                else {\r\n                    let gainedEXP = numHarvests * expTick * numAutos;\r\n                    let totalExp = plant.curExp + gainedEXP;\r\n                    plant.curExp = totalExp;\r\n                }\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n\r\n        let newOutPut = this.calcProdOutput(plant, modifiers);\r\n\r\n        plant.production = newOutPut;\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n        let plant = plant_input;\r\n        let modifiers = modifiers_input;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        if (numAutos === 0) return Infinity;\r\n\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let newExpBonus = this.calcEXPBonus(modifiers);\r\n        let expBonus = plant.prestigeBonus * newExpBonus * numAutos;\r\n\r\n        let ticksTillLevel = Math.ceil((remExp) / expBonus);\r\n        return ticksTillLevel * plant.growthTime - plant.elapsedTime;\r\n    },\r\n    getNextShopCosts: function (data) {\r\n\r\n        let prodCost = 1;\r\n        let prodLevel = data.FarmingShopPlantTotalProduction || data.FarmingShopPlantTotalProduction === 0 ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\r\n        let growthCost = 1;\r\n        let growthLevel = data.FarmingShopPlantGrowingSpeed || data.FarmingShopPlantGrowingSpeed === 0 ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\r\n        let expCost = 1;\r\n        let expLevel = data.FarmingShopPlantRankExpEarned || data.FarmingShopPlantRankExpEarned === 0 ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\r\n\r\n        let temp1 = mathHelper.pow(\r\n            1.05, prodLevel - 50\r\n        );\r\n        let temp2 = mathHelper.multiplyDecimal(100, temp1);\r\n        let temp3 = mathHelper.pow(temp2, prodLevel);\r\n        let temp4 = mathHelper.multiplyDecimal(100000000, temp3);\r\n        prodCost = prodLevel > 50 ? temp4 : mathHelper.multiplyDecimal(100000000, mathHelper.pow(100, prodLevel));\r\n\r\n\r\n        growthCost = mathHelper.multiplyDecimal(\r\n            mathHelper.pow(500, growthLevel),\r\n            10000000000\r\n        );\r\n        expCost =\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.pow(250, expLevel),\r\n                1000000000000000\r\n            );\r\n\r\n        return { prodCost, growthCost, expCost };\r\n    },\r\n    calcMaxPrestige: function (plant_input) {\r\n\r\n        let start = plant_input.prestige;\r\n        let runningHarvests = 0;\r\n        let flag = true;\r\n        while (flag) {\r\n            let requiredPerPic = 10 * Math.pow(2, start);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            if (plant_input.created.greaterThanOrEqualTo(requiredHarvests)) {\r\n                start++;\r\n                runningHarvests += requiredPerPic;\r\n            }\r\n            else {\r\n                flag = false;\r\n            }\r\n        }\r\n        return start - plant_input.prestige;\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        this.resetPlantBD(plant);\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n        let runningHarvests = 0;\r\n        let newExpBonus = this.calcEXPBonus(modifiers);\r\n        let expTick = plant.prestigeBonus * newExpBonus;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers);\r\n            let requiredPerPic = 10 * Math.pow(2, plant.prestige);\r\n            let requiredHarvests = runningHarvests + requiredPerPic;\r\n            let remainingHarvests = mathHelper.subtractDecimal(requiredHarvests, plant.created);//minimum number of ticks\r\n            let timeTillPrestige =\r\n                mathHelper.multiplyDecimal(\r\n                    mathHelper.divideDecimal(\r\n                        remainingHarvests,\r\n                        (plant.perHarvest * numAutos)\r\n                    ).ceil(),\r\n                    plant.growthTime\r\n                ).ceil().toNumber()\r\n                ;\r\n\r\n            if (numAutos === 0 && remainingHarvests.greaterThan(0)) {\r\n                prestiged = true;\r\n                totalTime = Infinity;\r\n            }\r\n            else if (timeTillPrestige <= 0) {\r\n                prestiged = true;\r\n\r\n                if (totalTime <= 0) {\r\n                    plant.prestige++;\r\n                    prestiged = false;\r\n                    runningHarvests += requiredPerPic;\r\n                }\r\n\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.elapsedTime += timeToLevel;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n\r\n                let rankRes = this.calcCarryOverEXP({ plant, numAutos, expTick: expTick * ticks })\r\n                plant.Rank += rankRes.numLevels;\r\n                plant.curExp = rankRes.leftOver;\r\n                plant.reqExp = rankRes.reqExp;\r\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\r\n                totalTime += timeToLevel;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.elapsedTime += timeTillPrestige;\r\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\r\n\r\n                plant.created = mathHelper.addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\r\n                plant.totalMade = mathHelper.addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\r\n                totalTime += timeTillPrestige;\r\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\r\n            }\r\n        }\r\n        return { remainingTime: totalTime, prestige: plant.prestige, prestiged: prestiged }\r\n    },\r\n    resetPlantBD: function (plant) {\r\n\r\n        plant.totalMade = plant?.totalMade?.mantissa || plant?.totalMade?.mantissa === 0 ? plant.totalMade : mathHelper.createDecimal(plant.totalMade);\r\n        plant.created = plant?.created?.mantissa || plant?.created?.mantissa === 0 ? plant.created : mathHelper.createDecimal(plant.created);\r\n        plant.production = plant?.production?.mantissa || plant?.production?.mantissa === 0 ? plant.production : mathHelper.createDecimal(plant.production);\r\n        plant.futureMult = mathHelper.createDecimal(plant.futureMult);\r\n\r\n    },\r\n    resetModifiersBD: function (modifiers) {\r\n        modifiers.shopProdBonus = modifiers?.shopProdBonus?.mantissa || modifiers?.shopProdBonus?.mantissa === 0 ? modifiers.shopProdBonus : mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = modifiers?.hpBonus?.mantissa || modifiers?.hpBonus?.mantissa === 0 ? modifiers.hpBonus : mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = modifiers?.curPotatoes?.mantissa || modifiers?.curPotatoes.mantissa === 0 ? modifiers.curPotatoes : mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = modifiers?.totalPotatoes?.mantissa || modifiers?.totalPotatoes?.mantissa === 0 ? modifiers.totalPotatoes : mathHelper.createDecimal(modifiers.totalPotatoes);\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        modifiers.nextCosts.prodCost = mathHelper.createDecimal(modifiers.nextCosts.prodCost)\r\n        modifiers.nextCosts.growthCost = mathHelper.createDecimal(modifiers.nextCosts.growthCost)\r\n        modifiers.nextCosts.expCost = mathHelper.createDecimal(modifiers.nextCosts.expCost)\r\n\r\n        let numAutos = modifiers.numAutos;\r\n        let simulationTime = modifiers.time; //time in seconds\r\n        let startTime = modifiers.startTime ? modifiers.startTime : 0;//used for consistent tick timings\r\n        const runningTime = modifiers.runningTime ? modifiers.runningTime : 0;//Used for calculating end timings if necessary\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n        const tickStart = modifiers.tickStart ? modifiers.tickStart : 0;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = modifiers.dataPointThreshold ? modifiers.dataPointThreshold : (simulationTime / tickRate) < dataPointsMax ? 1 : helper.roundInt((simulationTime / tickRate) / dataPointsMax);\r\n        let dataPointsPotatoes = [];\r\n        let dataPointsFries = [];\r\n\r\n        let totalPotatoes = modifiers.totalPotatoes;\r\n        let currPotatoes = modifiers.curPotatoes;\r\n        let prevPlantsProd = Array(plants.length).fill(0);\r\n        for (let i = 0; i < plants.length; i++) {\r\n            prevPlantsProd[i] = plants[i].production;\r\n        }\r\n\r\n        // let runTime = 0;\r\n        let i = 0;\r\n        let finalPass = false;\r\n        // tickRate = 2;\r\n        let prodMult = 1;\r\n        if (tickRate > 2) {\r\n            if (tickRate >= 2592) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 1728) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 864) {\r\n                prodMult = 0.95;\r\n            }\r\n            else if (tickRate >= 140) {\r\n                prodMult = 0.95;\r\n            }\r\n            else {\r\n                prodMult = 0.95;\r\n            }\r\n        }\r\n        //Iterate over each second\r\n        for (; i < simulationTime / tickRate || finalPass; i++) {\r\n            //Calculate new values for each plant\r\n            let HPInitial = 0;\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n\r\n                let toAdd = j === plants.length - 1 ? 0 :\r\n                    tickRate > 1 ?\r\n                        //Some basic calculus to find total assuming linear growth\r\n                        mathHelper.multiplyDecimal(mathHelper.addDecimal(prevPlantsProd[j + 1], plants[j + 1].production), 0.5 * tickRate * prodMult)\r\n                        :\r\n                        mathHelper.multiplyDecimal(plants[j + 1].production, tickRate);\r\n                curr.totalMade = mathHelper.addDecimal(curr.totalMade, toAdd);\r\n                let res = this.calcFutureMult(curr, { ...modifiers, time: tickRate, numAuto: numAutos[j], string: false });\r\n                curr = res;\r\n                if (curr.ID === 1) {\r\n                    HPInitial = prevPlantsProd[j];\r\n                }\r\n                prevPlantsProd[j] = curr.production;\r\n\r\n            }\r\n\r\n\r\n            //Reduce plant rank potion timer, or set it the bonus to 0 if necessary\r\n            if (modifiers.potionRank > 1 && !modifiers.forceRankPotion) {\r\n                modifiers.potionRankTime -= tickRate;\r\n                if (modifiers.potionRankTime < 0) {\r\n                    modifiers.potionRank = 1;\r\n                }\r\n            }\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n\r\n            let HPToAdd = tickRate > 1 ?\r\n                mathHelper.multiplyDecimal(mathHelper.addDecimal(HPInitial, plants[0].production), 0.5 * tickRate * prodMult)\r\n                :\r\n                plants[0].production;\r\n\r\n            totalPotatoes = mathHelper.addDecimal(totalPotatoes, HPToAdd);\r\n            currPotatoes = mathHelper.addDecimal(currPotatoes, HPToAdd);\r\n\r\n            if (modifiers.autoBuyPBC) {\r\n                let updateCosts = false;\r\n                let boughtUpgrade = true;\r\n                while (boughtUpgrade) {\r\n                    boughtUpgrade = false;\r\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.prodCost) === true) {\r\n                        currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.prodCost);\r\n                        modifiers.shopProdLevel++;\r\n                        modifiers.shopProdBonus = this.calcShopProdBonus(modifiers, modifiers.shopProdLevel);\r\n                        updateCosts = true;\r\n                        boughtUpgrade = true;\r\n                    }\r\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.growthCost) === true) {\r\n                        // currPotatoes -= modifiers.nextCosts.growthCost;\r\n                        currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.growthCost);\r\n                        modifiers.shopGrowingSpeed++;\r\n                        updateCosts = true;\r\n                        boughtUpgrade = true;\r\n                    }\r\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.expCost) === true) {\r\n                        currPotatoes = mathHelper.subtractDecimal(currPotatoes, modifiers.nextCosts.expCost);\r\n                        modifiers.shopRankLevel++;\r\n                        modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\r\n                        updateCosts = true;\r\n                        boughtUpgrade = true;\r\n                    }\r\n                    if (updateCosts) {\r\n                        let nextCosts = this.getNextShopCosts(modifiers);\r\n                        modifiers.nextCosts = nextCosts\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            if (i % dataPointThreshold === 0 && curTime >= tickStart && curTime <= (simulationTime + runningTime)) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n\r\n            if (!modifiers.skipFinal) {\r\n\r\n                if (finalPass && curTime >= (simulationTime + runningTime)) {\r\n                    break;\r\n                }\r\n                if (!finalPass && curTime < (simulationTime + runningTime)) {\r\n                    finalPass = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (i > 0 && !modifiers.skipFinal) {\r\n\r\n            let curTime = helper.roundInt(i * tickRate + startTime);\r\n            //Handling rare case when you have to add, but only once due to intervals duration, but only at the end, and didn't fit in the for loop above\r\n            if (dataPointsPotatoes.length === 0) {\r\n                dataPointsPotatoes.push({ \"time\": curTime, \"production\": totalPotatoes })\r\n                dataPointsFries.push({ \"time\": curTime, \"fries\": farmingHelper.calcFryOutput(totalPotatoes) })\r\n            }\r\n            else if (dataPointsPotatoes[dataPointsPotatoes.length - 1].production !== totalPotatoes) {\r\n                if (curTime > (simulationTime + runningTime)) {\r\n\r\n                    let timeIncrease = curTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let increase = mathHelper.divideDecimal(\r\n                        (mathHelper.subtractDecimal(\r\n                            totalPotatoes,\r\n                            dataPointsPotatoes[dataPointsPotatoes.length - 1].production\r\n                        )\r\n                        ),\r\n                        timeIncrease\r\n                    );\r\n\r\n\r\n                    // let temp_increase =  mathHelper.multiplyDecimal(mathHelper.addDecimal(HPInitial, plants[0].production), 0.5 * tickRate * prodMult);\r\n\r\n\r\n\r\n                    let trueTimeIncrease = (simulationTime + runningTime) - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\r\n                    let finalPotatoes = mathHelper.addDecimal(\r\n                        dataPointsPotatoes[dataPointsPotatoes.length - 1].production,\r\n                        mathHelper.multiplyDecimal(increase, trueTimeIncrease)\r\n                    );\r\n\r\n                    let newObj = { time: dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, production: finalPotatoes };\r\n                    dataPointsPotatoes.push(newObj);\r\n\r\n                    dataPointsFries.push({ \"time\": dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease, \"fries\": farmingHelper.calcFryOutput(finalPotatoes) })\r\n\r\n                    //This means the `current` potatoes aren't updated to reflect the backwards fill/fix but it shouldn't be a big deal, and not used for anything atm\r\n                    totalPotatoes = finalPotatoes;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            totalPotatoes: totalPotatoes,\r\n            potatoeProduction: plants[0].production,\r\n            plants: plants,\r\n            nextCosts: modifiers.nextCosts,\r\n            dataPointsPotatoes: dataPointsPotatoes,\r\n            dataPointsFries: dataPointsFries,\r\n            finalModifiers: modifiers,\r\n        };\r\n    },\r\n    calcStepHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        for (let i = 0; i < plants.length; i++) {\r\n            this.resetPlantBD(plants[i])\r\n        }\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        this.resetModifiersBD(modifiers);\r\n        let steps = modifiers.steps;\r\n        let res = -1;\r\n        let potatoeSteps = [];\r\n        let runningTime = 0;\r\n\r\n\r\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\r\n\r\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\r\n        let dataPointThreshold = (modifiers_input.time / tickRate) < dataPointsMax ? 1 : helper.roundInt((modifiers_input.time / tickRate) / dataPointsMax);\r\n\r\n        for (let i = 0; i < steps.length; i++) {\r\n            if (steps[i].time === 0) continue;\r\n            res = this.calcHPProd(plants, {\r\n                ...modifiers,\r\n                numAutos: steps[i].autos,\r\n                time: steps[i].time,\r\n                dataPointThreshold: dataPointThreshold,\r\n                startTime: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time : 0,\r\n                runningTime: runningTime,\r\n                skipFinal: i < (steps.length - 1),\r\n                tickStart: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time + dataPointThreshold * tickRate : 0,\r\n            });\r\n            modifiers = res.finalModifiers;\r\n            modifiers.totalPotatoes = res.totalPotatoes;\r\n            plants = res.plants;\r\n            potatoeSteps = potatoeSteps.concat(res.dataPointsPotatoes);\r\n            steps[i].obj = { text: `P${steps.length - i} for ${steps[i].time}`, numAutos: steps[i].autos, time: steps[i].time }\r\n\r\n            runningTime += steps[i].time;\r\n\r\n        }\r\n        res.dataPointsPotatoes = potatoeSteps;\r\n        res.steps = steps;\r\n\r\n        return res;\r\n    },\r\n    calcAssemblyHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\r\n            let level = (data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel)\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcAssembly: function (data, line_num, bonus_num) {\r\n        let bonus = 1;\r\n\r\n        if (data?.AssemblerCollection[line_num].BonusList[bonus_num].StartingLevel <= data?.AssemblerCollection[line_num].Level) {\r\n            let gain = data?.AssemblerCollection[line_num].BonusList[bonus_num].Gain;\r\n            let level = Math.max(0, data.AssemblerCollection[line_num].Level - (data.AssemblerCollection[line_num].BonusList[bonus_num].StartingLevel - 1));\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcAssemblyLine: function (line, al_level) {\r\n        let bonus = 1;\r\n\r\n        if (line.StartingLevel <= al_level) {\r\n            let gain = line.Gain;\r\n            let level = Math.max(0, al_level - (line.StartingLevel - 1));\r\n            bonus = Math.pow(1 + gain, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcAssemblyCost: function (id, data) {\r\n        let finalCost = mathHelper.createDecimal(-1);\r\n        let costReduction = mathHelper.createDecimal(data.AssemblyCostReductionBonus);\r\n        let assembly = data.AssemblerCollection[id];\r\n        let baseCost = mathHelper.createDecimal(assembly.BaseCost)\r\n\r\n        let step1 = mathHelper.addDecimal(\r\n            baseCost,\r\n            mathHelper.multiplyDecimal(baseCost, assembly.Level)\r\n        );\r\n\r\n        let temp = 1 + assembly.CostExpo + assembly.CostExpo * assembly.Level * 0.02\r\n        let powStepBase = mathHelper.createDecimal(temp);\r\n        let step2 = mathHelper.pow(powStepBase, assembly.Level)\r\n        finalCost = mathHelper.divideDecimal(mathHelper.multiplyDecimal(step1, step2), costReduction)\r\n        // finalCost =\r\n        //     (level + startingCost * level)\r\n        //     * pow(1 + assembly.CostExpo + assembly.CostExpo * assembly.BaseCost * 0.02, assembly.BaseCost)\r\n        //     / costReduction;\r\n\r\n        return finalCost;\r\n    },\r\n    calcProteinPerSecond: function (data) {\r\n        let proteinBonus = mathHelper.createDecimal(data.ProteinBonus);\r\n        let frenchTotal = mathHelper.createDecimal(data.FrenchFriesTotal);\r\n        let result = mathHelper.createDecimal(1);\r\n        if (frenchTotal.greaterThan(10000000000.0)) {\r\n            let log1 = mathHelper.logDecimal(frenchTotal, 5);\r\n            log1 = mathHelper.subtractDecimal(log1, 13.48);\r\n            let log2 = mathHelper.logDecimal(frenchTotal, 10.0);\r\n            log2 = mathHelper.subtractDecimal(log2, 8);\r\n            result = mathHelper.multiplyDecimal(\r\n                mathHelper.multiplyDecimal(log1, mathHelper.pow(1.1, log2)),\r\n                proteinBonus);\r\n        }\r\n        return result;\r\n    },\r\n    calcContagionBonus: function (data, index) {\r\n        let bonus = 1;\r\n\r\n        if (data.GrasshopperCollection[index].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[index].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[index].Level);\r\n            bonus *= Math.pow(1 + base * 0.01, level);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcExpeditionHP: function (data) {\r\n        let bonus = 1;\r\n\r\n        if (data.ExpeditionsCollection[16].Locked > 0) {\r\n            let temp = data.ExpeditionsCollection[16];\r\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\r\n            bonus = res;\r\n        }\r\n        return bonus;\r\n    },\r\n    calcUniqueHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        for (let i = 0; i < data.FarmingShopUniqueHealthy.length; i++) {\r\n            bonus *= (data.FarmingShopUniqueHealthy[i] + 1);\r\n        }\r\n        return bonus;\r\n    },\r\n    calcFriesHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let totalFries = helper.calcPOW(data.FrenchFriesTotal);\r\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\r\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\r\n        let fryBonus = shopFryBonus * contagionFryBonus;\r\n        bonus *= 1 + totalFries * fryBonus;\r\n        return bonus;\r\n    },\r\n    calcPetHPBonus: function (data) {\r\n        let bonus = 1;\r\n\r\n        let activePets = data.EquipedPetID;\r\n        let allPets = data.PetsCollection;\r\n\r\n        let neededMap = {};\r\n        for (let i = 0; i < activePets.length; i++) {\r\n            if (activePets[i] > 0) {\r\n                neededMap[activePets[i]] = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < allPets.length; i++) {\r\n            let curr = allPets[i];\r\n            if (curr.ID in neededMap) {\r\n                // let rank = curr.Rank;\r\n                // let bonusInner = 0;\r\n\r\n                for (let j = 0; j < curr.BonusList.length; j++) {\r\n                    let bonusInner = curr.BonusList[j];\r\n                    if (bonusInner.ID === 23) {\r\n\r\n                        //public double GetPetBonus(int Bonus)\r\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\r\n                        //(x1                                                     + x3) * (x5) * 0.5\r\n\r\n\r\n                        // (\r\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\r\n                        //     - 1.0\r\n                        //     + Math.Max(\r\n                        //         0.0, \r\n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\r\n                        // )\r\n\r\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\r\n                        let x2 = helper.calculateLogarithm(1.0125, curr.Level + 1);\r\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\r\n                        let x4 = helper.calculateLogarithm(1.075, curr.Rank + 1);\r\n                        let x5 = 1.0 + x4 * 0.005;\r\n\r\n                        let tot1 = (x1 + x3);\r\n                        let tot2 = tot1 * x5;\r\n                        let tot3 = tot2 * 0.5;\r\n\r\n                        bonus += tot3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bonus;\r\n    },\r\n    calcHPBonus: function (data) {\r\n\r\n\r\n        // let bonus = 1;\r\n        // let assemblyHP = this.calcAssemblyHP(data);\r\n        // bonus *= assemblyHP;\r\n\r\n        // let contagionHP = this.calcContagionBonus(data, 0);\r\n        // bonus *= contagionHP;\r\n\r\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\r\n        // bonus *= soulBonus;\r\n\r\n        // let expeditionBonus = this.calcExpeditionHP(data);\r\n        // bonus *= expeditionBonus;\r\n\r\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\r\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\r\n\r\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\r\n        // bonus *= uniqueHPBonus;\r\n\r\n        // let fryHPBonus = this.calcFriesHPBonus(data);\r\n        // bonus *= fryHPBonus;\r\n\r\n        // let petHPBonus = this.calcPetHPBonus(data);\r\n        // bonus *= petHPBonus;\r\n\r\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\r\n        // bonus *= residueHPBonus;\r\n\r\n        // //(1 + \r\n        // // milk: \r\n        // let step1 = Math.max(0,\r\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\r\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\r\n        //         :\r\n        //         0\r\n        // );\r\n\r\n\r\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\r\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\r\n        //     : 1)\r\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\r\n\r\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\r\n        // //brewing:  \r\n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\r\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\r\n        // // bonus *= milkHPBonus;\r\n\r\n        let legitBonus = helper.calcPOW(data.HealthyPotatoBonus);\r\n        return legitBonus;\r\n    }\r\n}\r\n\r\nexport default farmingHelper;","import helper from '../util/farmingHelper.js';\r\nimport mathHelper from '../util/math.js';\r\nimport generalHelper from '../util/helper.js';\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    try {\r\n        let finalPlants = data.finalPlants;\r\n\r\n        //for some reason the break-infinity values get changed into {mantissa: x, exponent: y} objects, revert\r\n\r\n        for (let i = 0; i < finalPlants.length; i++) {\r\n            let cur = finalPlants[i];\r\n            cur.created = mathHelper.createDecimal(cur.created);\r\n            cur.totalMade = mathHelper.createDecimal(cur.totalMade);\r\n            cur.production = mathHelper.createDecimal(cur.production);\r\n        }\r\n\r\n        let modifiers = data.modifiers;\r\n        //Same thing for modifiers\r\n        modifiers.shopProdBonus = mathHelper.createDecimal(modifiers.shopProdBonus);\r\n        modifiers.hpBonus = mathHelper.createDecimal(modifiers.hpBonus);\r\n        modifiers.curPotatoes = mathHelper.createDecimal(modifiers.curPotatoes);\r\n        modifiers.totalPotatoes = mathHelper.createDecimal(modifiers.totalPotatoes);\r\n\r\n        const mode = data.mode;\r\n        const secondsHour = 3600;\r\n        let futureTime = data.time;\r\n        const numSimulatedAutos = data.numSimulatedAutos ? data.numSimulatedAutos : 1;\r\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n        // let numPlants = finalPlants.length;\r\n        let combinations = data.combinations;\r\n\r\n\r\n        let totalPot = mathHelper.createDecimal(0);\r\n        let totalPotCombo = {};\r\n        let bestProd = mathHelper.createDecimal(0);\r\n        let bestProdCombo = {};\r\n        let bestPIC = 0;\r\n        let bestPicCombo = { potatoeProduction: 0 };\r\n        let bestPICPerc = 0;\r\n        let bestPICPercCombo = { potatoeProduction: 0 }\r\n        let dataObj = { ...modifiers, time: secondsHour * futureTime };\r\n\r\n        let top10DataPointsPotatoes = [];\r\n        let top10DataPointsFries = [];\r\n\r\n        let counter = 0;\r\n        let counterMax = data.end - data.start;\r\n\r\n        for (let i = data.start; i <= data.end; i++) {\r\n            counterMax--;\r\n            counter++;\r\n            let combo = combinations[i];\r\n            dataObj.numAutos = combo;\r\n            let result;\r\n\r\n            switch (mode) {\r\n                case 'afk':\r\n\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n                case 'carlo':\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: combo });\r\n                    break;\r\n                case 'step':\r\n                    if (combo[0] === 0 && combo[1] === 0 && combo[2] === 0 && combo[3] === 0 && combo[4] === 0) {\r\n                        let bigsad = -1;\r\n                    }\r\n                    let steps = [];\r\n\r\n                    let curStep = 0;\r\n                    let numSteps = 0;\r\n                    let minTime = 0;\r\n\r\n                    for (let j = 0; j < combo.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            numSteps++;\r\n                            minTime += combo[j] * data.baseTimers[j];\r\n                        }\r\n                    }\r\n                    let remaining = (secondsHour * futureTime) - minTime;\r\n\r\n                    for (let j = 0; j < data.baseTimers.length; j++) {\r\n                        if (combo[j] > 0) {\r\n                            curStep++;\r\n                        }\r\n                        let autos = Array(data.baseTimers.length).fill(0);\r\n                        autos[j] = numSimulatedAutos;\r\n                        autos.reverse();\r\n                        let runTime = combo[j] * data.baseTimers[j];\r\n\r\n                        //If its the last plant that will be grown, give the remaining time to it\r\n                        if (curStep === numSteps && combo[j] > 0) {\r\n                            runTime += remaining;\r\n                        }\r\n                        //otherwise, round off time from other plants\r\n                        else if (combo[j] > 0) {\r\n                            let curPlant = finalPlants[finalPlants.length - 1 - j];\r\n                            let remainder = runTime % curPlant.growthTime;\r\n                            //Round down, add run time\r\n                            if (remainder <= curPlant.growthTime * 0.5) {\r\n                                runTime -= remainder;\r\n                                remaining += remainder;\r\n                            }\r\n                            //Round up, reduce run time\r\n                            else {\r\n                                let diff = curPlant.growthTime - remainder;\r\n                                //Only subtract time from final plant IF there is enough remaining time\r\n                                if (remaining >= diff) {\r\n                                    runTime += diff;\r\n                                    remaining -= diff\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        steps.push({\r\n                            time: generalHelper.roundInt(runTime),\r\n                            autos: autos\r\n                        })\r\n                    }\r\n                    result = helper.calcStepHPProd(finalPlants, { ...dataObj, steps: steps });\r\n                    break;\r\n                default:\r\n                    result = helper.calcHPProd(finalPlants, dataObj);\r\n                    break;\r\n            }\r\n\r\n            let picGained = 0;\r\n            let picPercent = 0;\r\n            let temp;\r\n\r\n            for (let j = 0; j < result.plants.length; j++) {\r\n                let picIncrease = helper.calcMaxPrestige(result.plants[j]);\r\n                picGained += picIncrease;\r\n                picPercent += (Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige));\r\n                result.plants[j].picIncrease = picIncrease;\r\n            }\r\n\r\n            if (result.totalPotatoes.greaterThanOrEqualTo(totalPot) === true) {\r\n                totalPot = result.totalPotatoes;\r\n                totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n\r\n                top10DataPointsPotatoes.unshift({ data: result.dataPointsPotatoes, result: totalPot });\r\n                if (top10DataPointsPotatoes.length > 10) {\r\n                    top10DataPointsPotatoes.pop();\r\n                }\r\n                top10DataPointsFries.unshift({ data: result.dataPointsFries, result: totalPot });\r\n                if (top10DataPointsFries.length > 10) {\r\n                    top10DataPointsFries.pop();\r\n                }\r\n            }\r\n\r\n\r\n            if (result.potatoeProduction.greaterThanOrEqualTo(bestProd) === true) {\r\n                bestProd = result.potatoeProduction;\r\n                bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n            }\r\n\r\n            if (picGained > bestPIC) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                bestPIC = picGained;\r\n                bestPicCombo = temp;\r\n            }\r\n            else if (picGained === bestPIC) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPicCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picGained, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n                    bestPIC = picGained;\r\n                    bestPicCombo = temp;\r\n                }\r\n            }\r\n            if (picPercent > bestPICPerc) {\r\n                temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                bestPICPerc = picPercent;\r\n                bestPICPercCombo = temp;\r\n            }\r\n            else if (picPercent === bestPICPerc) {\r\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPICPercCombo.potatoeProduction)) {\r\n                    temp = { combo: combo, result: result, plants: result.plants, potatoeProduction: result.potatoeProduction, picGain: picPercent, picStats: { picLevel: picGained, picPercent: picPercent } };\r\n\r\n                    bestPICPerc = picPercent;\r\n                    bestPICPercCombo = temp;\r\n                }\r\n            }\r\n\r\n            if (counter % 100 === 0) {\r\n                // eslint-disable-next-line no-restricted-globals\r\n                self.postMessage({\r\n                    update: true,\r\n                    temp: temp,\r\n                    updateAmount: 100\r\n                })\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            update: true,\r\n            updateAmount: counterMax\r\n        })\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            success: true,\r\n            totalPotCombo: totalPotCombo,\r\n            bestProdCombo: bestProdCombo,\r\n            bestPicCombo: bestPicCombo,\r\n            bestPICPercCombo: bestPICPercCombo,\r\n            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            top10DataPointsFries: top10DataPointsFries\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"names":["roundTwoDecimal","number","Math","round","Number","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","secondsToStringWithS","seconds","string","numDays","numHours","numMinutes","numSeconds","floor","this","POSITIVE_INFINITY","NEGATIVE_INFINITY","concat","secondsToString","bonusColorMap","color","createDecimal","Decimal","multiplyDecimal","a","b","times","divideDecimal","dividedBy","addDecimal","plus","subtractDecimal","minus","logDecimal","exp","min","number1","number2","greaterThan","max","farmingHelper","findMultipliersWithMinPercentage","sum","numbers","minPercentage","multipliers","count","backtrack","index","currentSum","currentMultipliers","length","multiplier","productSum","reduce","acc","i","push","_toConsumableArray","console","calcGrowthTime","plant","modifiers","growingBonus","mathHelper","originalShopGrowingBonus","originalShopGrowingLevel","shopGrowingSpeed","toNumber","TimeNeeded","prestigeBonus","calcPlantHarvest","helper","Rank","prestige","manualHarvestBonus","calcShopProdBonus","modifiers_input","shopLevel","FarmingShopPlantTotalProduction","calcProdOutput","plant_input","TotalCreated","totalMade","shopProdBonus","PlantTotalProductionBonus","originalShopProdBonus","originalShopProdLevel","plantMult","futureMult","output","ID","hpBonus","calcFryOutput","potatoes","log10","step1","inter1","lessThan","step2","step3","calcCarryOverEXP_OLD","_ref","numAutos","expTick","leftOver","numLevels","individualEXP","ticksNeededEXP","ceil","reqExp","curExp","futureReq","calcCarryOverEXP","_ref2","numEXP","calcEXPBonus","originalBonus","originalRankLevelBonus","originalLevel","originalShopRankLevel","currentShopLevel","shopRankLevel","originalPotion","originalPotionRank","currentPotion","potionRank","expBonus","futureMultBD","manualHarvestFormula","created","calcFutureMult","JSON","parse","stringify","remainingTime","time","numAuto","newExpBonus","growthTime","newOutPut","production","timeToLevel","calcTimeTillLevel","elapsedTime","rankIncrease","numHarvests","toCreate","perHarvest","gainedEXP","totalExp","Infinity","remExp","getNextShopCosts","data","prodLevel","shopProdLevel","growthLevel","FarmingShopPlantGrowingSpeed","expLevel","FarmingShopPlantRankExpEarned","temp1","temp2","temp3","temp4","prodCost","growthCost","expCost","calcMaxPrestige","start","runningHarvests","flag","requiredPerPic","requiredHarvests","greaterThanOrEqualTo","calcTimeTillPrestige","resetPlantBD","resetModifiersBD","prestiged","totalTime","remainingHarvests","timeTillPrestige","ticks","rankRes","_plant$totalMade","_plant$totalMade2","_plant$created","_plant$created2","_plant$production","_plant$production2","_modifiers$shopProdBo","_modifiers$shopProdBo2","_modifiers$hpBonus","_modifiers$hpBonus2","_modifiers$curPotatoe","_modifiers$totalPotat","_modifiers$totalPotat2","curPotatoes","totalPotatoes","calcHPProd","plants_input","plants","nextCosts","simulationTime","startTime","runningTime","dataPointsMax","maxSteps","tickStart","tickRate","dataPointThreshold","dataPointsPotatoes","dataPointsFries","currPotatoes","prevPlantsProd","Array","fill","finalPass","prodMult","HPInitial","j","curr","toAdd","_objectSpread","forceRankPotion","potionRankTime","curTime","HPToAdd","autoBuyPBC","updateCosts","boughtUpgrade","shopRankEXP","skipFinal","timeIncrease","increase","trueTimeIncrease","finalPotatoes","newObj","potatoeProduction","finalModifiers","calcStepHPProd","steps","res","potatoeSteps","autos","obj","text","calcAssemblyHP","bonus","AssemblerCollection","BonusList","StartingLevel","Level","gain","Gain","level","calcAssembly","line_num","bonus_num","calcAssemblyLine","line","al_level","calcAssemblyCost","id","costReduction","AssemblyCostReductionBonus","assembly","baseCost","BaseCost","temp","CostExpo","powStepBase","calcProteinPerSecond","proteinBonus","ProteinBonus","frenchTotal","FrenchFriesTotal","result","log1","log2","calcContagionBonus","GrasshopperCollection","Locked","BaseBonus","calcExpeditionHP","ExpeditionsCollection","BonusPower","Room","calcUniqueHPBonus","FarmingShopUniqueHealthy","calcFriesHPBonus","FarmingShopFriesHealthyBonus","calcPetHPBonus","activePets","EquipedPetID","allPets","PetsCollection","neededMap","bonusInner","x1","x2","calcHPBonus","HealthyPotatoBonus","self","onmessage","_ref$data","data1","finalPlants","cur","mode","futureTime","numSimulatedAutos","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","bestPIC","bestPicCombo","bestPICPerc","bestPICPercCombo","dataObj","top10DataPointsPotatoes","top10DataPointsFries","counter","counterMax","end","combo","curStep","numSteps","minTime","baseTimers","remaining","reverse","runTime","curPlant","remainder","diff","generalHelper","picGained","picPercent","picIncrease","unshift","pop","picGain","picStats","picLevel","postMessage","update","updateAmount","success","err"],"sourceRoot":""}