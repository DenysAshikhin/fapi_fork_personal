{"version":3,"file":"static/js/960.4d38b46b.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","util/helper.js","farmingWorker.js"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","var helper = {\r\n    roundTwoDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 100) / 100;\r\n    },\r\n    roundThreeDecimal: function (number) {\r\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\r\n    },\r\n    roundInt: function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    },\r\n    calculateLogarithm: function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    },\r\n    calcPOW: function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    },\r\n    calcProdOutput: function (plant_input, modifiers_input) {\r\n\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = 1 * shopProdBonus * assemblyBonus * modifiers_input.contagionPlantProd;\r\n\r\n        const Max = function (a, b) {\r\n            return a > b ? a : b;\r\n        }\r\n        let plantMult = Math.pow(\r\n            (1 + 0.05 * (1 + shovel * 0.02)),\r\n            this.calculateLogarithm(1.25, ManuallyCreated)\r\n        )\r\n        let output = TotalCreated * plantMult * PlantTotalProductionBonus * Math.pow(1.02, prestige);\r\n\r\n\r\n        return output;\r\n    },\r\n    calcFutureMult: function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let x = 0;\r\n        while (remainingTime > 0) {\r\n            plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n            if (plant.growthTime < 10) {\r\n                plant.growthTime = 10;\r\n            }\r\n            plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank)\r\n            plant.timeToLevel = (plant.reqExp - plant.curExp) / (plant.prestigeBonus * modifiers.expBonus * numAutos) * plant.growthTime;\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel >= remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n            remainingTime -= elapsedTime;\r\n\r\n            // plant.created = this.calcPOW(plant.ManuallyCreated);\r\n            plant.perHarvest = this.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n            let toCreate = plant.perHarvest * (elapsedTime / plant.growthTime) * numAutos;\r\n            plant.futureMult = Math.pow(\r\n                (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n                this.calculateLogarithm(1.25, plant.created + toCreate)\r\n            );\r\n            plant.created += toCreate;\r\n            plant.totalMade += toCreate;\r\n\r\n            if (rankIncrease) {\r\n                plant.Rank++;\r\n                plant.curExp = 0;\r\n            }\r\n            else {\r\n                let gainedEXP = (elapsedTime / plant.growthTime) * (plant.prestigeBonus * modifiers.expBonus * numAutos);\r\n                plant.curExp += gainedEXP;\r\n            }\r\n\r\n            let newOutPut = this.calcProdOutput(plant, modifiers);\r\n            plant.production = newOutPut;\r\n        }\r\n        return plant;\r\n    },\r\n    calcTimeTillLevel: function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        if (plant.ID === 5) {\r\n            let x = 0;\r\n        }\r\n\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n\r\n        plant.timeToLevel = (remExp / expBonus) * plant.growthTime;\r\n        return plant;\r\n    },\r\n    calcPerHarvest: function (plant) {\r\n        return this.roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige)\r\n    },\r\n    calcTimeTillPrestige: function (plant_input, modifiers_input) {\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        let prestiged = false;\r\n        let totalTime = 0;\r\n\r\n        while (!prestiged) {\r\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers).timeToLevel;\r\n            let requiredHarvests = 10 * Math.pow(2, plant.prestige);\r\n            let remainingHarvests = requiredHarvests - plant.created;\r\n            let timeTillPrestige = (remainingHarvests / (plant.perHarvest * numAutos)) * plant.growthTime;\r\n\r\n            if (timeTillPrestige < 0) {\r\n                prestiged = true\r\n            }\r\n            else if (timeTillPrestige > timeToLevel) {\r\n                plant.created += ((timeToLevel / plant.growthTime) * plant.perHarvest) * numAutos;\r\n                plant.Rank++;\r\n                plant.curExp = 0;\r\n                plant.perHarvest = this.calcPerHarvest(plant);\r\n                totalTime += timeToLevel;\r\n            }\r\n            else {\r\n                prestiged = true;\r\n                plant.created += ((timeTillPrestige / plant.growthTime) * plant.perHarvest) * numAutos;\r\n                totalTime += timeTillPrestige;\r\n            }\r\n        }\r\n        return totalTime;\r\n    },\r\n    calcHPProd: function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAutos;\r\n        let time = modifiers.time;//time in seconds\r\n\r\n        let totalPotatoes = 0;\r\n\r\n        //Iterate over each second\r\n        for (let i = 0; i < time; i++) {\r\n            //Calculate new values for each plant\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n                let toAdd = j === plants.length - 1 ? 0 : plants[j + 1].production * 1;\r\n                curr.totalMade += toAdd;\r\n                let res = helper.calcFutureMult(curr, { ...modifiers, time: 1, numAuto: numAutos[j] });\r\n                plants[j] = res;\r\n            }\r\n            totalPotatoes += plants[0].production;\r\n        }\r\n        // console.log(`plant 2 final prod: ${plants[1].production}`)\r\n        return { totalPotatoes: totalPotatoes, potatoeProduction: plants[0].production, plants: plants };\r\n    },\r\n    secondsToStringWithS: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n        let numSeconds = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = Math.floor((seconds % 3600) / 60);\r\n        numSeconds = (seconds % 3600) % 60;\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`\r\n        }\r\n        if (numSeconds > 0) {\r\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`\r\n        }\r\n        else {\r\n            string = string + '0s';\r\n        }\r\n\r\n        return string;\r\n    },\r\n    secondsToString: function (seconds) {\r\n        let string = ``;\r\n        let numHours = 0;\r\n        let numMinutes = 0;\r\n\r\n        numHours = Math.floor(seconds / 3600);\r\n        numMinutes = this.roundInt((seconds % 3600) / 60);\r\n\r\n        if (numHours > 0) {\r\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`\r\n        }\r\n        if (numMinutes > 0) {\r\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`\r\n        }\r\n        else {\r\n            string = string + `0s`;\r\n        }\r\n\r\n        return string;\r\n    },\r\n    bonusColorMap: {\r\n        1001: { color: 'maroon' },\r\n        1002: { color: 'orange' },\r\n        1003: { color: 'purple' },\r\n        1009: { color: 'cyan' },\r\n        1012: { color: 'yellow' },\r\n        1013: { color: 'red' },\r\n        1014: { color: 'blue' },\r\n        1015: { color: 'gray' },\r\n        1016: { color: 'green' }\r\n    }\r\n}\r\n\r\n\r\nexport default helper;","import helper from './util/helper.js';\r\n\r\n\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.onmessage = ({ data: { data, id, data1 } }) => {\r\n\r\n    const roundInt = function (num) {\r\n        return Math.round((num + Number.EPSILON) * 1) / 1;\r\n    }\r\n\r\n    const calculateLogarithm = function (base, x) {\r\n        var a = Math.log(x);\r\n        var b = Math.log(base);\r\n        return a / b;\r\n    }\r\n    const calcPOW = function (val) {\r\n        return val.mantissa * Math.pow(10, val.exponent);\r\n    }\r\n    const calcProdOutput = function (plant_input, modifiers_input) {\r\n\r\n\r\n        let TotalCreated = plant_input.totalMade;\r\n        let ManuallyCreated = plant_input.created;\r\n        let shovel = modifiers_input.manualHarvestFormula;\r\n        let shopProdBonus = modifiers_input.shopProdBonus;\r\n        const assemblyBonus = 1;\r\n        let prestige = plant_input.prestige;\r\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\r\n        let PlantTotalProductionBonus = 1 * shopProdBonus * assemblyBonus * modifiers_input.contagionPlantProd;\r\n\r\n        const Max = function (a, b) {\r\n            return a > b ? a : b;\r\n        }\r\n        let plantMult = Math.pow(\r\n            (1 + 0.05 * (1 + shovel * 0.02)),\r\n            calculateLogarithm(1.25, ManuallyCreated)\r\n        )\r\n        let output = TotalCreated * plantMult * PlantTotalProductionBonus * Math.pow(1.02, prestige);\r\n\r\n\r\n        return output;\r\n    }\r\n    const calcFutureMult = function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let remainingTime = modifiers.time;\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n\r\n        let x = 0;\r\n        while (remainingTime > 0) {\r\n            plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n            if (plant.growthTime < 10) {\r\n                plant.growthTime = 10;\r\n            }\r\n            plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank)\r\n            plant.timeToLevel = (plant.reqExp - plant.curExp) / (plant.prestigeBonus * modifiers.expBonus * numAutos) * plant.growthTime;\r\n\r\n            let elapsedTime = 0;\r\n\r\n            let rankIncrease = false;\r\n            if (plant.timeToLevel >= remainingTime) {\r\n                elapsedTime = remainingTime;\r\n            }\r\n            else {\r\n                elapsedTime = plant.timeToLevel;\r\n                rankIncrease = true;\r\n            }\r\n            remainingTime -= elapsedTime;\r\n\r\n            // plant.created = this.calcPOW(plant.ManuallyCreated);\r\n            plant.perHarvest = roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige);\r\n            let toCreate = plant.perHarvest * (elapsedTime / plant.growthTime) * numAutos;\r\n            plant.futureMult = Math.pow(\r\n                (1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02)),\r\n                calculateLogarithm(1.25, plant.created + toCreate)\r\n            );\r\n            plant.created += toCreate;\r\n            plant.totalMade += toCreate;\r\n\r\n            if (rankIncrease) {\r\n                plant.Rank++;\r\n                plant.curExp = 0;\r\n            }\r\n            else {\r\n                let gainedEXP = (elapsedTime / plant.growthTime) * (plant.prestigeBonus * modifiers.expBonus * numAutos);\r\n                plant.curExp += gainedEXP;\r\n            }\r\n\r\n            let newOutPut = calcProdOutput(plant, modifiers);\r\n            plant.production = newOutPut;\r\n        }\r\n        return plant;\r\n    }\r\n    const calcTimeTillLevel = function (plant_input, modifiers_input) {\r\n\r\n        let plant = JSON.parse(JSON.stringify(plant_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\r\n        if (plant.ID === 5) {\r\n            let x = 0;\r\n        }\r\n\r\n        plant.growthTime = Math.floor(plant.TimeNeeded / plant.prestigeBonus / (1 + 0.05 * modifiers.shopGrowingSpeed) / modifiers.petPlantCombo / modifiers.contagionPlantGrowth);\r\n        if (plant.growthTime < 10) {\r\n            plant.growthTime = 10;\r\n        }\r\n        plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\r\n        let remExp = plant.reqExp - plant.curExp;\r\n        let expBonus = plant.prestigeBonus * modifiers.expBonus * numAutos;\r\n\r\n        plant.timeToLevel = (remExp / expBonus) * plant.growthTime;\r\n        return plant;\r\n    }\r\n    const calcPerHarvest = function (plant) {\r\n        return roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige)\r\n    }\r\n    const calcHPProd = function (plants_input, modifiers_input) {\r\n        let plants = JSON.parse(JSON.stringify(plants_input));\r\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\r\n        let numAutos = modifiers.numAutos;\r\n        let time = modifiers.time;//time in seconds\r\n\r\n        let totalPotatoes = 0;\r\n\r\n        //Iterate over each second\r\n        for (let i = 0; i < time; i++) {\r\n            //Calculate new values for each plant\r\n            for (let j = plants.length - 1; j >= 0; j--) {\r\n                let curr = plants[j];\r\n                let toAdd = j === plants.length - 1 ? 0 : plants[j + 1].production * 1;\r\n                curr.totalMade += toAdd;\r\n                let res = calcFutureMult(curr, { ...modifiers, time: 1, numAuto: numAutos[j] });\r\n                plants[j] = res;\r\n            }\r\n            console.log(plants[0].production)\r\n            totalPotatoes += plants[0].production;\r\n        }\r\n        // console.log(`plant 2 final prod: ${plants[1].production}`)\r\n        return { totalPotatoes: totalPotatoes, potatoeProduction: plants[0].production };\r\n    }\r\n\r\n    let finalPlants = data.finalPlants;\r\n    let modifiers = data.modifiers;\r\n    const secondsHour = 3600;\r\n    let futureTime = data.time;\r\n    // let totalNumAutos = data.FarmingShopAutoPlotBought;\r\n    // let numPlants = finalPlants.length;\r\n    let combinations = data.combinations;\r\n\r\n\r\n    let totalPot = 0;\r\n    let totalPotCombo = {};\r\n    let bestProd = 0;\r\n    let bestProdCombo = {};\r\n\r\n    for (let i = data.start; i < data.end; i++) {\r\n        // console.log(`calculating loop: ${i + 1} / ${combinations.length}`);\r\n        let combo = combinations[i];\r\n        let tempPlants = [];\r\n\r\n        let result = helper.calcHPProd(finalPlants, { ...modifiers, numAutos: combo, time: secondsHour * futureTime })\r\n\r\n\r\n        if (result.totalPotatoes > totalPot) {\r\n            totalPot = result.totalPotatoes;\r\n            totalPotCombo = { combo: combo, result: result, plants: result.plants }\r\n        }\r\n        if (result.potatoeProduction > bestProd) {\r\n            bestProd = result.potatoeProduction;\r\n            bestProdCombo = { combo: combo, result: result, plants: result.plants }\r\n        }\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        self.postMessage({\r\n            update: true\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // eslint-disable-next-line no-restricted-globals\r\n    self.postMessage({\r\n        success: true,\r\n        totalPotCombo: totalPotCombo,\r\n        bestProdCombo: bestProdCombo\r\n    })\r\n}"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_defineProperty","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","helper","roundTwoDecimal","number","Math","round","EPSILON","roundThreeDecimal","roundInt","num","calculateLogarithm","base","x","log","calcPOW","val","mantissa","pow","exponent","calcProdOutput","plant_input","modifiers_input","TotalCreated","totalMade","ManuallyCreated","created","shovel","manualHarvestFormula","shopProdBonus","prestige","PlantTotalProductionBonus","contagionPlantProd","this","calcFutureMult","plant","JSON","parse","stringify","modifiers","remainingTime","time","numAutos","numAuto","growthTime","floor","TimeNeeded","prestigeBonus","shopGrowingSpeed","petPlantCombo","contagionPlantGrowth","reqExp","Rank","timeToLevel","curExp","expBonus","elapsedTime","rankIncrease","perHarvest","toCreate","futureMult","gainedEXP","newOutPut","production","calcTimeTillLevel","ID","remExp","calcPerHarvest","calcTimeTillPrestige","prestiged","totalTime","timeTillPrestige","calcHPProd","plants_input","plants","totalPotatoes","j","curr","toAdd","_objectSpread","potatoeProduction","secondsToStringWithS","seconds","numHours","numMinutes","numSeconds","string","concat","secondsToString","bonusColorMap","color","self","onmessage","_ref","_ref$data","data","finalPlants","id","data1","futureTime","combinations","totalPot","totalPotCombo","bestProd","bestProdCombo","start","end","combo","result","postMessage","update","success"],"sourceRoot":""}